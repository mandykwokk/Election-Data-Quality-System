{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\MapScreen.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Map, TileLayer, LayersControl, ZoomControl, GeoJSON, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet-draw';\nimport Control from 'react-leaflet-control';\nimport * as Turf from '@turf/turf';\nimport { Layout, Checkbox, Card, Spin, message } from 'antd';\nimport BorderJsonRequester from 'requesters/BorderJsonRequester';\nimport HistoryRequester from 'requesters/HistoryRequester';\nimport ErrorRequester from 'requesters/ErrorRequester';\nimport LayerStyler from 'utils/LayerStyler';\nimport * as Constants from 'constants/constants';\nimport StateContext from 'contexts/StateContext';\nimport DistrictContext from 'contexts/DistrictContext';\nimport HistoryContext from 'contexts/HistoryContext';\nimport RerenderContext from 'contexts/RerenderContext';\nimport LeftPanel from './LeftPanel/LeftPanel';\nimport RightPanel from './RightPanel/RightPanel';\nimport CommentTab from './RightPanel/CommentTab';\nimport HeaderPanel from './HeaderPanel/HeaderPanel';\nimport moment from 'moment';\nimport PrecinctRequester from 'requesters/PrecinctRequester';\nconst borderJsonRequester = new BorderJsonRequester();\nconst historyRequester = new HistoryRequester();\nconst errorRequester = new ErrorRequester();\nconst layerStyler = new LayerStyler();\nconst precinctRequester = new PrecinctRequester();\nmessage.config({\n  top: 60,\n  duration: 3\n});\nconst NpMarker = new L.Icon({\n  iconUrl: 'images/NpMarker.png',\n  iconSize: [48, 48]\n});\nexport default function MapScreen() {\n  const [mapRef, setMapRef] = useState(null);\n  const [zoomLevel, setZoomLevel] = useState(4);\n  const [showDistricts, setShowDistricts] = useState(true);\n  const [showPrecincts, setShowPrecincts] = useState(true);\n  const [showNp, setShowNp] = useState(false);\n  const [showCommentTab, setShowCommentTab] = useState(false);\n  const [selectedState, setSelectedState] = useState(null);\n  const [selectedCd, setSelectedCd] = useState(null);\n  const [selectedPrecinct, setSelectedPrecinct] = useState(null); //const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\n\n  const [selectedHistory, setSelectedHistory] = useState(null);\n  const [stateBorders, setStateBorders] = useState(null);\n  const stateLayerRefs = useRef([React.createRef(), React.createRef(), React.createRef()]);\n  const [cdBorders, setCdBorders] = useState(null);\n  const [precinctBorders, setPrecinctBorders] = useState(null);\n  const [precinctsRef, setPrecinctsRef] = useState(null);\n  const [npBorders, setNpBorders] = useState(null);\n  const [npMarkers] = useState([]);\n  const [ghostMarkers, setGhostMarkers] = useState([]);\n  const [history, setHistory] = useState([[], [], [], [], [], []]);\n  const [errors, setErrors] = useState([[], [], [], [], [], []]);\n  const [delayHandler, setDelayHandler] = useState(null);\n  const [addingNeighbor, setAddingNeighbor] = useState(false);\n  const [removingNeighbor, setRemovingNeighbor] = useState(false);\n  const [combiningPrecinct, setCombiningPrecinct] = useState(false);\n  const [rerender, setRerender] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [drawController, setDrawController] = useState(null);\n  useEffect(() => {\n    (async () => {\n      setStateBorders((await borderJsonRequester.getStateBorders()));\n      setCdBorders((await borderJsonRequester.getCdBorders()));\n      const npBorders = await borderJsonRequester.getNpBorders();\n      setNpBorders(npBorders);\n      npBorders.features.forEach(feature => {\n        const center = Turf.centroid(Turf.feature(feature.geometry));\n        center.geometry.coordinates = center.geometry.coordinates.reverse();\n        center.properties.name = feature.properties.UNIT_NAME;\n        npMarkers.push(center);\n      });\n    })();\n  }, [npMarkers]);\n\n  function calculateFeatureCenter(feature) {\n    return Turf.centroid(Turf.feature(feature.geometry));\n  }\n\n  function handleStateChangeDropdown(stateName) {\n    message.info(stateBorders[Constants.STATES.indexOf(stateName)].name + \"->\" + JSON.stringify(stateBorders[Constants.STATES.indexOf(stateName)].elections));\n    handleStateChange(stateBorders[Constants.STATES.indexOf(stateName)], null);\n  }\n\n  async function handleStateChange(state, layer) {\n    setSelectedState(null);\n    setSelectedState(state);\n    setSelectedCd(null);\n    setSelectedPrecinct(null);\n    setPrecinctBorders(null);\n    setHistory([[], [], [], [], [], []]);\n    setErrors([[], [], [], [], [], []]); //message.info(state.name+\"->\"+JSON.stringify(state.elections));\n\n    if (selectedState && state.name === selectedState.name) return;\n    if (!layer) mapRef.leafletElement.fitBounds(stateLayerRefs.current[Constants.STATES.indexOf(state.name)].current.leafletElement.getBounds());else mapRef.leafletElement.fitBounds(layer.getBounds());\n  }\n\n  function handlePrecinctChange(layer) {\n    setSelectedPrecinct(null);\n    setSelectedPrecinct(layer.feature);\n  }\n\n  function handlePrecinctLayerOnClick(e) {\n    if (addingNeighbor) {\n      if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, true)) {\n        selectedPrecinct.neighbors.push(e.layer.feature.id);\n        e.layer.feature.neighbors.push(selectedPrecinct.id);\n        setAddingNeighbor(false);\n        handleAddHistory({\n          description: `Added ${e.layer.feature.id} to ${selectedPrecinct.id}'s neighbor`\n        }, selectedPrecinct);\n        handleAddHistory({\n          description: `Added ${selectedPrecinct.id} to ${e.layer.feature.id}'s neighbor`\n        }, e.layer.feature);\n        message.success('Successfully added neighbor.');\n      }\n    } else if (removingNeighbor) {\n      if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, false)) {\n        for (var i = 0; i < selectedPrecinct.neighbors.length; i++) {\n          if (selectedPrecinct.neighbors[i] === e.layer.feature.id) selectedPrecinct.neighbors.splice(i, 1);\n        }\n\n        for (var j = 0; j < e.layer.feature.neighbors.length; j++) {\n          if (e.layer.feature.neighbors[j] === selectedPrecinct.id) e.layer.feature.neighbors.splice(j, 1);\n        }\n\n        setRemovingNeighbor(false);\n        handleAddHistory({\n          description: `Removed ${e.layer.feature.id} from ${selectedPrecinct.id}'s neighbor`\n        }, selectedPrecinct);\n        handleAddHistory({\n          description: `Removed ${selectedPrecinct.id} from ${e.layer.feature.id}'s neighbor`\n        }, e.layer.feature);\n        message.success('Successfully removed neighbor.');\n      }\n    } else if (combiningPrecinct) {\n      if (!selectedPrecinct.properties.neighbors.includes(e.layer.feature.id)) {\n        message.error('Please select a neighbor precinct to combine.');\n        return;\n      }\n\n      const clickedPrecinct = e.layer.feature;\n      const newFeature = Turf.union(Turf.feature(selectedPrecinct.geometry), Turf.feature(clickedPrecinct.geometry));\n      newFeature.properties = {\n        NAME10: selectedPrecinct.id,\n        CONGRESSIO: selectedPrecinct.properties.CONGRESSIO,\n        neighbors: selectedPrecinct.properties.neighbors.concat(clickedPrecinct.properties.neighbors).filter(item => {\n          return item !== selectedPrecinct.id && item !== clickedPrecinct.id;\n        }),\n        comments: selectedPrecinct.properties.comments.concat(clickedPrecinct.properties.comments),\n        demographic: selectedPrecinct.properties.demographic.map((item, index) => {\n          return item + clickedPrecinct.properties.demographic[index];\n        }),\n        election: selectedPrecinct.properties.election.map((item, index) => {\n          return item + clickedPrecinct.properties.election[index];\n        }),\n        isGhost: false\n      };\n      precinctBorders.features = precinctBorders.features.filter(item => {\n        return item.id !== selectedPrecinct.id && item.id !== clickedPrecinct.id;\n      });\n      precinctBorders.features.push(newFeature);\n      precinctsRef.leafletElement.clearLayers();\n      precinctsRef.leafletElement.addData(precinctBorders);\n      setSelectedPrecinct(null);\n      setSelectedPrecinct(newFeature);\n      handleAddHistory(`Combined precincts ${selectedPrecinct.id} with ${clickedPrecinct.id}`);\n      message.success('Successfully combined precincts.');\n      setCombiningPrecinct(false);\n    } else if (selectedPrecinct && selectedPrecinct.id === e.layer.feature.id) {\n      setSelectedPrecinct(null);\n    } else {\n      handlePrecinctChange(e.layer);\n    }\n  }\n\n  function handlePrecinctLayerMouseOver(e) {\n    if (addingNeighbor || combiningPrecinct || drawController) {\n      return;\n    }\n\n    setDelayHandler(setTimeout(() => {\n      handlePrecinctChange(e.layer);\n    }, 500));\n  }\n\n  function handleZoomChange() {\n    setZoomLevel(mapRef.viewport.zoom);\n  }\n\n  function handleShowPrecincts(e) {\n    setShowPrecincts(e.target.checked);\n  }\n\n  function handleShowDistricts(e) {\n    setShowDistricts(e.target.checked);\n  }\n\n  function handleShowNp(e) {\n    setShowNp(e.target.checked);\n  }\n\n  function handleCombinePrecinct() {\n    setCombiningPrecinct(true);\n    message.info('Please click on a neighbor precinct to combine.');\n  }\n\n  function handleConfirmGhostPrecinct() {\n    selectedPrecinct.name = selectedPrecinct.name.substring(selectedPrecinct.name.indexOf(\" \") + 1);\n\n    if (precinctRequester.updateGhostPrecinct(selectedPrecinct.id)) {\n      setRerender(!rerender);\n      handleAddHistory({\n        description: `Confirmed precinct ${selectedPrecinct.id} is a Ghost Precinct.`\n      }, selectedPrecinct);\n      message.success('Action Completed');\n    } else {\n      message.error('Action Failed');\n    }\n  }\n\n  function handleEditPrecinctLayer() {\n    const featureGroup = L.featureGroup([new L.polygon(selectedPrecinct.geometry.coordinates[0].map(positions => [positions[1], positions[0]]))]);\n    mapRef.leafletElement.addLayer(featureGroup);\n    const drawController = new L.EditToolbar.Edit(mapRef.leafletElement, {\n      featureGroup: featureGroup\n    });\n    setDrawController(drawController);\n    mapRef.leafletElement.removeEventListener('draw:edited');\n    mapRef.leafletElement.addEventListener('draw:edited', function (e) {\n      const layersKey = Object.keys(e.layers._layers);\n      if (layersKey.length === 0) return;\n      const layer = e.layers._layers[layersKey[0]];\n      const geoJson = {\n        type: \"Polygon\",\n        coordinates: [layer._latlngs[0].map(item => [item.lng, item.lat])]\n      };\n      const kinks = Turf.kinks(geoJson);\n\n      if (kinks.features.length) {\n        message.error(\"Self-Intersection Detected, Please Do It Again!\");\n        return;\n      }\n\n      precinctRequester.updateBoundary(selectedPrecinct.id, JSON.stringify(geoJson));\n      selectedPrecinct.geometry = geoJson;\n      precinctsRef.leafletElement.clearLayers();\n      precinctsRef.leafletElement.addData(precinctBorders);\n      message.success(`Successfully edited ${selectedPrecinct.name}'s boundary.`);\n      handleAddHistory({\n        description: `Edited ${selectedPrecinct.name}'s boundary.`\n      }, selectedPrecinct);\n    });\n    mapRef.leafletElement.removeEventListener('draw:editstop');\n    mapRef.leafletElement.addEventListener('draw:editstop', function (e) {\n      mapRef.leafletElement.removeLayer(featureGroup);\n    });\n    drawController.enable();\n  }\n\n  function handleDrawSave() {\n    if (drawController instanceof L.Draw.Polygon) drawController.completeShape();else drawController.save();\n    handleClickedCancel();\n  }\n\n  function handleClickedCancel() {\n    if (addingNeighbor) {\n      setAddingNeighbor(false);\n      message.info('Cancelled adding neighbor.');\n    } else if (combiningPrecinct) {\n      setCombiningPrecinct(false);\n      message.info('Cancelled combining precincts.');\n    } else {\n      drawController.disable();\n      setDrawController(null);\n    }\n  }\n\n  function handleDrawUndo() {\n    if (drawController instanceof L.Draw.Polygon) drawController.deleteLastVertex();else drawController.revertLayers();\n  }\n\n  function handleAddNeighbor() {\n    setAddingNeighbor(true);\n    message.info('Please click on another precinct to add.');\n  }\n\n  function handleRemoveNeighbor() {\n    setRemovingNeighbor(true);\n    message.info('Please click on another precinct to remove.');\n  }\n\n  async function handleAddHistory(newHistory, precinct, layer = null) {\n    newHistory.timestamp = moment();\n\n    if (await historyRequester.postHistory(newHistory, precinct.id)) {\n      if (newHistory.category) history[Constants.ERROR_ENUM.indexOf(newHistory.category)].push([newHistory, layer]);\n      newHistory.precinct = precinct;\n      precinct.histories.push(newHistory);\n    } else {\n      message.error('Failed to post history.');\n    } // setHistory([newLog, ...history]);\n\n  }\n\n  function handleZoomInPrecinct(feature, layer) {\n    setSelectedPrecinct(feature);\n    mapRef.leafletElement.fitBounds(layer.getBounds());\n  }\n\n  function handleResolvedError(error, index, layer) {\n    const res = errorRequester.ResolveError(error.id);\n\n    if (res) {\n      errors[index] = errors[index].filter(item => {\n        return error.id !== item[0].id;\n      });\n      setRerender(!rerender);\n      const description = \"Resolved error \" + Constants.ERROR_HEADER[Constants.ERROR_ENUM.indexOf(error.category)] + \". Error description: \" + error.description;\n      handleAddHistory({\n        description,\n        category: error.category\n      }, error.precinct, layer);\n      message.success('Successfully resolved the error.');\n    } else {\n      message.error('Failed to resolve.');\n    }\n  }\n\n  function handleOpenCommentTab(history) {\n    setShowCommentTab(true);\n    setSelectedHistory(history);\n  }\n\n  function handleCloseCommentTab() {\n    setShowCommentTab(false);\n    setSelectedHistory(null);\n  }\n\n  function handleAddComment(comment, timestamp) {}\n\n  function onEachStateFeature(state, layer) {\n    layer.on({\n      click: async () => {\n        handleStateChange(state, layer);\n      },\n      mouseover: () => {\n        layer.setStyle({\n          weight: 3\n        });\n      },\n      mouseout: () => {\n        layer.setStyle({\n          weight: 1\n        });\n      }\n    });\n  }\n\n  function onEachCdFeature(district, layer) {\n    layer.on({\n      click: async () => {\n        setLoading(true);\n        setSelectedCd(null);\n        setPrecinctBorders(null);\n        setSelectedPrecinct(null);\n        setHistory([[], [], [], [], [], []]);\n        setErrors([[], [], [], [], [], []]);\n        await borderJsonRequester.getPrecinctBorder(district.name).then(res => {\n          setPrecinctBorders(res);\n        });\n        setSelectedCd(district);\n        setLoading(false);\n      },\n      mouseover: () => {\n        layer.setStyle({\n          weight: 3\n        });\n      },\n      mouseout: () => {\n        layer.setStyle({\n          weight: 1\n        });\n      }\n    });\n  }\n\n  function onEachPrecinctFeature(precinct, layer) {\n    precinct.errors.forEach((item, index) => {\n      item.precinct = precinct;\n      if (item.category) errors[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\n    });\n    precinct.histories.forEach((item, index) => {\n      item.precinct = precinct;\n      if (item.category) history[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\n    });\n  }\n\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436\n    },\n    __self: this\n  }, React.createElement(StateContext.Provider, {\n    value: selectedState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437\n    },\n    __self: this\n  }, React.createElement(DistrictContext.Provider, {\n    value: selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438\n    },\n    __self: this\n  }, React.createElement(HistoryContext.Provider, {\n    value: [history, handleAddHistory],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, React.createElement(RerenderContext.Provider, {\n    value: [rerender, setRerender],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440\n    },\n    __self: this\n  }, React.createElement(LeftPanel, {\n    errors: errors,\n    history: history,\n    handleZoomInPrecinct: handleZoomInPrecinct,\n    handleResolvedError: handleResolvedError,\n    handleAddComment: handleAddComment,\n    handleOpenCommentTab: handleOpenCommentTab,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }), React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449\n    },\n    __self: this\n  }, React.createElement(Layout.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450\n    },\n    __self: this\n  }, React.createElement(HeaderPanel, {\n    selectedPrecinct: selectedPrecinct,\n    zoomLevel: zoomLevel,\n    handleStateChangeDropdown: handleStateChangeDropdown,\n    combiningPrecinct: combiningPrecinct,\n    handleCombinePrecinct: handleCombinePrecinct,\n    addingNeighbor: addingNeighbor,\n    removingNeighbor: removingNeighbor,\n    handleAddNeighbor: handleAddNeighbor,\n    handleRemoveNeighbor: handleRemoveNeighbor,\n    handleConfirmGhostPrecinct: handleConfirmGhostPrecinct,\n    handleEditPrecinctLayer: handleEditPrecinctLayer,\n    drawController: drawController,\n    handleClickedCancel: handleClickedCancel,\n    handleDrawSave: handleDrawSave,\n    handleDrawUndo: handleDrawUndo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451\n    },\n    __self: this\n  })), React.createElement(Spin, {\n    spinning: loading,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469\n    },\n    __self: this\n  }, React.createElement(Layout.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470\n    },\n    __self: this\n  }, React.createElement(Map, {\n    ref: ref => {\n      setMapRef(ref);\n    },\n    center: Constants.MAP_CENTER,\n    zoom: 4,\n    zoomControl: false,\n    animate: true,\n    onZoomEnd: handleZoomChange,\n    preferCanvas: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiaGFubGl1IiwiYSI6ImNrNnk3YTZpMzBlcjczZW15cmU1Mm5hMWkifQ.dW0oDKWDng4w-osIkRvLsQ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }), React.createElement(ZoomControl, {\n    position: \"bottomright\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484\n    },\n    __self: this\n  }), React.createElement(Control, {\n    position: \"bottomleft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    defaultChecked: true,\n    onChange: handleShowDistricts,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }, \"Show Districts\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    defaultChecked: true,\n    onChange: handleShowPrecincts,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495\n    },\n    __self: this\n  }, \"Show Precincts\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    onChange: handleShowNp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503\n    },\n    __self: this\n  }, \"Show National Parks \\xA0\", React.createElement(\"img\", {\n    src: \"images/NpIcon.png\",\n    alt: \"National Park Icon\",\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  })))), stateBorders && stateBorders.map((stateBorder, index) => {\n    if (selectedState && stateBorder.name === selectedState.name && zoomLevel >= Constants.DP_ZOOM_LEVEL && (showDistricts || showPrecincts && selectedCd)) {\n      return React.createElement(React.Fragment, {\n        key: \"F\" + index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, showDistricts && React.createElement(GeoJSON, {\n        key: \"CD\" + index,\n        data: cdBorders[Constants.STATES.indexOf(selectedState.name)],\n        style: layerStyler.geoJSONCdStyle,\n        onEachFeature: onEachCdFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }), showPrecincts && precinctBorders && React.createElement(GeoJSON, {\n        key: \"P\" + index,\n        ref: ref => {\n          setPrecinctsRef(ref);\n        },\n        data: precinctBorders,\n        style: feature => layerStyler.geoJSONPrecinctStyle(feature, selectedPrecinct),\n        onEachFeature: onEachPrecinctFeature,\n        onClick: handlePrecinctLayerOnClick,\n        onMouseOver: handlePrecinctLayerMouseOver,\n        onMouseOut: () => clearTimeout(delayHandler),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(GeoJSON, {\n        key: \"S\" + index,\n        ref: stateLayerRefs.current[index],\n        data: stateBorder,\n        style: layerStyler.geoJSONStateStyle,\n        onEachFeature: onEachStateFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      });\n    }\n  }), npBorders && showNp && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554\n    },\n    __self: this\n  }, React.createElement(GeoJSON, {\n    data: npBorders,\n    style: feature => layerStyler.geoJSONNpStyle(feature),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555\n    },\n    __self: this\n  }), \")}\", npMarkers.map((feature, index) => React.createElement(Marker, {\n    key: `marker-${index}`,\n    position: feature.geometry.coordinates,\n    icon: NpMarker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561\n    },\n    __self: this\n  }, React.createElement(Popup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567\n    },\n    __self: this\n  }, \"Name: \", feature.properties.name))))))))), React.createElement(RightPanel, {\n    selectedPrecinct: selectedPrecinct,\n    selectedCd: selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577\n    },\n    __self: this\n  }), React.createElement(CommentTab, {\n    showCommentTab: showCommentTab,\n    handleCloseCommentTab: handleCloseCommentTab,\n    selectedHistory: selectedHistory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/MapScreen.js"],"names":["React","useState","useEffect","useRef","Map","TileLayer","LayersControl","ZoomControl","GeoJSON","Marker","Popup","L","Control","Turf","Layout","Checkbox","Card","Spin","message","BorderJsonRequester","HistoryRequester","ErrorRequester","LayerStyler","Constants","StateContext","DistrictContext","HistoryContext","RerenderContext","LeftPanel","RightPanel","CommentTab","HeaderPanel","moment","PrecinctRequester","borderJsonRequester","historyRequester","errorRequester","layerStyler","precinctRequester","config","top","duration","NpMarker","Icon","iconUrl","iconSize","MapScreen","mapRef","setMapRef","zoomLevel","setZoomLevel","showDistricts","setShowDistricts","showPrecincts","setShowPrecincts","showNp","setShowNp","showCommentTab","setShowCommentTab","selectedState","setSelectedState","selectedCd","setSelectedCd","selectedPrecinct","setSelectedPrecinct","selectedHistory","setSelectedHistory","stateBorders","setStateBorders","stateLayerRefs","createRef","cdBorders","setCdBorders","precinctBorders","setPrecinctBorders","precinctsRef","setPrecinctsRef","npBorders","setNpBorders","npMarkers","ghostMarkers","setGhostMarkers","history","setHistory","errors","setErrors","delayHandler","setDelayHandler","addingNeighbor","setAddingNeighbor","removingNeighbor","setRemovingNeighbor","combiningPrecinct","setCombiningPrecinct","rerender","setRerender","loading","setLoading","drawController","setDrawController","getStateBorders","getCdBorders","getNpBorders","features","forEach","feature","center","centroid","geometry","coordinates","reverse","properties","name","UNIT_NAME","push","calculateFeatureCenter","handleStateChangeDropdown","stateName","info","STATES","indexOf","JSON","stringify","elections","handleStateChange","state","layer","leafletElement","fitBounds","current","getBounds","handlePrecinctChange","handlePrecinctLayerOnClick","e","updateNeighbor","id","neighbors","handleAddHistory","description","success","i","length","splice","j","includes","error","clickedPrecinct","newFeature","union","NAME10","CONGRESSIO","concat","filter","item","comments","demographic","map","index","election","isGhost","clearLayers","addData","handlePrecinctLayerMouseOver","setTimeout","handleZoomChange","viewport","zoom","handleShowPrecincts","target","checked","handleShowDistricts","handleShowNp","handleCombinePrecinct","handleConfirmGhostPrecinct","substring","updateGhostPrecinct","handleEditPrecinctLayer","featureGroup","polygon","positions","addLayer","EditToolbar","Edit","removeEventListener","addEventListener","layersKey","Object","keys","layers","_layers","geoJson","type","_latlngs","lng","lat","kinks","updateBoundary","removeLayer","enable","handleDrawSave","Draw","Polygon","completeShape","save","handleClickedCancel","disable","handleDrawUndo","deleteLastVertex","revertLayers","handleAddNeighbor","handleRemoveNeighbor","newHistory","precinct","timestamp","postHistory","category","ERROR_ENUM","histories","handleZoomInPrecinct","handleResolvedError","res","ResolveError","ERROR_HEADER","handleOpenCommentTab","handleCloseCommentTab","handleAddComment","comment","onEachStateFeature","on","click","mouseover","setStyle","weight","mouseout","onEachCdFeature","district","getPrecinctBorder","then","onEachPrecinctFeature","ref","MAP_CENTER","DP_ZOOM_LEVEL","stateBorder","geoJSONCdStyle","geoJSONPrecinctStyle","clearTimeout","geoJSONStateStyle","geoJSONNpStyle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Map, TileLayer, LayersControl, ZoomControl, GeoJSON, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet-draw';\r\nimport Control from 'react-leaflet-control';\r\nimport * as Turf from '@turf/turf';\r\nimport { Layout, Checkbox, Card, Spin, message } from 'antd';\r\nimport BorderJsonRequester from 'requesters/BorderJsonRequester';\r\nimport HistoryRequester from 'requesters/HistoryRequester';\r\nimport ErrorRequester from 'requesters/ErrorRequester';\r\nimport LayerStyler from 'utils/LayerStyler';\r\nimport * as Constants from 'constants/constants';\r\nimport StateContext from 'contexts/StateContext';\r\nimport DistrictContext from 'contexts/DistrictContext';\r\nimport HistoryContext from 'contexts/HistoryContext';\r\nimport RerenderContext from 'contexts/RerenderContext';\r\nimport LeftPanel from './LeftPanel/LeftPanel';\r\nimport RightPanel from './RightPanel/RightPanel';\r\nimport CommentTab from './RightPanel/CommentTab';\r\nimport HeaderPanel from './HeaderPanel/HeaderPanel'\r\nimport moment from 'moment';\r\nimport PrecinctRequester from 'requesters/PrecinctRequester';\r\n\r\nconst borderJsonRequester = new BorderJsonRequester();\r\nconst historyRequester = new HistoryRequester();\r\nconst errorRequester = new ErrorRequester();\r\nconst layerStyler = new LayerStyler();\r\nconst precinctRequester = new PrecinctRequester();\r\nmessage.config({\r\n    top: 60,\r\n    duration: 3\r\n});\r\n\r\nconst NpMarker = new L.Icon({\r\n    iconUrl: 'images/NpMarker.png',\r\n    iconSize: [48, 48],\r\n});\r\n\r\nexport default function MapScreen() {\r\n    const [mapRef, setMapRef] = useState(null);\r\n    const [zoomLevel, setZoomLevel] = useState(4);\r\n    const [showDistricts, setShowDistricts] = useState(true);\r\n    const [showPrecincts, setShowPrecincts] = useState(true);\r\n    const [showNp, setShowNp] = useState(false);\r\n    const [showCommentTab, setShowCommentTab] = useState(false);\r\n\r\n    const [selectedState, setSelectedState] = useState(null);\r\n    const [selectedCd, setSelectedCd] = useState(null);\r\n    const [selectedPrecinct, setSelectedPrecinct] = useState(null);\r\n    //const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\r\n    const [selectedHistory, setSelectedHistory] = useState(null);\r\n\r\n    const [stateBorders, setStateBorders] = useState(null);\r\n    const stateLayerRefs = useRef([React.createRef(), React.createRef(), React.createRef()]);\r\n    const [cdBorders, setCdBorders] = useState(null);\r\n    const [precinctBorders, setPrecinctBorders] = useState(null);\r\n    const [precinctsRef, setPrecinctsRef] = useState(null);\r\n    const [npBorders, setNpBorders] = useState(null);\r\n\r\n    const [npMarkers] = useState([]);\r\n    const [ghostMarkers, setGhostMarkers] = useState([]);\r\n\r\n    const [history, setHistory] = useState([[], [], [], [], [], []]);\r\n    const [errors, setErrors] = useState([[], [], [], [], [], []]);\r\n\r\n    const [delayHandler, setDelayHandler] = useState(null)\r\n    const [addingNeighbor, setAddingNeighbor] = useState(false)\r\n    const [removingNeighbor, setRemovingNeighbor] = useState(false)\r\n    const [combiningPrecinct, setCombiningPrecinct] = useState(false)\r\n    const [rerender, setRerender] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [drawController, setDrawController] = useState(null);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setStateBorders(await borderJsonRequester.getStateBorders());\r\n            setCdBorders(await borderJsonRequester.getCdBorders());\r\n            const npBorders = await borderJsonRequester.getNpBorders();\r\n            setNpBorders(npBorders);\r\n            npBorders.features.forEach(feature => {\r\n                const center = Turf.centroid(\r\n                    Turf.feature(feature.geometry)\r\n                );\r\n                center.geometry.coordinates = center.geometry.coordinates.reverse();\r\n                center.properties.name = feature.properties.UNIT_NAME;\r\n                npMarkers.push(center);\r\n            })\r\n        }\r\n        )();\r\n    }, [npMarkers]);\r\n\r\n    function calculateFeatureCenter(feature) {\r\n        return Turf.centroid(\r\n            Turf.feature(feature.geometry)\r\n        );\r\n    }\r\n\r\n    function handleStateChangeDropdown(stateName) {\r\n        message.info(stateBorders[Constants.STATES.indexOf(stateName)].name+\"->\"+JSON.stringify(stateBorders[Constants.STATES.indexOf(stateName)].elections));\r\n        handleStateChange(stateBorders[Constants.STATES.indexOf(stateName)], null);\r\n    }\r\n\r\n    async function handleStateChange(state, layer) {\r\n        setSelectedState(null);\r\n        setSelectedState(state);\r\n        setSelectedCd(null);\r\n        setSelectedPrecinct(null);\r\n        setPrecinctBorders(null);\r\n        setHistory([[], [], [], [], [], []]);\r\n        setErrors([[], [], [], [], [], []]);\r\n        //message.info(state.name+\"->\"+JSON.stringify(state.elections));\r\n        if (selectedState && state.name === selectedState.name)\r\n            return;\r\n        if (!layer)\r\n            mapRef.leafletElement.fitBounds(stateLayerRefs.current[Constants.STATES.indexOf(state.name)].current.leafletElement.getBounds());\r\n        else\r\n            mapRef.leafletElement.fitBounds(layer.getBounds());\r\n    }\r\n\r\n    function handlePrecinctChange(layer) {\r\n        setSelectedPrecinct(null);\r\n        setSelectedPrecinct(layer.feature);\r\n    }\r\n\r\n    function handlePrecinctLayerOnClick(e) {\r\n        if (addingNeighbor) {\r\n            if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, true)){\r\n                selectedPrecinct.neighbors.push(e.layer.feature.id);\r\n                e.layer.feature.neighbors.push(selectedPrecinct.id);\r\n                setAddingNeighbor(false);\r\n                handleAddHistory({ description: `Added ${e.layer.feature.id} to ${selectedPrecinct.id}'s neighbor` }, selectedPrecinct);\r\n                handleAddHistory({ description: `Added ${selectedPrecinct.id} to ${e.layer.feature.id}'s neighbor` }, e.layer.feature);\r\n                message.success('Successfully added neighbor.');\r\n            }\r\n        }\r\n        else if (removingNeighbor) {\r\n            if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, false)){\r\n                for (var i = 0; i < selectedPrecinct.neighbors.length; i++) { \r\n                    if (selectedPrecinct.neighbors[i] === e.layer.feature.id)\r\n                        selectedPrecinct.neighbors.splice(i, 1); \r\n                }\r\n                for (var j = 0; j < e.layer.feature.neighbors.length; j++) { \r\n                   if (e.layer.feature.neighbors[j] === selectedPrecinct.id)\r\n                        e.layer.feature.neighbors.splice(j, 1); \r\n                }\r\n                setRemovingNeighbor(false);\r\n                handleAddHistory({ description: `Removed ${e.layer.feature.id} from ${selectedPrecinct.id}'s neighbor` }, selectedPrecinct);\r\n                handleAddHistory({ description: `Removed ${selectedPrecinct.id} from ${e.layer.feature.id}'s neighbor` }, e.layer.feature);\r\n                message.success('Successfully removed neighbor.');\r\n            }\r\n        }\r\n        else if (combiningPrecinct) {\r\n            if (!selectedPrecinct.properties.neighbors.includes(e.layer.feature.id)) {\r\n                message.error('Please select a neighbor precinct to combine.');\r\n                return;\r\n            }\r\n            const clickedPrecinct = e.layer.feature;\r\n            const newFeature = Turf.union(\r\n                Turf.feature(selectedPrecinct.geometry),\r\n                Turf.feature(clickedPrecinct.geometry)\r\n            );\r\n            newFeature.properties = {\r\n                NAME10: selectedPrecinct.id,\r\n                CONGRESSIO: selectedPrecinct.properties.CONGRESSIO,\r\n                neighbors: selectedPrecinct.properties.neighbors\r\n                    .concat(clickedPrecinct.properties.neighbors)\r\n                    .filter(item => {\r\n                        return item !== selectedPrecinct.id\r\n                            && item !== clickedPrecinct.id;\r\n                    }),\r\n                comments: selectedPrecinct.properties.comments.concat(clickedPrecinct.properties.comments),\r\n                demographic: selectedPrecinct.properties.demographic.map((item, index) => {\r\n                    return item + clickedPrecinct.properties.demographic[index]\r\n                }),\r\n                election: selectedPrecinct.properties.election.map((item, index) => {\r\n                    return item + clickedPrecinct.properties.election[index];\r\n                }),\r\n                isGhost: false\r\n            };\r\n            precinctBorders.features = precinctBorders.features.filter(item => {\r\n                return item.id !== selectedPrecinct.id\r\n                    && item.id !== clickedPrecinct.id;\r\n            });\r\n            precinctBorders.features.push(newFeature);\r\n            precinctsRef.leafletElement.clearLayers();\r\n            precinctsRef.leafletElement.addData(precinctBorders);\r\n            setSelectedPrecinct(null);\r\n            setSelectedPrecinct(newFeature);\r\n            handleAddHistory(`Combined precincts ${selectedPrecinct.id} with ${clickedPrecinct.id}`);\r\n            message.success('Successfully combined precincts.');\r\n            setCombiningPrecinct(false);\r\n        }\r\n        else if (selectedPrecinct && selectedPrecinct.id === e.layer.feature.id) {\r\n            setSelectedPrecinct(null);\r\n        }\r\n        else {\r\n            handlePrecinctChange(e.layer);\r\n        }\r\n    }\r\n\r\n    function handlePrecinctLayerMouseOver(e) {\r\n        if (addingNeighbor || combiningPrecinct || drawController) {\r\n            return;\r\n        }\r\n        setDelayHandler(setTimeout(() => {\r\n            handlePrecinctChange(e.layer);\r\n        }, 500))\r\n    }\r\n\r\n    function handleZoomChange() {\r\n        setZoomLevel(mapRef.viewport.zoom);\r\n    }\r\n\r\n    function handleShowPrecincts(e) {\r\n        setShowPrecincts(e.target.checked);\r\n    }\r\n\r\n    function handleShowDistricts(e) {\r\n        setShowDistricts(e.target.checked);\r\n    }\r\n\r\n    function handleShowNp(e) {\r\n        setShowNp(e.target.checked);\r\n    }\r\n\r\n    function handleCombinePrecinct() {\r\n        setCombiningPrecinct(true);\r\n        message.info('Please click on a neighbor precinct to combine.');\r\n    }\r\n\r\n    function handleConfirmGhostPrecinct() {\r\n        selectedPrecinct.name = selectedPrecinct.name.substring(selectedPrecinct.name.indexOf(\" \") + 1);\r\n        if (precinctRequester.updateGhostPrecinct(selectedPrecinct.id)) {\r\n            setRerender(!rerender);\r\n            handleAddHistory({ description: `Confirmed precinct ${selectedPrecinct.id} is a Ghost Precinct.` }, selectedPrecinct);\r\n            message.success('Action Completed');\r\n        }\r\n        else {\r\n            message.error('Action Failed');\r\n        }\r\n    }\r\n\r\n\r\n    function handleEditPrecinctLayer() {\r\n        const featureGroup = L.featureGroup([\r\n            new L.polygon(selectedPrecinct.geometry.coordinates[0].map(positions => [positions[1], positions[0]]))\r\n        ]);\r\n        mapRef.leafletElement.addLayer(featureGroup);\r\n        const drawController = new L.EditToolbar.Edit(mapRef.leafletElement, {\r\n            featureGroup: featureGroup\r\n        });\r\n        setDrawController(drawController);\r\n\r\n        mapRef.leafletElement.removeEventListener('draw:edited');\r\n        mapRef.leafletElement.addEventListener('draw:edited', function (e) {\r\n            const layersKey = Object.keys(e.layers._layers);\r\n            if (layersKey.length === 0)\r\n                return;\r\n            const layer = e.layers._layers[layersKey[0]];\r\n            const geoJson = {\r\n                type: \"Polygon\",\r\n                coordinates: [layer._latlngs[0].map(item => [item.lng, item.lat])]\r\n            }\r\n            const kinks = Turf.kinks(geoJson);\r\n            if (kinks.features.length) {\r\n                message.error(\"Self-Intersection Detected, Please Do It Again!\")\r\n                return\r\n            }\r\n            precinctRequester.updateBoundary(selectedPrecinct.id, JSON.stringify(geoJson));\r\n            selectedPrecinct.geometry = geoJson;\r\n            precinctsRef.leafletElement.clearLayers();\r\n            precinctsRef.leafletElement.addData(precinctBorders);\r\n            message.success(`Successfully edited ${selectedPrecinct.name}'s boundary.`);\r\n            handleAddHistory({ description: `Edited ${selectedPrecinct.name}'s boundary.` }, selectedPrecinct);\r\n        });\r\n\r\n        mapRef.leafletElement.removeEventListener('draw:editstop');\r\n        mapRef.leafletElement.addEventListener('draw:editstop', function (e) {\r\n            mapRef.leafletElement.removeLayer(featureGroup);\r\n        });\r\n        drawController.enable();\r\n    }\r\n\r\n    function handleDrawSave() {\r\n        if (drawController instanceof L.Draw.Polygon)\r\n            drawController.completeShape();\r\n        else\r\n            drawController.save();\r\n        handleClickedCancel();\r\n    }\r\n\r\n    function handleClickedCancel() {\r\n        if (addingNeighbor) {\r\n            setAddingNeighbor(false);\r\n            message.info('Cancelled adding neighbor.');\r\n        }\r\n        else if (combiningPrecinct) {\r\n            setCombiningPrecinct(false);\r\n            message.info('Cancelled combining precincts.');\r\n        }\r\n        else {\r\n            drawController.disable();\r\n            setDrawController(null);\r\n        }\r\n    }\r\n\r\n    function handleDrawUndo() {\r\n        if (drawController instanceof L.Draw.Polygon)\r\n            drawController.deleteLastVertex();\r\n        else\r\n            drawController.revertLayers();\r\n    }\r\n\r\n    function handleAddNeighbor() {\r\n        setAddingNeighbor(true);\r\n        message.info('Please click on another precinct to add.');\r\n    }\r\n\r\n    function handleRemoveNeighbor() {\r\n        setRemovingNeighbor(true);\r\n        message.info('Please click on another precinct to remove.');\r\n    }\r\n\r\n    async function handleAddHistory(newHistory, precinct, layer = null) {\r\n        newHistory.timestamp = moment();\r\n        if (await historyRequester.postHistory(newHistory, precinct.id)) {\r\n            if (newHistory.category)\r\n                history[Constants.ERROR_ENUM.indexOf(newHistory.category)].push([newHistory, layer]);\r\n            newHistory.precinct = precinct;\r\n            precinct.histories.push(newHistory);\r\n        }\r\n        else {\r\n            message.error('Failed to post history.');\r\n        }\r\n        // setHistory([newLog, ...history]);\r\n    }\r\n\r\n    function handleZoomInPrecinct(feature, layer) {\r\n        setSelectedPrecinct(feature);\r\n        mapRef.leafletElement.fitBounds(layer.getBounds());\r\n    }\r\n\r\n    function handleResolvedError(error, index, layer) {\r\n        const res = errorRequester.ResolveError(error.id);\r\n        if (res) {\r\n            errors[index] = errors[index].filter((item) => {\r\n                return error.id !== item[0].id;\r\n            });\r\n            setRerender(!rerender);\r\n            const description = \"Resolved error \" + Constants.ERROR_HEADER[Constants.ERROR_ENUM.indexOf(error.category)]\r\n                + \". Error description: \" + error.description;\r\n            handleAddHistory({ description, category: error.category }, error.precinct, layer);\r\n            message.success('Successfully resolved the error.');\r\n        }\r\n        else {\r\n            message.error('Failed to resolve.');\r\n        }\r\n    }\r\n\r\n    function handleOpenCommentTab(history) {\r\n        setShowCommentTab(true);\r\n        setSelectedHistory(history);\r\n    }\r\n\r\n    function handleCloseCommentTab() {\r\n        setShowCommentTab(false);\r\n        setSelectedHistory(null);\r\n    }\r\n\r\n    function handleAddComment(comment, timestamp) {\r\n\r\n    }\r\n\r\n    function onEachStateFeature(state, layer) {\r\n        layer.on({\r\n            click: async () => {\r\n                handleStateChange(state, layer);\r\n            },\r\n            mouseover: () => {\r\n                layer.setStyle({\r\n                    weight: 3\r\n                });\r\n            },\r\n            mouseout: () => {\r\n                layer.setStyle({\r\n                    weight: 1\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function onEachCdFeature(district, layer) {\r\n        layer.on({\r\n            click: async () => {\r\n                setLoading(true);\r\n                setSelectedCd(null);\r\n                setPrecinctBorders(null);\r\n                setSelectedPrecinct(null);\r\n                setHistory([[], [], [], [], [], []]);\r\n                setErrors([[], [], [], [], [], []]);\r\n                await borderJsonRequester.getPrecinctBorder(district.name).then(res => {\r\n                    setPrecinctBorders(res);\r\n                });\r\n                setSelectedCd(district);\r\n                setLoading(false);\r\n            },\r\n            mouseover: () => {\r\n                layer.setStyle({\r\n                    weight: 3\r\n                });\r\n            },\r\n            mouseout: () => {\r\n                layer.setStyle({\r\n                    weight: 1\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function onEachPrecinctFeature(precinct, layer) {\r\n        precinct.errors.forEach((item, index) => {\r\n            item.precinct = precinct;\r\n            if (item.category)\r\n                errors[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\r\n        });\r\n\r\n        precinct.histories.forEach((item, index) => {\r\n            item.precinct = precinct;\r\n            if (item.category)\r\n                history[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <StateContext.Provider value={selectedState}>\r\n                <DistrictContext.Provider value={selectedCd}>\r\n                    <HistoryContext.Provider value={[history, handleAddHistory]}>\r\n                        <RerenderContext.Provider value={[rerender, setRerender]}>\r\n                            <LeftPanel\r\n                                errors={errors}\r\n                                history={history}\r\n                                handleZoomInPrecinct={handleZoomInPrecinct}\r\n                                handleResolvedError={handleResolvedError}\r\n                                handleAddComment={handleAddComment}\r\n                                handleOpenCommentTab={handleOpenCommentTab}\r\n                            />\r\n                            <Layout>\r\n                                <Layout.Header>\r\n                                    <HeaderPanel\r\n                                        selectedPrecinct={selectedPrecinct}\r\n                                        zoomLevel={zoomLevel}\r\n                                        handleStateChangeDropdown={handleStateChangeDropdown}\r\n                                        combiningPrecinct={combiningPrecinct}\r\n                                        handleCombinePrecinct={handleCombinePrecinct}\r\n                                        addingNeighbor={addingNeighbor}\r\n                                        removingNeighbor={removingNeighbor}\r\n                                        handleAddNeighbor={handleAddNeighbor}\r\n                                        handleRemoveNeighbor={handleRemoveNeighbor}\r\n                                        handleConfirmGhostPrecinct={handleConfirmGhostPrecinct}\r\n                                        handleEditPrecinctLayer={handleEditPrecinctLayer}\r\n                                        drawController={drawController}\r\n                                        handleClickedCancel={handleClickedCancel}\r\n                                        handleDrawSave={handleDrawSave}\r\n                                        handleDrawUndo={handleDrawUndo}\r\n                                    />\r\n                                </Layout.Header>\r\n                                <Spin spinning={loading} size=\"large\">\r\n                                    <Layout.Content>\r\n                                        <Map\r\n                                            ref={(ref) => { setMapRef(ref); }}\r\n                                            center={Constants.MAP_CENTER}\r\n                                            zoom={4}\r\n                                            zoomControl={false}\r\n                                            animate={true}\r\n                                            onZoomEnd={handleZoomChange}\r\n                                            preferCanvas={true}\r\n                                        >\r\n                                            <TileLayer\r\n                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                                url=\"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiaGFubGl1IiwiYSI6ImNrNnk3YTZpMzBlcjczZW15cmU1Mm5hMWkifQ.dW0oDKWDng4w-osIkRvLsQ\"\r\n                                            />\r\n                                            <ZoomControl position='bottomright' />\r\n                                            <Control position=\"bottomleft\" >\r\n                                                <Card>\r\n                                                    <Checkbox\r\n                                                        defaultChecked={true}\r\n                                                        onChange={handleShowDistricts}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedState}\r\n                                                    >\r\n                                                        Show Districts\r\n                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox\r\n                                                        defaultChecked={true}\r\n                                                        onChange={handleShowPrecincts}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd}\r\n                                                    >\r\n                                                        Show Precincts\r\n                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox onChange={handleShowNp}>\r\n                                                        Show National Parks &nbsp;\r\n                                        <img src=\"images/NpIcon.png\" alt=\"National Park Icon\" className=\"icon\" />\r\n                                                    </Checkbox>\r\n                                                </Card>\r\n                                            </Control>\r\n\r\n                                            {stateBorders &&\r\n                                                stateBorders.map((stateBorder, index) => {\r\n                                                    if (selectedState\r\n                                                        && stateBorder.name === selectedState.name\r\n                                                        && zoomLevel >= Constants.DP_ZOOM_LEVEL\r\n                                                        && (showDistricts || (showPrecincts && selectedCd))\r\n                                                    ) {\r\n                                                        return (\r\n                                                            <React.Fragment key={\"F\" + index}>\r\n                                                                {showDistricts && <GeoJSON\r\n                                                                    key={\"CD\" + index}\r\n                                                                    data={cdBorders[Constants.STATES.indexOf(selectedState.name)]}\r\n                                                                    style={layerStyler.geoJSONCdStyle}\r\n                                                                    onEachFeature={onEachCdFeature}\r\n                                                                />\r\n                                                                }\r\n                                                                {(showPrecincts && precinctBorders) && <GeoJSON\r\n                                                                    key={\"P\" + index}\r\n                                                                    ref={(ref) => { setPrecinctsRef(ref); }}\r\n                                                                    data={precinctBorders}\r\n                                                                    style={(feature) => layerStyler.geoJSONPrecinctStyle(feature, selectedPrecinct)}\r\n                                                                    onEachFeature={onEachPrecinctFeature}\r\n                                                                    onClick={handlePrecinctLayerOnClick}\r\n                                                                    onMouseOver={handlePrecinctLayerMouseOver}\r\n                                                                    onMouseOut={() => clearTimeout(delayHandler)}\r\n                                                                />\r\n                                                                }\r\n                                                            </React.Fragment>\r\n                                                        );\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <GeoJSON\r\n                                                                key={\"S\" + index}\r\n                                                                ref={stateLayerRefs.current[index]}\r\n                                                                data={stateBorder}\r\n                                                                style={layerStyler.geoJSONStateStyle}\r\n                                                                onEachFeature={onEachStateFeature}\r\n                                                            />\r\n                                                        );\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                            {(npBorders && showNp) && (\r\n                                                <React.Fragment>\r\n                                                    <GeoJSON\r\n                                                        data={npBorders}\r\n                                                        style={(feature) => layerStyler.geoJSONNpStyle(feature)}\r\n                                                    />\r\n                                    )}\r\n                                                    {npMarkers.map((feature, index) =>\r\n                                                        <Marker\r\n                                                            key={`marker-${index}`}\r\n                                                            position={feature.geometry.coordinates}\r\n                                                            icon={NpMarker}\r\n                                                        >\r\n                                                            <Popup>\r\n                                                                <span>Name: {feature.properties.name}</span>\r\n                                                            </Popup>\r\n                                                        </Marker>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            )}\r\n                                        </Map>\r\n                                    </Layout.Content>\r\n                                </Spin>\r\n                            </Layout>\r\n                            <RightPanel selectedPrecinct={selectedPrecinct} selectedCd={selectedCd} />\r\n                            <CommentTab\r\n                                showCommentTab={showCommentTab}\r\n                                handleCloseCommentTab={handleCloseCommentTab}\r\n                                selectedHistory={selectedHistory}\r\n                            />\r\n                        </RerenderContext.Provider>\r\n                    </HistoryContext.Provider>\r\n                </DistrictContext.Provider>\r\n            </StateContext.Provider>\r\n        </Layout>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}