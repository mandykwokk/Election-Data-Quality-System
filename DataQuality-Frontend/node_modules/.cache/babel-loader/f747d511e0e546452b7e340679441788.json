{"ast":null,"code":"import Axios from 'axios';\nimport * as Constants from 'constants/constants';\nexport default class BorderJsonRequester {\n  async getStateBorders() {\n    let res = await Axios.get(`state`);\n    res.data.forEach(d => {\n      d.type = \"Feature\";\n      d.geometry = JSON.parse(d.geometry);\n    });\n    return res.data;\n  }\n\n  async getCdBorders() {\n    try {\n      const axioRequests = Constants.STATES.map(state => {\n        return Axios.get(`/district/${state}`);\n      });\n      let res = await Axios.all(axioRequests);\n      res = res.map(data => {\n        data.data.forEach(d => {\n          d.type = \"Feature\";\n          d.geometry = JSON.parse(d.geometry);\n        });\n        return data.data;\n      });\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getPrecinctBorder(district) {\n    try {\n      const res = await Axios.get(`/precinct/${district}`);\n      res.data.forEach(d => {\n        d.type = \"Feature\";\n        d.geometry = JSON.parse(d.geometry);\n        d.originalGeometry = JSON.parse(d.originalGeometry);\n        d.histories.forEach(history => {\n          history.comments = history.comments.reverse();\n        });\n      });\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getNpBorders() {\n    const res = await Axios.get('/data/np/np.geojson', {\n      baseURL: \"\"\n    });\n    return res.data;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/requesters/BorderJsonRequester.js"],"names":["Axios","Constants","BorderJsonRequester","getStateBorders","res","get","data","forEach","d","type","geometry","JSON","parse","getCdBorders","axioRequests","STATES","map","state","all","error","console","log","getPrecinctBorder","district","originalGeometry","histories","history","comments","reverse","getNpBorders","baseURL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AACrC,QAAMC,eAAN,GAAwB;AACpB,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,OAAX,CAAhB;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,IAAF,GAAS,SAAT;AACAD,MAAAA,CAAC,CAACE,QAAF,GAAaC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,QAAb,CAAb;AACH,KAHD;AAIA,WAAON,GAAG,CAACE,IAAX;AACH;;AAED,QAAMO,YAAN,GAAqB;AAEjB,QAAI;AACA,YAAMC,YAAY,GAAGb,SAAS,CAACc,MAAV,CAAiBC,GAAjB,CAAqBC,KAAK,IAAI;AAC/C,eAAOjB,KAAK,CAACK,GAAN,CAAW,aAAYY,KAAM,EAA7B,CAAP;AACH,OAFoB,CAArB;AAGA,UAAIb,GAAG,GAAG,MAAMJ,KAAK,CAACkB,GAAN,CAAUJ,YAAV,CAAhB;AACAV,MAAAA,GAAG,GAAGA,GAAG,CAACY,GAAJ,CAAQV,IAAI,IAAI;AAClBA,QAAAA,IAAI,CAACA,IAAL,CAAUC,OAAV,CAAkBC,CAAC,IAAI;AACnBA,UAAAA,CAAC,CAACC,IAAF,GAAS,SAAT;AACAD,UAAAA,CAAC,CAACE,QAAF,GAAaC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,QAAb,CAAb;AACH,SAHD;AAIA,eAAOJ,IAAI,CAACA,IAAZ;AACH,OANK,CAAN;AAOA,aAAOF,GAAP;AACH,KAbD,CAaE,OAAOe,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAEJ;;AAED,QAAMG,iBAAN,CAAwBC,QAAxB,EAAkC;AAC9B,QAAI;AACA,YAAMnB,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAW,aAAYkB,QAAS,EAAhC,CAAlB;AACAnB,MAAAA,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAkBC,CAAD,IAAO;AACpBA,QAAAA,CAAC,CAACC,IAAF,GAAS,SAAT;AACAD,QAAAA,CAAC,CAACE,QAAF,GAAaC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,QAAb,CAAb;AACAF,QAAAA,CAAC,CAACgB,gBAAF,GAAqBb,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACgB,gBAAb,CAArB;AACAhB,QAAAA,CAAC,CAACiB,SAAF,CAAYlB,OAAZ,CAAoBmB,OAAO,IAAI;AAC3BA,UAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,CAAiBC,OAAjB,EAAnB;AACH,SAFD;AAGH,OAPD;AAQA,aAAOxB,GAAG,CAACE,IAAX;AACH,KAXD,CAWE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AAED,QAAMU,YAAN,GAAqB;AACjB,UAAMzB,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,qBAAV,EAAiC;AAAEyB,MAAAA,OAAO,EAAE;AAAX,KAAjC,CAAlB;AACA,WAAO1B,GAAG,CAACE,IAAX;AACH;;AAnDoC","sourcesContent":["import Axios from 'axios';\r\nimport * as Constants from 'constants/constants';\r\n\r\nexport default class BorderJsonRequester {\r\n    async getStateBorders() {\r\n        let res = await Axios.get(`state`);\r\n        res.data.forEach(d => {\r\n            d.type = \"Feature\";\r\n            d.geometry = JSON.parse(d.geometry);\r\n        });\r\n        return res.data;\r\n    }\r\n\r\n    async getCdBorders() {\r\n\r\n        try {\r\n            const axioRequests = Constants.STATES.map(state => {\r\n                return Axios.get(`/district/${state}`);\r\n            });\r\n            let res = await Axios.all(axioRequests);\r\n            res = res.map(data => {\r\n                data.data.forEach(d => {\r\n                    d.type = \"Feature\";\r\n                    d.geometry = JSON.parse(d.geometry);\r\n                })\r\n                return data.data;\r\n            });\r\n            return res;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    async getPrecinctBorder(district) {\r\n        try {\r\n            const res = await Axios.get(`/precinct/${district}`);\r\n            res.data.forEach((d) => {\r\n                d.type = \"Feature\";\r\n                d.geometry = JSON.parse(d.geometry);\r\n                d.originalGeometry = JSON.parse(d.originalGeometry);\r\n                d.histories.forEach(history => {\r\n                    history.comments = history.comments.reverse();\r\n                })\r\n            });\r\n            return res.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getNpBorders() {\r\n        const res = await Axios.get('/data/np/np.geojson', { baseURL: \"\" });\r\n        return res.data;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}