{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\RightPanel\\\\PanelCharts\\\\Election.js\";\nimport React, { useContext, useState } from 'react';\nimport { Divider, Popover, Typography, Table, Button, Menu, Dropdown } from 'antd';\nimport Slider from \"react-slick\";\nimport { Pie } from 'react-chartjs-2';\nimport * as Constants from 'constants/constants';\nimport HistoryContext from 'contexts/HistoryContext';\nimport StateContext from 'contexts/StateContext';\nimport { message } from 'antd';\nimport { DownOutlined, CalendarOutlined } from '@ant-design/icons';\nimport PrecinctRequester from 'requesters/PrecinctRequester';\nconst precinctRequester = new PrecinctRequester();\nconst {\n  Paragraph\n} = Typography;\nexport default function Election(props) {\n  const [history, handleAddHistory] = useContext(HistoryContext);\n  const [rerender, setRerender] = useState(false);\n  const [data, setData] = useState(props.data);\n  const [selectedRegion, setSelectedRegion] = useState(props.name);\n  const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\n  const [region, setregion] = useState(props.region);\n  const selectedState = useContext(StateContext); // if(Constants.STATES.includes(selectedRegion)){\n  //     setData(selectedState.elections);\n  //     setSelectedRegion(selectedState.name);\n  // }\n\n  const columns = [{\n    title: 'Party',\n    dataIndex: 'party',\n    key: 'party'\n  }, {\n    title: 'Votes',\n    dataIndex: 'votes',\n    key: 'votes',\n    render: (votes, record, index) => React.createElement(Paragraph, {\n      editable: {\n        onChange: value => onChange(value, index)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, votes + \"\"),\n    width: 100\n  }, {\n    title: 'Percent',\n    dataIndex: 'percent',\n    key: 'percent'\n  }];\n\n  function getData() {\n    //if(Constants.STATES.includes(selectedRegion.name)){\n    //   setData(selectedState.elections);\n    //  setSelectedRegion(selectedState.name);\n    // }\n    message.info(\"Election: \" + selectedState.name + \"->\" + JSON.stringify(selectedState.elections));\n    let displayData = [];\n    let sum = 0;\n    let index = Constants.ELECTIONS.indexOf(selectedElection);\n\n    for (let i in data) {\n      if (i === Constants.ELECTIONS_ENUM[index]) {\n        displayData.push(data[i][Constants.PARTIES_ENUM[0]]);\n        displayData.push(data[i][Constants.PARTIES_ENUM[1]]);\n        sum += Number(data[i][Constants.PARTIES_ENUM[0]]);\n        sum += Number(data[i][Constants.PARTIES_ENUM[1]]);\n      }\n    }\n\n    displayData = displayData.map((item, index) => {\n      return {\n        key: index,\n        party: Constants.PARTIES[index],\n        votes: item,\n        percent: (item / sum * 100).toFixed(1)\n      };\n    });\n    return displayData;\n  }\n\n  function onChange(value, index) {\n    let elecionIndex = Constants.ELECTIONS.indexOf(selectedElection);\n\n    if (isNaN(value) || value.includes(\".\") || value.includes(\"-\") || value === \"\") {\n      message.warn(\"Please enter a valid number\");\n      return;\n    }\n\n    data[Constants.ELECTIONS_ENUM[elecionIndex]][[Constants.PARTIES_ENUM[index]]] = value;\n\n    if (!isNaN(selectedRegion)) {\n      if (precinctRequester.updatePrecinctElection(Number(selectedRegion), data)) {\n        message.success(\"Precinct \" + selectedRegion + \" election data saved\");\n      }\n    } else if (Constants.STATES.includes(selectedRegion)) {\n      if (precinctRequester.updateStateElection(selectedRegion, data)) {\n        message.success(\"State \" + selectedRegion + \" election data saved\");\n      }\n    } else {\n      if (precinctRequester.updateDistrictElection(selectedRegion, data)) {\n        message.success(\"District \" + selectedRegion + \" election data saved\");\n      }\n    }\n\n    props.data[Constants.ELECTIONS_ENUM[elecionIndex]][[Constants.PARTIES_ENUM[index]]] = value;\n    handleAddHistory({\n      description: `Changed ${selectedRegion}'s ${Constants.ELECTIONS[elecionIndex]} votes to ${value}`\n    }, region);\n    setRerender(!rerender);\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"chartHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Election Data\"), React.createElement(Dropdown, {\n    overlay: React.createElement(Menu, {\n      onClick: ({\n        key\n      }) => setSelectedElection(key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, Constants.ELECTIONS.map(election => {\n      return React.createElement(Menu.Item, {\n        key: election,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(CalendarOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), \" \", election);\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"electionDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\" //icon={<CalendarOutlined />}\n    ,\n    shape: \"round\",\n    style: {\n      borderRadius: '5px',\n      height: '24.5px',\n      lineHeight: '1em',\n      paddingLeft: '10px',\n      paddingRight: '7px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, selectedElection, \" \", React.createElement(DownOutlined, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })))), React.createElement(Popover, {\n    placement: \"topRight\",\n    title: \"Source of Data\",\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Harvard Election Data Archive\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"sourceText\",\n    style: {\n      marginTop: '-23px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"sourceBg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Source of Data\"))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    arrows: false,\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Pie, {\n    data: {\n      labels: Constants.PARTIES,\n      datasets: [{\n        data: getData().map(item => item.votes),\n        backgroundColor: ['#36A2EB', '#FF6384', '#B2EB70', '#FFCE56'],\n        hoverBackgroundColor: ['#36A2EB', '#FF6384', '#B2EB70', '#FFCE56']\n      }]\n    },\n    borderWidth: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), React.createElement(Table, {\n    columns: columns,\n    dataSource: getData(),\n    pagination: false,\n    size: 'small',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/RightPanel/PanelCharts/Election.js"],"names":["React","useContext","useState","Divider","Popover","Typography","Table","Button","Menu","Dropdown","Slider","Pie","Constants","HistoryContext","StateContext","message","DownOutlined","CalendarOutlined","PrecinctRequester","precinctRequester","Paragraph","Election","props","history","handleAddHistory","rerender","setRerender","data","setData","selectedRegion","setSelectedRegion","name","selectedElection","setSelectedElection","ELECTIONS","region","setregion","selectedState","columns","title","dataIndex","key","render","votes","record","index","onChange","value","width","getData","info","JSON","stringify","elections","displayData","sum","indexOf","i","ELECTIONS_ENUM","push","PARTIES_ENUM","Number","map","item","party","PARTIES","percent","toFixed","elecionIndex","isNaN","includes","warn","updatePrecinctElection","success","STATES","updateStateElection","updateDistrictElection","description","election","borderRadius","height","lineHeight","paddingLeft","paddingRight","marginTop","labels","datasets","backgroundColor","hoverBackgroundColor"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { Divider, Popover, Typography, Table ,  Button, Menu, Dropdown} from 'antd';\r\nimport Slider from \"react-slick\";\r\nimport { Pie } from 'react-chartjs-2';\r\nimport * as Constants from 'constants/constants';\r\nimport HistoryContext from 'contexts/HistoryContext';\r\nimport StateContext from 'contexts/StateContext';\r\nimport { message } from 'antd';\r\nimport {DownOutlined, CalendarOutlined} from '@ant-design/icons';\r\nimport PrecinctRequester from 'requesters/PrecinctRequester';\r\nconst precinctRequester = new PrecinctRequester();\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport default function Election(props) {\r\n    const [history, handleAddHistory] = useContext(HistoryContext);\r\n    const [rerender, setRerender] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [selectedRegion, setSelectedRegion] = useState(props.name);\r\n    const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\r\n    const [region, setregion] = useState(props.region);\r\n    const selectedState = useContext(StateContext);\r\n\r\n    // if(Constants.STATES.includes(selectedRegion)){\r\n    //     setData(selectedState.elections);\r\n    //     setSelectedRegion(selectedState.name);\r\n    // }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Party',\r\n            dataIndex: 'party',\r\n            key: 'party'\r\n        },\r\n        {\r\n            title: 'Votes',\r\n            dataIndex: 'votes',\r\n            key: 'votes',\r\n            render: (votes, record, index) => (\r\n                <Paragraph editable={{ onChange: value => onChange(value, index)}}>{votes+\"\"}</Paragraph>\r\n            ),\r\n            width: 100,\r\n        },\r\n        {\r\n            title: 'Percent',\r\n            dataIndex: 'percent',\r\n            key: 'percent',\r\n        }\r\n    ];\r\n\r\n    function getData() {\r\n        //if(Constants.STATES.includes(selectedRegion.name)){\r\n         //   setData(selectedState.elections);\r\n          //  setSelectedRegion(selectedState.name);\r\n       // }\r\n        message.info(\"Election: \"+selectedState.name+\"->\"+JSON.stringify(selectedState.elections));\r\n        let displayData = [];\r\n        let sum = 0;\r\n        let index = Constants.ELECTIONS.indexOf(selectedElection);\r\n        for(let i in data) {\r\n            if(i===Constants.ELECTIONS_ENUM[index]){\r\n                displayData.push(data[i][Constants.PARTIES_ENUM[0]]);\r\n                displayData.push(data[i][Constants.PARTIES_ENUM[1]]);\r\n                sum += Number(data[i][Constants.PARTIES_ENUM[0]]);\r\n                sum += Number(data[i][Constants.PARTIES_ENUM[1]]);\r\n            }\r\n        }\r\n        displayData = displayData.map((item, index) => {\r\n            return {\r\n                key: index,\r\n                party: Constants.PARTIES[index],\r\n                votes: item,\r\n                percent: (item/sum*100).toFixed(1)\r\n            }\r\n        });\r\n        return displayData;\r\n    }\r\n\r\n    function onChange(value, index) {\r\n        let elecionIndex = Constants.ELECTIONS.indexOf(selectedElection);\r\n        if(isNaN(value)||value.includes(\".\")||value.includes(\"-\")||value===\"\"){\r\n            message.warn(\"Please enter a valid number\");\r\n            return;\r\n        }\r\n        data[Constants.ELECTIONS_ENUM[elecionIndex]][[Constants.PARTIES_ENUM[index]]] = value;\r\n        if(!isNaN(selectedRegion)){\r\n            if(precinctRequester.updatePrecinctElection(Number(selectedRegion), data)){\r\n                message.success(\"Precinct \"+selectedRegion+\" election data saved\");\r\n            }\r\n        }\r\n        else if(Constants.STATES.includes(selectedRegion)){\r\n            if(precinctRequester.updateStateElection(selectedRegion, data)){\r\n                message.success(\"State \"+selectedRegion+\" election data saved\");\r\n            }\r\n        }\r\n        else{\r\n            if(precinctRequester.updateDistrictElection(selectedRegion, data)){\r\n                message.success(\"District \"+selectedRegion+\" election data saved\");\r\n            }\r\n        }\r\n        props.data[Constants.ELECTIONS_ENUM[elecionIndex]][[Constants.PARTIES_ENUM[index]]] = value;\r\n        handleAddHistory({description:`Changed ${selectedRegion}'s ${Constants.ELECTIONS[elecionIndex]} votes to ${value}`},region);\r\n        setRerender(!rerender);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <h1 className=\"chartHeader\">Election Data</h1>\r\n            <Dropdown\r\n                overlay={\r\n                    <Menu onClick={({ key }) => setSelectedElection(key)}>\r\n                        {\r\n                            Constants.ELECTIONS.map((election) => {\r\n                                return (\r\n                                    <Menu.Item key={election}>\r\n                                        <CalendarOutlined /> {election}\r\n                                    </Menu.Item>\r\n                                );\r\n                            }\r\n                            )\r\n                        }\r\n                    </Menu>\r\n                }\r\n            >\r\n                <div className=\"electionDiv\">\r\n                    <Button\r\n                        type=\"primary\"\r\n                        //icon={<CalendarOutlined />}\r\n                        shape=\"round\"\r\n                        style={{borderRadius: '5px', height: '24.5px', lineHeight: '1em', paddingLeft: '10px', paddingRight: '7px'}}\r\n                    >\r\n                        {selectedElection} <DownOutlined />\r\n                    </Button>\r\n                </div>\r\n            </Dropdown>\r\n            <Popover\r\n                placement=\"topRight\" \r\n                title={\"Source of Data\"}\r\n                content={<p>Harvard Election Data Archive</p>}\r\n            >\r\n                <p className=\"sourceText\" style={{marginTop: '-23px'}}><span className=\"sourceBg\">Source of Data</span></p>\r\n            </Popover>\r\n            <br />\r\n            <Slider \r\n                arrows={false}\r\n                dots={true}\r\n                infinite={true}\r\n                speed={500}\r\n                slidesToShow={1}\r\n                slidesToScroll={1}\r\n            >\r\n                <Pie \r\n                    data={{\r\n                        labels: Constants.PARTIES,\r\n                        datasets: [{\r\n                            data: getData().map(item => item.votes),\r\n                            backgroundColor: [\r\n                                '#36A2EB',\r\n                                '#FF6384',\r\n                                '#B2EB70',\r\n                                '#FFCE56',\r\n                    \r\n                            ],\r\n                            hoverBackgroundColor: [\r\n                                '#36A2EB',\r\n                                '#FF6384',\r\n                                '#B2EB70',\r\n                                '#FFCE56',\r\n                            ]\r\n                        }]\r\n                    }\r\n                    }\r\n                    borderWidth = {100}\r\n                />\r\n                <Table\r\n                    columns={columns}\r\n                    dataSource={getData()}\r\n                    pagination={false}\r\n                    size={'small'}\r\n                />\r\n            </Slider>\r\n        </React.Fragment>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}