{"ast":null,"code":"import Axios from 'axios';\nimport * as Constants from 'constants/constants';\nimport { message } from 'antd';\nexport default class BorderJsonRequester {\n  async getStateBorders() {\n    message.info(\"getStateBorder\");\n    let res = await Axios.get(`state`);\n    res.data.forEach(d => {\n      d.type = \"Feature\";\n      d.geometry = JSON.parse(d.geometry); //d.elections = \n\n      message.info(JSON.stringify(d.elections));\n      message.info(d.elections.get(\"PRESIDENTIAL_2016\"));\n    });\n    return res.data;\n  }\n\n  async getCdBorders() {\n    try {\n      const axioRequests = Constants.STATES.map(state => {\n        return Axios.get(`/district/${state}`);\n      });\n      let res = await Axios.all(axioRequests);\n      res = res.map(data => {\n        data.data.forEach(d => {\n          d.type = \"Feature\";\n          d.geometry = JSON.parse(d.geometry);\n        });\n        return data.data;\n      });\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getPrecinctBorder(district) {\n    try {\n      const res = await Axios.get(`/precinct/${district}`);\n      res.data.forEach(d => {\n        d.type = \"Feature\";\n        d.geometry = JSON.parse(d.geometry);\n      });\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getNpBorders() {\n    const res = await Axios.get('/data/np/np.geojson', {\n      baseURL: \"\"\n    });\n    return res.data;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/requesters/BorderJsonRequester.js"],"names":["Axios","Constants","message","BorderJsonRequester","getStateBorders","info","res","get","data","forEach","d","type","geometry","JSON","parse","stringify","elections","getCdBorders","axioRequests","STATES","map","state","all","error","console","log","getPrecinctBorder","district","getNpBorders","baseURL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AACrC,QAAMC,eAAN,GAAwB;AACpBF,IAAAA,OAAO,CAACG,IAAR,CAAa,gBAAb;AACA,QAAIC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAW,OAAX,CAAhB;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,IAAF,GAAS,SAAT;AACAD,MAAAA,CAAC,CAACE,QAAF,GAAaC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,QAAb,CAAb,CAFkB,CAGlB;;AACAV,MAAAA,OAAO,CAACG,IAAR,CAAaQ,IAAI,CAACE,SAAL,CAAeL,CAAC,CAACM,SAAjB,CAAb;AACAd,MAAAA,OAAO,CAACG,IAAR,CAAaK,CAAC,CAACM,SAAF,CAAYT,GAAZ,CAAgB,mBAAhB,CAAb;AACH,KAND;AAOA,WAAOD,GAAG,CAACE,IAAX;AACH;;AAED,QAAMS,YAAN,GAAqB;AAEjB,QAAI;AACA,YAAMC,YAAY,GAAGjB,SAAS,CAACkB,MAAV,CAAiBC,GAAjB,CAAqBC,KAAK,IAAI;AAC/C,eAAOrB,KAAK,CAACO,GAAN,CAAW,aAAYc,KAAM,EAA7B,CAAP;AACH,OAFoB,CAArB;AAGA,UAAIf,GAAG,GAAG,MAAMN,KAAK,CAACsB,GAAN,CAAUJ,YAAV,CAAhB;AACAZ,MAAAA,GAAG,GAAGA,GAAG,CAACc,GAAJ,CAAQZ,IAAI,IAAI;AAClBA,QAAAA,IAAI,CAACA,IAAL,CAAUC,OAAV,CAAkBC,CAAC,IAAI;AACnBA,UAAAA,CAAC,CAACC,IAAF,GAAS,SAAT;AACAD,UAAAA,CAAC,CAACE,QAAF,GAAaC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,QAAb,CAAb;AACH,SAHD;AAIA,eAAOJ,IAAI,CAACA,IAAZ;AACH,OANK,CAAN;AAOA,aAAOF,GAAP;AACH,KAbD,CAaE,OAAOiB,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAEJ;;AAED,QAAMG,iBAAN,CAAwBC,QAAxB,EAAkC;AAC9B,QAAI;AACA,YAAMrB,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAW,aAAYoB,QAAS,EAAhC,CAAlB;AACArB,MAAAA,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,CAAC,IAAI;AAClBA,QAAAA,CAAC,CAACC,IAAF,GAAS,SAAT;AACAD,QAAAA,CAAC,CAACE,QAAF,GAAaC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACE,QAAb,CAAb;AACH,OAHD;AAIA,aAAON,GAAG,CAACE,IAAX;AACH,KAPD,CAOE,OAAOe,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AAED,QAAMK,YAAN,GAAqB;AACjB,UAAMtB,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,qBAAV,EAAiC;AAAEsB,MAAAA,OAAO,EAAE;AAAX,KAAjC,CAAlB;AACA,WAAOvB,GAAG,CAACE,IAAX;AACH;;AAnDoC","sourcesContent":["import Axios from 'axios';\r\nimport * as Constants from 'constants/constants';\r\nimport { message } from 'antd';\r\n\r\nexport default class BorderJsonRequester {\r\n    async getStateBorders() {\r\n        message.info(\"getStateBorder\")\r\n        let res = await Axios.get(`state`);\r\n        res.data.forEach(d => {\r\n            d.type = \"Feature\";\r\n            d.geometry = JSON.parse(d.geometry);\r\n            //d.elections = \r\n            message.info(JSON.stringify(d.elections));\r\n            message.info(d.elections.get(\"PRESIDENTIAL_2016\"))\r\n        });\r\n        return res.data;\r\n    }\r\n\r\n    async getCdBorders() {\r\n\r\n        try {\r\n            const axioRequests = Constants.STATES.map(state => {\r\n                return Axios.get(`/district/${state}`);\r\n            });\r\n            let res = await Axios.all(axioRequests);\r\n            res = res.map(data => {\r\n                data.data.forEach(d => {\r\n                    d.type = \"Feature\";\r\n                    d.geometry = JSON.parse(d.geometry);\r\n                })\r\n                return data.data\r\n            });\r\n            return res;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    async getPrecinctBorder(district) {\r\n        try {\r\n            const res = await Axios.get(`/precinct/${district}`);\r\n            res.data.forEach(d => {\r\n                d.type = \"Feature\";\r\n                d.geometry = JSON.parse(d.geometry);\r\n            });\r\n            return res.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getNpBorders() {\r\n        const res = await Axios.get('/data/np/np.geojson', { baseURL: \"\" });\r\n        return res.data;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}