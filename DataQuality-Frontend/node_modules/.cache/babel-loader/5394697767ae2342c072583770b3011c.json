{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\RightPanel\\\\PanelCharts\\\\Demographic.js\";\nimport React, { useState, useContext } from 'react';\nimport { Table, Popover, Divider, Typography, Button, InputNumber, message } from 'antd';\nimport { SaveOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport HistoryContext from 'contexts/HistoryContext';\nimport * as Constants from 'constants/constants';\nimport PrecinctRequester from 'requesters/PrecinctRequester';\nimport StateContext from 'contexts/StateContext';\nimport DistrictContext from 'contexts/DistrictContext';\nconst {\n  Paragraph\n} = Typography;\nconst {\n  Text\n} = Typography;\nconst precinctRequester = new PrecinctRequester();\nexport default function Demographic(props) {\n  const [history, handleAddHistory] = useContext(HistoryContext);\n  const selectedCd = useContext(DistrictContext);\n  const selectedState = useContext(StateContext);\n  const [editing, setEditing] = useState(false);\n  const [data, setData] = useState(props.data);\n  const [originalData, setOriginalData] = useState(null);\n  const columns = [{\n    title: 'Race',\n    dataIndex: 'race',\n    key: 'race'\n  }, {\n    title: 'Population',\n    dataIndex: 'population',\n    key: 'population',\n    render: (population, record, index) => editing ? React.createElement(InputNumber, {\n      defaultValue: population,\n      formatter: value => value.toLocaleString(),\n      parser: value => value.replace(',', ''),\n      onChange: value => onChange(value, index),\n      min: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }) : React.createElement(Paragraph, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, population.toLocaleString() + \"\"),\n    width: 100\n  }, {\n    title: 'Percent',\n    dataIndex: 'percent',\n    key: 'percent'\n  }];\n\n  function getData() {\n    let displayData = [];\n    let sum = 0;\n\n    for (let i in data) {\n      message.info(data[i]);\n      displayData.push(data[i]);\n      sum += data[i];\n    }\n\n    displayData = displayData.map((item, index) => {\n      return {\n        key: index,\n        race: Constants.RACE_GROUPS[index],\n        population: item,\n        percent: (item / sum * 100).toFixed(1) + \"%\"\n      };\n    });\n    return displayData;\n  }\n\n  function getSum() {\n    let sum = 0;\n\n    for (let i in data) {\n      sum += data[i];\n    }\n\n    return sum;\n  }\n\n  function onChange(value, index) {\n    value = Number(value);\n    data[Constants.RACE_ENUM[index]] = value;\n  }\n\n  function handleEdit() {\n    setOriginalData(JSON.parse(JSON.stringify(data)));\n    setEditing(true);\n  }\n\n  function handleSave() {\n    setEditing(false);\n\n    if (precinctRequester.updateDemographic(props.precinct.id, data)) {\n      message.success(\"Sucessfully saved.\");\n      Object.entries(selectedCd.demographic).forEach(([key, value]) => {\n        selectedCd.demographic[key] = value + data[key] - originalData[key];\n      });\n      Object.entries(selectedState.demographic).forEach(([key, value]) => {\n        selectedState.demographic[key] = value + data[key] - originalData[key];\n      }); // handleAddHistory({description: `Changed`}, props.precinct);\n    } else {\n      message.error(\"Failed to save.\");\n    }\n  }\n\n  function handleCancel() {\n    setData(originalData);\n    setEditing(false);\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"chartHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Demographic Data\"), React.createElement(\"div\", {\n    className: \"spacebtw\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, props.editable ? editing ? React.createElement(\"div\", {\n    className: \"inlineblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"saveDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Button, {\n    title: \"Save\",\n    type: \"primary\",\n    shape: \"round\",\n    icon: React.createElement(SaveOutlined, {\n      style: {\n        fontSize: '16px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }),\n    onClick: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"deleteDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Button, {\n    title: \"Cancel\",\n    type: \"primary\",\n    shape: \"round\",\n    icon: React.createElement(DeleteOutlined, {\n      style: {\n        fontSize: '16px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }),\n    onClick: handleCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    className: \"undoDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(Button, {\n    title: \"Edit\",\n    type: \"primary\",\n    shape: \"round\",\n    icon: React.createElement(EditOutlined, {\n      style: {\n        fontSize: '16px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }),\n    onClick: handleEdit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(Popover, {\n    placement: \"topRight\",\n    title: \"Source of Data\",\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"US Census 2010\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"sourceText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"sourceBg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Source of Data\")))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(Table, {\n    columns: columns,\n    dataSource: getData(),\n    pagination: false,\n    size: 'small',\n    summary: () => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Total\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Text, {\n        type: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, getSum().toLocaleString())));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/RightPanel/PanelCharts/Demographic.js"],"names":["React","useState","useContext","Table","Popover","Divider","Typography","Button","InputNumber","message","SaveOutlined","EditOutlined","DeleteOutlined","HistoryContext","Constants","PrecinctRequester","StateContext","DistrictContext","Paragraph","Text","precinctRequester","Demographic","props","history","handleAddHistory","selectedCd","selectedState","editing","setEditing","data","setData","originalData","setOriginalData","columns","title","dataIndex","key","render","population","record","index","value","toLocaleString","replace","onChange","width","getData","displayData","sum","i","info","push","map","item","race","RACE_GROUPS","percent","toFixed","getSum","Number","RACE_ENUM","handleEdit","JSON","parse","stringify","handleSave","updateDemographic","precinct","id","success","Object","entries","demographic","forEach","error","handleCancel","editable","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\r\nimport { Table, Popover, Divider, Typography, Button, InputNumber, message } from 'antd';\r\nimport { SaveOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport HistoryContext from 'contexts/HistoryContext';\r\nimport * as Constants from 'constants/constants';\r\nimport PrecinctRequester from 'requesters/PrecinctRequester';\r\nimport StateContext from 'contexts/StateContext';\r\nimport DistrictContext from 'contexts/DistrictContext';\r\n\r\nconst { Paragraph } = Typography;\r\nconst { Text } = Typography;\r\nconst precinctRequester = new PrecinctRequester();\r\n\r\nexport default function Demographic(props) {\r\n    const [history, handleAddHistory] = useContext(HistoryContext);\r\n    const selectedCd = useContext(DistrictContext);\r\n    const selectedState = useContext(StateContext);\r\n    const [editing, setEditing] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [originalData, setOriginalData] = useState(null);\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Race',\r\n            dataIndex: 'race',\r\n            key: 'race'\r\n        },\r\n        {\r\n            title: 'Population',\r\n            dataIndex: 'population',\r\n            key: 'population',\r\n            render: (population, record, index) => (\r\n                editing\r\n                    ? <InputNumber \r\n                        defaultValue={population}\r\n                        formatter={value => value.toLocaleString()}\r\n                        parser={value => value.replace(',', '')}\r\n                        onChange={value => onChange(value, index)}\r\n                        min={0} \r\n                    />\r\n                    : <Paragraph>{population.toLocaleString()+\"\"}</Paragraph>\r\n\r\n            ),\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Percent',\r\n            dataIndex: 'percent',\r\n            key: 'percent',\r\n        }\r\n    ];\r\n\r\n\r\n    function getData() {\r\n        let displayData = [];\r\n        let sum = 0;\r\n        for(let i in data) {\r\n            message.info(data[i]);\r\n            displayData.push(data[i]);\r\n            sum += data[i];\r\n        }\r\n        displayData = displayData.map((item, index) => {\r\n            return {\r\n                key: index,\r\n                race: Constants.RACE_GROUPS[index],\r\n                population: item,\r\n                percent: (item/sum*100).toFixed(1) + \"%\"\r\n            }\r\n        });\r\n        return displayData;\r\n    }\r\n\r\n    function getSum() {\r\n        let sum = 0;\r\n        for(let i in data) {\r\n            sum += data[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function onChange(value, index) {\r\n        value = Number(value);\r\n        data[Constants.RACE_ENUM[index]] = value;\r\n    }\r\n\r\n    function handleEdit() {\r\n        setOriginalData(JSON.parse(JSON.stringify(data)));\r\n        setEditing(true);\r\n    }\r\n\r\n    function handleSave() {\r\n        setEditing(false);\r\n        if (precinctRequester.updateDemographic(props.precinct.id, data)) {\r\n            message.success(\"Sucessfully saved.\");\r\n\r\n            Object.entries(selectedCd.demographic).forEach(([key, value]) => {\r\n                selectedCd.demographic[key] = value + data[key] - originalData[key];\r\n            });\r\n            Object.entries(selectedState.demographic).forEach(([key, value]) => {\r\n                selectedState.demographic[key] = value + data[key] - originalData[key];\r\n            });\r\n            // handleAddHistory({description: `Changed`}, props.precinct);\r\n        }\r\n        else {\r\n            message.error(\"Failed to save.\");\r\n        }\r\n    }\r\n\r\n    function handleCancel() {\r\n        setData(originalData);\r\n        setEditing(false);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <h1 className=\"chartHeader\">Demographic Data</h1>\r\n            <div className=\"spacebtw\">\r\n                {\r\n                    props.editable\r\n                    ? \r\n                        editing\r\n                        ?\r\n                        <div className=\"inlineblock\">\r\n                            <div className=\"saveDiv\">\r\n                                <Button\r\n                                    title=\"Save\"\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<SaveOutlined style={{fontSize: '16px'}}/>}\r\n                                    onClick={handleSave}\r\n                                />\r\n                            </div>\r\n                            <div className=\"deleteDiv\">\r\n                                <Button\r\n                                    title=\"Cancel\"\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<DeleteOutlined style={{fontSize: '16px'}}/>}\r\n                                    onClick={handleCancel}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    :\r\n                        <div className=\"undoDiv\">\r\n                            <Button\r\n                                title=\"Edit\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={<EditOutlined style={{fontSize: '16px'}}/>}\r\n                                onClick={handleEdit}\r\n                            />\r\n                        </div>\r\n                    :\r\n                    <p />\r\n                }\r\n                <Popover\r\n                    placement=\"topRight\" \r\n                    title={\"Source of Data\"}\r\n                    content={<p>US Census 2010</p>}\r\n                >\r\n                        <p className=\"sourceText\"><span className=\"sourceBg\">Source of Data</span></p>\r\n                </Popover>\r\n            </div>\r\n            <br />\r\n\r\n            <Table\r\n                columns={columns}\r\n                dataSource={getData()}\r\n                pagination={false}\r\n                size={'small'}\r\n\r\n                summary={() => {\r\n                    return (\r\n                        <tr>\r\n                            <th>Total</th>\r\n                            <td>\r\n                                <Text type=\"danger\">{getSum().toLocaleString()}</Text>\r\n                            </td>\r\n                        </tr>\r\n                    );\r\n                }}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}