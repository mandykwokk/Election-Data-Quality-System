{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\MapScreen.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Map, TileLayer, LayersControl, ZoomControl, GeoJSON, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet-draw';\nimport Control from 'react-leaflet-control';\nimport * as Turf from '@turf/turf';\nimport { Layout, Checkbox, Card, Spin, message } from 'antd';\nimport BorderJsonRequester from 'requesters/BorderJsonRequester';\nimport HistoryRequester from 'requesters/HistoryRequester';\nimport ErrorRequester from 'requesters/ErrorRequester';\nimport LayerStyler from 'utils/LayerStyler';\nimport * as Constants from 'constants/constants';\nimport StateContext from 'contexts/StateContext';\nimport DistrictContext from 'contexts/DistrictContext';\nimport HistoryContext from 'contexts/HistoryContext';\nimport RerenderContext from 'contexts/RerenderContext';\nimport LeftPanel from './LeftPanel/LeftPanel';\nimport RightPanel from './RightPanel/RightPanel';\nimport CommentTab from './RightPanel/CommentTab';\nimport HeaderPanel from './HeaderPanel/HeaderPanel';\nimport moment from 'moment';\nimport PrecinctRequester from 'requesters/PrecinctRequester';\nconst borderJsonRequester = new BorderJsonRequester();\nconst historyRequester = new HistoryRequester();\nconst errorRequester = new ErrorRequester();\nconst layerStyler = new LayerStyler();\nconst precinctRequester = new PrecinctRequester();\nmessage.config({\n  top: 60,\n  duration: 3\n});\nconst NpMarker = new L.Icon({\n  iconUrl: 'images/NpMarker.png',\n  iconSize: [48, 48]\n});\nexport default function MapScreen() {\n  const [mapRef, setMapRef] = useState(null);\n  const [zoomLevel, setZoomLevel] = useState(4);\n  const [showDistricts, setShowDistricts] = useState(true);\n  const [showPrecincts, setShowPrecincts] = useState(true);\n  const [showNp, setShowNp] = useState(false);\n  const [showCommentTab, setShowCommentTab] = useState(false);\n  const [selectedState, setSelectedState] = useState(null);\n  const [selectedCd, setSelectedCd] = useState(null);\n  const [selectedPrecinct, setSelectedPrecinct] = useState(null);\n  const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\n  const [selectedHistory, setSelectedHistory] = useState(null);\n  const [stateBorders, setStateBorders] = useState(null);\n  const stateLayerRefs = useRef([React.createRef(), React.createRef(), React.createRef()]);\n  const [cdBorders, setCdBorders] = useState(null);\n  const [precinctBorders, setPrecinctBorders] = useState(null);\n  const [precinctsRef, setPrecinctsRef] = useState(null);\n  const [npBorders, setNpBorders] = useState(null);\n  const [npMarkers] = useState([]);\n  const [ghostMarkers, setGhostMarkers] = useState([]);\n  const [history, setHistory] = useState([[], [], [], [], [], []]);\n  const [errors, setErrors] = useState([[], [], [], [], [], []]);\n  const [delayHandler, setDelayHandler] = useState(null);\n  const [addingNeighbor, setAddingNeighbor] = useState(false);\n  const [combiningPrecinct, setCombiningPrecinct] = useState(false);\n  const [rerender, setRerender] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [drawController, setDrawController] = useState(null);\n  useEffect(() => {\n    (async () => {\n      setStateBorders((await borderJsonRequester.getStateBorders()));\n      setCdBorders((await borderJsonRequester.getCdBorders()));\n      const npBorders = await borderJsonRequester.getNpBorders();\n      setNpBorders(npBorders);\n      npBorders.features.forEach(feature => {\n        const center = Turf.centroid(Turf.feature(feature.geometry));\n        center.geometry.coordinates = center.geometry.coordinates.reverse();\n        center.properties.name = feature.properties.UNIT_NAME;\n        npMarkers.push(center);\n      });\n    })();\n  }, [npMarkers]);\n\n  function calculateFeatureCenter(feature) {\n    return Turf.centroid(Turf.feature(feature.geometry));\n  }\n\n  function handleStateChangeDropdown(stateName) {\n    handleStateChange(stateBorders[Constants.STATES.indexOf(stateName)], null);\n  }\n\n  async function handleStateChange(state, layer) {\n    if (selectedState && state.name === selectedState.name) return;\n    if (!layer) mapRef.leafletElement.fitBounds(stateLayerRefs.current[Constants.STATES.indexOf(state.name)].current.leafletElement.getBounds());else mapRef.leafletElement.fitBounds(layer.getBounds());\n    setSelectedState(null);\n    setSelectedState(state);\n    setSelectedCd(null);\n    setSelectedPrecinct(null);\n    setPrecinctBorders(null);\n    setHistory([[], [], [], [], [], []]);\n    setErrors([[], [], [], [], [], []]);\n  }\n\n  function handlePrecinctChange(layer) {\n    setSelectedPrecinct(null);\n    setSelectedPrecinct(layer.feature);\n  } // function Order(targetId, toAdd){\n  //     this.targetPrecinctId=targetId;\n  //     this.toAdd=toAdd;\n  //     this.getTargetPrecinctId=function(){\n  //         return this.targetPrecinctId;\n  //     };\n  //     this.getToAdd=function(){\n  //         return this.toAdd;\n  //     };\n  // };\n\n\n  function handlePrecinctLayerOnClick(e) {\n    if (addingNeighbor) {\n      //remove?\n      // var order = new Order(e.layer.feature.id, addingNeighbor);\n      if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, addingNeighbor)) {\n        //if (precinctRequester.updateNeighbor(selectedPrecinct.id, order)) {\n        selectedPrecinct.neighbors.push(e.layer.feature.id);\n        e.layer.feature.neighbors.push(selectedPrecinct.id);\n        setAddingNeighbor(false);\n        handleAddHistory({\n          description: `Added ${e.layer.feature.id} to ${selectedPrecinct.id}'s neighbor`\n        }, selectedPrecinct);\n        handleAddHistory({\n          description: `Added ${selectedPrecinct.id} to ${e.layer.feature.id}'s neighbor`\n        }, e.layer.feature.id);\n        message.success('Successfully added neighbor.');\n      }\n    } else if (combiningPrecinct) {\n      if (!selectedPrecinct.properties.neighbors.includes(e.layer.feature.id)) {\n        message.error('Please select a neighbor precinct to combine.');\n        return;\n      }\n\n      const clickedPrecinct = e.layer.feature;\n      const newFeature = Turf.union(Turf.feature(selectedPrecinct.geometry), Turf.feature(clickedPrecinct.geometry));\n      newFeature.properties = {\n        NAME10: selectedPrecinct.id,\n        CONGRESSIO: selectedPrecinct.properties.CONGRESSIO,\n        neighbors: selectedPrecinct.properties.neighbors.concat(clickedPrecinct.properties.neighbors).filter(item => {\n          return item !== selectedPrecinct.id && item !== clickedPrecinct.id;\n        }),\n        comments: selectedPrecinct.properties.comments.concat(clickedPrecinct.properties.comments),\n        demographic: selectedPrecinct.properties.demographic.map((item, index) => {\n          return item + clickedPrecinct.properties.demographic[index];\n        }),\n        election: selectedPrecinct.properties.election.map((item, index) => {\n          return item + clickedPrecinct.properties.election[index];\n        }),\n        isGhost: false\n      };\n      precinctBorders.features = precinctBorders.features.filter(item => {\n        return item.id !== selectedPrecinct.id && item.id !== clickedPrecinct.id;\n      });\n      precinctBorders.features.push(newFeature);\n      precinctsRef.leafletElement.clearLayers();\n      precinctsRef.leafletElement.addData(precinctBorders);\n      setSelectedPrecinct(null);\n      setSelectedPrecinct(newFeature);\n      handleAddHistory(`Combined precincts ${selectedPrecinct.id} with ${clickedPrecinct.id}`);\n      message.success('Successfully combined precincts.');\n      setCombiningPrecinct(false);\n    } else if (selectedPrecinct && selectedPrecinct.id === e.layer.feature.id) {\n      setSelectedPrecinct(null);\n    } else {\n      handlePrecinctChange(e.layer);\n    }\n  }\n\n  function handlePrecinctLayerMouseOver(e) {\n    if (addingNeighbor || combiningPrecinct || drawController) {\n      return;\n    }\n\n    setDelayHandler(setTimeout(() => {\n      handlePrecinctChange(e.layer);\n    }, 500));\n  }\n\n  function handleZoomChange() {\n    setZoomLevel(mapRef.viewport.zoom);\n  }\n\n  function handleShowPrecincts(e) {\n    setShowPrecincts(e.target.checked);\n  }\n\n  function handleShowDistricts(e) {\n    setShowDistricts(e.target.checked);\n  }\n\n  function handleShowNp(e) {\n    setShowNp(e.target.checked);\n  }\n\n  function handleCombinePrecinct() {\n    setCombiningPrecinct(true);\n    message.info('Please click on a neighbor precinct to combine.');\n  }\n\n  function handleConfirmGhostPrecinct() {\n    selectedPrecinct.name = selectedPrecinct.name.substring(selectedPrecinct.name.indexOf(\" \") + 1);\n\n    if (precinctRequester.updateGhostPrecinct(selectedPrecinct.id)) {\n      setRerender(!rerender);\n      handleAddHistory({\n        description: `Confirmed precinct ${selectedPrecinct.id} is a Ghost Precinct.`\n      }, selectedPrecinct);\n      message.success('Action Completed');\n    } else {\n      message.error('Action Failed');\n    }\n  }\n\n  function handleEditPrecinctLayer() {\n    const featureGroup = L.featureGroup([new L.polygon(selectedPrecinct.geometry.coordinates[0].map(positions => [positions[1], positions[0]]))]);\n    mapRef.leafletElement.addLayer(featureGroup);\n    const drawController = new L.EditToolbar.Edit(mapRef.leafletElement, {\n      featureGroup: featureGroup\n    });\n    setDrawController(drawController);\n    mapRef.leafletElement.removeEventListener('draw:edited');\n    mapRef.leafletElement.addEventListener('draw:edited', function (e) {\n      const layersKey = Object.keys(e.layers._layers);\n      if (layersKey.length === 0) return;\n      const layer = e.layers._layers[layersKey[0]];\n      const geoJson = {\n        type: \"Polygon\",\n        coordinates: [layer._latlngs[0].map(item => [item.lng, item.lat])]\n      };\n      const kinks = Turf.kinks(geoJson);\n\n      if (kinks.features.length) {\n        message.error(\"Self-Intersection Detected, Please Do It Again!\");\n        return;\n      }\n\n      precinctRequester.updateBoundary(selectedPrecinct.id, JSON.stringify(geoJson));\n      selectedPrecinct.geometry = geoJson;\n      precinctsRef.leafletElement.clearLayers();\n      precinctsRef.leafletElement.addData(precinctBorders);\n      message.success(`Successfully edited ${selectedPrecinct.name}'s boundary.`);\n      handleAddHistory({\n        description: `Edited ${selectedPrecinct.name}'s boundary.`\n      }, selectedPrecinct);\n    });\n    mapRef.leafletElement.removeEventListener('draw:editstop');\n    mapRef.leafletElement.addEventListener('draw:editstop', function (e) {\n      mapRef.leafletElement.removeLayer(featureGroup);\n    });\n    drawController.enable();\n  }\n\n  function handleDrawSave() {\n    if (drawController instanceof L.Draw.Polygon) drawController.completeShape();else drawController.save();\n    handleClickedCancel();\n  }\n\n  function handleClickedCancel() {\n    if (addingNeighbor) {\n      setAddingNeighbor(false);\n      message.info('Cancelled adding neighbor.');\n    } else if (combiningPrecinct) {\n      setCombiningPrecinct(false);\n      message.info('Cancelled combining precincts.');\n    } else {\n      drawController.disable();\n      setDrawController(null);\n    }\n  }\n\n  function handleDrawUndo() {\n    if (drawController instanceof L.Draw.Polygon) drawController.deleteLastVertex();else drawController.revertLayers();\n  }\n\n  function handleAddNeighbor() {\n    setAddingNeighbor(true);\n    message.info('Please click on another precinct to add.');\n  }\n\n  async function handleAddHistory(newHistory, precinct, layer = null) {\n    newHistory.timestamp = moment();\n\n    if (await historyRequester.postHistory(newHistory, precinct.id)) {\n      if (newHistory.category) history[Constants.ERROR_ENUM.indexOf(newHistory.category)].push([newHistory, layer]);\n      newHistory.precinct = precinct;\n      precinct.histories.push(newHistory);\n    } else {\n      message.error('Failed to post history.');\n    } // setHistory([newLog, ...history]);\n\n  }\n\n  function handleZoomInPrecinct(feature, layer) {\n    setSelectedPrecinct(feature);\n    mapRef.leafletElement.fitBounds(layer.getBounds());\n  }\n\n  function handleResolvedError(error, index, layer) {\n    const res = errorRequester.ResolveError(error.id);\n\n    if (res) {\n      errors[index] = errors[index].filter(item => {\n        return error.id !== item[0].id;\n      });\n      setRerender(!rerender);\n      const description = \"Resolved error \" + Constants.ERROR_HEADER[Constants.ERROR_ENUM.indexOf(error.category)] + \". Error description: \" + error.description;\n      handleAddHistory({\n        description,\n        category: error.category\n      }, error.precinct, layer);\n      message.success('Successfully resolved the error.');\n    } else {\n      message.error('Failed to resolve.');\n    }\n  }\n\n  function handleOpenCommentTab(history) {\n    setShowCommentTab(true);\n    setSelectedHistory(history);\n  }\n\n  function handleCloseCommentTab() {\n    setShowCommentTab(false);\n    setSelectedHistory(null);\n  }\n\n  function handleAddComment(comment, timestamp) {}\n\n  function onEachStateFeature(state, layer) {\n    state.elections = JSON.parse(JSON.stringify(Constants.FAKE_ELECTION));\n    layer.on({\n      click: async () => {\n        handleStateChange(state, layer);\n      },\n      mouseover: () => {\n        layer.setStyle({\n          weight: 3\n        });\n      },\n      mouseout: () => {\n        layer.setStyle({\n          weight: 1\n        });\n      }\n    });\n  }\n\n  function onEachCdFeature(district, layer) {\n    district.elections = JSON.parse(JSON.stringify(Constants.FAKE_ELECTION));\n    layer.on({\n      click: async () => {\n        setLoading(true);\n        setSelectedCd(null);\n        setPrecinctBorders(null);\n        setSelectedPrecinct(null);\n        setHistory([[], [], [], [], [], []]);\n        setErrors([[], [], [], [], [], []]);\n        await borderJsonRequester.getPrecinctBorder(district.name).then(res => {\n          setPrecinctBorders(res);\n        });\n        setSelectedCd(district);\n        setLoading(false);\n      },\n      mouseover: () => {\n        layer.setStyle({\n          weight: 3\n        });\n      },\n      mouseout: () => {\n        layer.setStyle({\n          weight: 1\n        });\n      }\n    });\n  }\n\n  function onEachPrecinctFeature(precinct, layer) {\n    precinct.elections = JSON.parse(JSON.stringify(Constants.FAKE_ELECTION));\n    precinct.errors.forEach((item, index) => {\n      item.precinct = precinct;\n      if (item.category) errors[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\n    });\n    precinct.histories.forEach((item, index) => {\n      item.precinct = precinct;\n      if (item.category) history[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\n    });\n  }\n\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429\n    },\n    __self: this\n  }, React.createElement(StateContext.Provider, {\n    value: selectedState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    },\n    __self: this\n  }, React.createElement(DistrictContext.Provider, {\n    value: selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431\n    },\n    __self: this\n  }, React.createElement(HistoryContext.Provider, {\n    value: [history, handleAddHistory],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432\n    },\n    __self: this\n  }, React.createElement(RerenderContext.Provider, {\n    value: [rerender, setRerender],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433\n    },\n    __self: this\n  }, React.createElement(LeftPanel, {\n    errors: errors,\n    history: history,\n    handleZoomInPrecinct: handleZoomInPrecinct,\n    handleResolvedError: handleResolvedError,\n    handleAddComment: handleAddComment,\n    handleOpenCommentTab: handleOpenCommentTab,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  }), React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, React.createElement(Layout.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  }, React.createElement(HeaderPanel, {\n    selectedPrecinct: selectedPrecinct,\n    zoomLevel: zoomLevel,\n    handleStateChangeDropdown: handleStateChangeDropdown,\n    combiningPrecinct: combiningPrecinct,\n    handleCombinePrecinct: handleCombinePrecinct,\n    addingNeighbor: addingNeighbor,\n    handleAddNeighbor: handleAddNeighbor,\n    handleConfirmGhostPrecinct: handleConfirmGhostPrecinct,\n    handleEditPrecinctLayer: handleEditPrecinctLayer,\n    drawController: drawController,\n    handleClickedCancel: handleClickedCancel,\n    handleDrawSave: handleDrawSave,\n    handleDrawUndo: handleDrawUndo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444\n    },\n    __self: this\n  })), React.createElement(Spin, {\n    spinning: loading,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460\n    },\n    __self: this\n  }, React.createElement(Layout.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461\n    },\n    __self: this\n  }, React.createElement(Map, {\n    ref: ref => {\n      setMapRef(ref);\n    },\n    center: Constants.MAP_CENTER,\n    zoom: 4,\n    zoomControl: false,\n    animate: true,\n    onZoomEnd: handleZoomChange,\n    preferCanvas: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiaGFubGl1IiwiYSI6ImNrNnk3YTZpMzBlcjczZW15cmU1Mm5hMWkifQ.dW0oDKWDng4w-osIkRvLsQ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471\n    },\n    __self: this\n  }), React.createElement(ZoomControl, {\n    position: \"bottomright\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475\n    },\n    __self: this\n  }), React.createElement(Control, {\n    position: \"bottomleft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    defaultChecked: true,\n    onChange: handleShowDistricts,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, \"Show Districts\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    defaultChecked: true,\n    onChange: handleShowPrecincts,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486\n    },\n    __self: this\n  }, \"Show Precincts\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    onChange: handleShowNp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494\n    },\n    __self: this\n  }, \"Show National Parks \\xA0\", React.createElement(\"img\", {\n    src: \"images/NpIcon.png\",\n    alt: \"National Park Icon\",\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496\n    },\n    __self: this\n  })))), stateBorders && stateBorders.map((stateBorder, index) => {\n    if (selectedState && stateBorder.name === selectedState.name && zoomLevel >= Constants.DP_ZOOM_LEVEL && (showDistricts || showPrecincts && selectedCd)) {\n      return React.createElement(React.Fragment, {\n        key: \"F\" + index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, showDistricts && React.createElement(GeoJSON, {\n        key: \"CD\" + index,\n        data: cdBorders[Constants.STATES.indexOf(selectedState.name)],\n        style: layerStyler.geoJSONCdStyle,\n        onEachFeature: onEachCdFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }), showPrecincts && precinctBorders && React.createElement(GeoJSON, {\n        key: \"P\" + index,\n        ref: ref => {\n          setPrecinctsRef(ref);\n        },\n        data: precinctBorders,\n        style: feature => layerStyler.geoJSONPrecinctStyle(feature, selectedPrecinct),\n        onEachFeature: onEachPrecinctFeature,\n        onClick: handlePrecinctLayerOnClick,\n        onMouseOver: handlePrecinctLayerMouseOver,\n        onMouseOut: () => clearTimeout(delayHandler),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(GeoJSON, {\n        key: \"S\" + index,\n        ref: stateLayerRefs.current[index],\n        data: stateBorder,\n        style: layerStyler.geoJSONStateStyle,\n        onEachFeature: onEachStateFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      });\n    }\n  }), npBorders && showNp && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545\n    },\n    __self: this\n  }, React.createElement(GeoJSON, {\n    data: npBorders,\n    style: feature => layerStyler.geoJSONNpStyle(feature),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546\n    },\n    __self: this\n  }), \")}\", npMarkers.map((feature, index) => React.createElement(Marker, {\n    key: `marker-${index}`,\n    position: feature.geometry.coordinates,\n    icon: NpMarker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552\n    },\n    __self: this\n  }, React.createElement(Popup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558\n    },\n    __self: this\n  }, \"Name: \", feature.properties.name))))))))), React.createElement(RightPanel, {\n    selectedPrecinct: selectedPrecinct,\n    selectedCd: selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  }), React.createElement(CommentTab, {\n    showCommentTab: showCommentTab,\n    handleCloseCommentTab: handleCloseCommentTab,\n    selectedHistory: selectedHistory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/MapScreen.js"],"names":["React","useState","useEffect","useRef","Map","TileLayer","LayersControl","ZoomControl","GeoJSON","Marker","Popup","L","Control","Turf","Layout","Checkbox","Card","Spin","message","BorderJsonRequester","HistoryRequester","ErrorRequester","LayerStyler","Constants","StateContext","DistrictContext","HistoryContext","RerenderContext","LeftPanel","RightPanel","CommentTab","HeaderPanel","moment","PrecinctRequester","borderJsonRequester","historyRequester","errorRequester","layerStyler","precinctRequester","config","top","duration","NpMarker","Icon","iconUrl","iconSize","MapScreen","mapRef","setMapRef","zoomLevel","setZoomLevel","showDistricts","setShowDistricts","showPrecincts","setShowPrecincts","showNp","setShowNp","showCommentTab","setShowCommentTab","selectedState","setSelectedState","selectedCd","setSelectedCd","selectedPrecinct","setSelectedPrecinct","selectedElection","setSelectedElection","ELECTIONS","selectedHistory","setSelectedHistory","stateBorders","setStateBorders","stateLayerRefs","createRef","cdBorders","setCdBorders","precinctBorders","setPrecinctBorders","precinctsRef","setPrecinctsRef","npBorders","setNpBorders","npMarkers","ghostMarkers","setGhostMarkers","history","setHistory","errors","setErrors","delayHandler","setDelayHandler","addingNeighbor","setAddingNeighbor","combiningPrecinct","setCombiningPrecinct","rerender","setRerender","loading","setLoading","drawController","setDrawController","getStateBorders","getCdBorders","getNpBorders","features","forEach","feature","center","centroid","geometry","coordinates","reverse","properties","name","UNIT_NAME","push","calculateFeatureCenter","handleStateChangeDropdown","stateName","handleStateChange","STATES","indexOf","state","layer","leafletElement","fitBounds","current","getBounds","handlePrecinctChange","handlePrecinctLayerOnClick","e","updateNeighbor","id","neighbors","handleAddHistory","description","success","includes","error","clickedPrecinct","newFeature","union","NAME10","CONGRESSIO","concat","filter","item","comments","demographic","map","index","election","isGhost","clearLayers","addData","handlePrecinctLayerMouseOver","setTimeout","handleZoomChange","viewport","zoom","handleShowPrecincts","target","checked","handleShowDistricts","handleShowNp","handleCombinePrecinct","info","handleConfirmGhostPrecinct","substring","updateGhostPrecinct","handleEditPrecinctLayer","featureGroup","polygon","positions","addLayer","EditToolbar","Edit","removeEventListener","addEventListener","layersKey","Object","keys","layers","_layers","length","geoJson","type","_latlngs","lng","lat","kinks","updateBoundary","JSON","stringify","removeLayer","enable","handleDrawSave","Draw","Polygon","completeShape","save","handleClickedCancel","disable","handleDrawUndo","deleteLastVertex","revertLayers","handleAddNeighbor","newHistory","precinct","timestamp","postHistory","category","ERROR_ENUM","histories","handleZoomInPrecinct","handleResolvedError","res","ResolveError","ERROR_HEADER","handleOpenCommentTab","handleCloseCommentTab","handleAddComment","comment","onEachStateFeature","elections","parse","FAKE_ELECTION","on","click","mouseover","setStyle","weight","mouseout","onEachCdFeature","district","getPrecinctBorder","then","onEachPrecinctFeature","ref","MAP_CENTER","DP_ZOOM_LEVEL","stateBorder","geoJSONCdStyle","geoJSONPrecinctStyle","clearTimeout","geoJSONStateStyle","geoJSONNpStyle"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,aAAzB,EAAwCC,WAAxC,EAAqDC,OAArD,EAA8DC,MAA9D,EAAsEC,KAAtE,QAAmF,eAAnF;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,OAAvC,QAAsD,MAAtD;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AAEA,MAAMC,mBAAmB,GAAG,IAAIf,mBAAJ,EAA5B;AACA,MAAMgB,gBAAgB,GAAG,IAAIf,gBAAJ,EAAzB;AACA,MAAMgB,cAAc,GAAG,IAAIf,cAAJ,EAAvB;AACA,MAAMgB,WAAW,GAAG,IAAIf,WAAJ,EAApB;AACA,MAAMgB,iBAAiB,GAAG,IAAIL,iBAAJ,EAA1B;AACAf,OAAO,CAACqB,MAAR,CAAe;AACXC,EAAAA,GAAG,EAAE,EADM;AAEXC,EAAAA,QAAQ,EAAE;AAFC,CAAf;AAKA,MAAMC,QAAQ,GAAG,IAAI/B,CAAC,CAACgC,IAAN,CAAW;AACxBC,EAAAA,OAAO,EAAE,qBADe;AAExBC,EAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL;AAFc,CAAX,CAAjB;AAKA,eAAe,SAASC,SAAT,GAAqB;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB/C,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACgD,SAAD,EAAYC,YAAZ,IAA4BjD,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACkD,aAAD,EAAgBC,gBAAhB,IAAoCnD,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACoD,aAAD,EAAgBC,gBAAhB,IAAoCrD,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACsD,MAAD,EAASC,SAAT,IAAsBvD,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACwD,cAAD,EAAiBC,iBAAjB,IAAsCzD,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM,CAAC0D,aAAD,EAAgBC,gBAAhB,IAAoC3D,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAAC4D,UAAD,EAAaC,aAAb,IAA8B7D,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAAC8D,gBAAD,EAAmBC,mBAAnB,IAA0C/D,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACgE,gBAAD,EAAmBC,mBAAnB,IAA0CjE,QAAQ,CAACsB,SAAS,CAAC4C,SAAV,CAAoB,CAApB,CAAD,CAAxD;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCpE,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAM,CAACqE,YAAD,EAAeC,eAAf,IAAkCtE,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAMuE,cAAc,GAAGrE,MAAM,CAAC,CAACH,KAAK,CAACyE,SAAN,EAAD,EAAoBzE,KAAK,CAACyE,SAAN,EAApB,EAAuCzE,KAAK,CAACyE,SAAN,EAAvC,CAAD,CAA7B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1E,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAAC2E,eAAD,EAAkBC,kBAAlB,IAAwC5E,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAAC6E,YAAD,EAAeC,eAAf,IAAkC9E,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAC+E,SAAD,EAAYC,YAAZ,IAA4BhF,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACiF,SAAD,IAAcjF,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACkF,YAAD,EAAeC,eAAf,IAAkCnF,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAM,CAACoF,OAAD,EAAUC,UAAV,IAAwBrF,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAD,CAAtC;AACA,QAAM,CAACsF,MAAD,EAASC,SAAT,IAAsBvF,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAD,CAApC;AAEA,QAAM,CAACwF,YAAD,EAAeC,eAAf,IAAkCzF,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAC0F,cAAD,EAAiBC,iBAAjB,IAAsC3F,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC4F,iBAAD,EAAoBC,oBAApB,IAA4C7F,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAAC8F,QAAD,EAAWC,WAAX,IAA0B/F,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACgG,OAAD,EAAUC,UAAV,IAAwBjG,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM,CAACkG,cAAD,EAAiBC,iBAAjB,IAAsCnG,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACTqE,MAAAA,eAAe,EAAC,MAAMrC,mBAAmB,CAACmE,eAApB,EAAP,EAAf;AACA1B,MAAAA,YAAY,EAAC,MAAMzC,mBAAmB,CAACoE,YAApB,EAAP,EAAZ;AACA,YAAMtB,SAAS,GAAG,MAAM9C,mBAAmB,CAACqE,YAApB,EAAxB;AACAtB,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACAA,MAAAA,SAAS,CAACwB,QAAV,CAAmBC,OAAnB,CAA2BC,OAAO,IAAI;AAClC,cAAMC,MAAM,GAAG9F,IAAI,CAAC+F,QAAL,CACX/F,IAAI,CAAC6F,OAAL,CAAaA,OAAO,CAACG,QAArB,CADW,CAAf;AAGAF,QAAAA,MAAM,CAACE,QAAP,CAAgBC,WAAhB,GAA8BH,MAAM,CAACE,QAAP,CAAgBC,WAAhB,CAA4BC,OAA5B,EAA9B;AACAJ,QAAAA,MAAM,CAACK,UAAP,CAAkBC,IAAlB,GAAyBP,OAAO,CAACM,UAAR,CAAmBE,SAA5C;AACAhC,QAAAA,SAAS,CAACiC,IAAV,CAAeR,MAAf;AACH,OAPD;AAQH,KAbD;AAeH,GAhBQ,EAgBN,CAACzB,SAAD,CAhBM,CAAT;;AAkBA,WAASkC,sBAAT,CAAgCV,OAAhC,EAAyC;AACrC,WAAO7F,IAAI,CAAC+F,QAAL,CACH/F,IAAI,CAAC6F,OAAL,CAAaA,OAAO,CAACG,QAArB,CADG,CAAP;AAGH;;AAED,WAASQ,yBAAT,CAAmCC,SAAnC,EAA8C;AAC1CC,IAAAA,iBAAiB,CAACjD,YAAY,CAAC/C,SAAS,CAACiG,MAAV,CAAiBC,OAAjB,CAAyBH,SAAzB,CAAD,CAAb,EAAoD,IAApD,CAAjB;AACH;;AAED,iBAAeC,iBAAf,CAAiCG,KAAjC,EAAwCC,KAAxC,EAA+C;AAC3C,QAAIhE,aAAa,IAAI+D,KAAK,CAACT,IAAN,KAAetD,aAAa,CAACsD,IAAlD,EACI;AACJ,QAAI,CAACU,KAAL,EACI5E,MAAM,CAAC6E,cAAP,CAAsBC,SAAtB,CAAgCrD,cAAc,CAACsD,OAAf,CAAuBvG,SAAS,CAACiG,MAAV,CAAiBC,OAAjB,CAAyBC,KAAK,CAACT,IAA/B,CAAvB,EAA6Da,OAA7D,CAAqEF,cAArE,CAAoFG,SAApF,EAAhC,EADJ,KAGIhF,MAAM,CAAC6E,cAAP,CAAsBC,SAAtB,CAAgCF,KAAK,CAACI,SAAN,EAAhC;AACJnE,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAA,IAAAA,gBAAgB,CAAC8D,KAAD,CAAhB;AACA5D,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAa,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAS,IAAAA,UAAU,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAD,CAAV;AACAE,IAAAA,SAAS,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAD,CAAT;AACH;;AAED,WAASwC,oBAAT,CAA8BL,KAA9B,EAAqC;AACjC3D,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAA,IAAAA,mBAAmB,CAAC2D,KAAK,CAACjB,OAAP,CAAnB;AACH,GAlF+B,CAoFhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAASuB,0BAAT,CAAoCC,CAApC,EAAuC;AACnC,QAAIvC,cAAJ,EAAoB;AAAC;AAClB;AACC,UAAIrD,iBAAiB,CAAC6F,cAAlB,CAAiCpE,gBAAgB,CAACqE,EAAlD,EAAsDF,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAAtE,EAA0EzC,cAA1E,CAAJ,EAA+F;AAC/F;AACI5B,QAAAA,gBAAgB,CAACsE,SAAjB,CAA2BlB,IAA3B,CAAgCe,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAAhD;AACAF,QAAAA,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB2B,SAAhB,CAA0BlB,IAA1B,CAA+BpD,gBAAgB,CAACqE,EAAhD;AACAxC,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA0C,QAAAA,gBAAgB,CAAC;AAAEC,UAAAA,WAAW,EAAG,SAAQL,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAAG,OAAMrE,gBAAgB,CAACqE,EAAG;AAArE,SAAD,EAAsFrE,gBAAtF,CAAhB;AACAuE,QAAAA,gBAAgB,CAAC;AAAEC,UAAAA,WAAW,EAAG,SAAQxE,gBAAgB,CAACqE,EAAG,OAAMF,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAAG;AAArE,SAAD,EAAsFF,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAAtG,CAAhB;AACAlH,QAAAA,OAAO,CAACsH,OAAR,CAAgB,8BAAhB;AACH;AACJ,KAXD,MAYK,IAAI3C,iBAAJ,EAAuB;AACxB,UAAI,CAAC9B,gBAAgB,CAACiD,UAAjB,CAA4BqB,SAA5B,CAAsCI,QAAtC,CAA+CP,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAA/D,CAAL,EAAyE;AACrElH,QAAAA,OAAO,CAACwH,KAAR,CAAc,+CAAd;AACA;AACH;;AACD,YAAMC,eAAe,GAAGT,CAAC,CAACP,KAAF,CAAQjB,OAAhC;AACA,YAAMkC,UAAU,GAAG/H,IAAI,CAACgI,KAAL,CACfhI,IAAI,CAAC6F,OAAL,CAAa3C,gBAAgB,CAAC8C,QAA9B,CADe,EAEfhG,IAAI,CAAC6F,OAAL,CAAaiC,eAAe,CAAC9B,QAA7B,CAFe,CAAnB;AAIA+B,MAAAA,UAAU,CAAC5B,UAAX,GAAwB;AACpB8B,QAAAA,MAAM,EAAE/E,gBAAgB,CAACqE,EADL;AAEpBW,QAAAA,UAAU,EAAEhF,gBAAgB,CAACiD,UAAjB,CAA4B+B,UAFpB;AAGpBV,QAAAA,SAAS,EAAEtE,gBAAgB,CAACiD,UAAjB,CAA4BqB,SAA5B,CACNW,MADM,CACCL,eAAe,CAAC3B,UAAhB,CAA2BqB,SAD5B,EAENY,MAFM,CAECC,IAAI,IAAI;AACZ,iBAAOA,IAAI,KAAKnF,gBAAgB,CAACqE,EAA1B,IACAc,IAAI,KAAKP,eAAe,CAACP,EADhC;AAEH,SALM,CAHS;AASpBe,QAAAA,QAAQ,EAAEpF,gBAAgB,CAACiD,UAAjB,CAA4BmC,QAA5B,CAAqCH,MAArC,CAA4CL,eAAe,CAAC3B,UAAhB,CAA2BmC,QAAvE,CATU;AAUpBC,QAAAA,WAAW,EAAErF,gBAAgB,CAACiD,UAAjB,CAA4BoC,WAA5B,CAAwCC,GAAxC,CAA4C,CAACH,IAAD,EAAOI,KAAP,KAAiB;AACtE,iBAAOJ,IAAI,GAAGP,eAAe,CAAC3B,UAAhB,CAA2BoC,WAA3B,CAAuCE,KAAvC,CAAd;AACH,SAFY,CAVO;AAapBC,QAAAA,QAAQ,EAAExF,gBAAgB,CAACiD,UAAjB,CAA4BuC,QAA5B,CAAqCF,GAArC,CAAyC,CAACH,IAAD,EAAOI,KAAP,KAAiB;AAChE,iBAAOJ,IAAI,GAAGP,eAAe,CAAC3B,UAAhB,CAA2BuC,QAA3B,CAAoCD,KAApC,CAAd;AACH,SAFS,CAbU;AAgBpBE,QAAAA,OAAO,EAAE;AAhBW,OAAxB;AAkBA5E,MAAAA,eAAe,CAAC4B,QAAhB,GAA2B5B,eAAe,CAAC4B,QAAhB,CAAyByC,MAAzB,CAAgCC,IAAI,IAAI;AAC/D,eAAOA,IAAI,CAACd,EAAL,KAAYrE,gBAAgB,CAACqE,EAA7B,IACAc,IAAI,CAACd,EAAL,KAAYO,eAAe,CAACP,EADnC;AAEH,OAH0B,CAA3B;AAIAxD,MAAAA,eAAe,CAAC4B,QAAhB,CAAyBW,IAAzB,CAA8ByB,UAA9B;AACA9D,MAAAA,YAAY,CAAC8C,cAAb,CAA4B6B,WAA5B;AACA3E,MAAAA,YAAY,CAAC8C,cAAb,CAA4B8B,OAA5B,CAAoC9E,eAApC;AACAZ,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAA,MAAAA,mBAAmB,CAAC4E,UAAD,CAAnB;AACAN,MAAAA,gBAAgB,CAAE,sBAAqBvE,gBAAgB,CAACqE,EAAG,SAAQO,eAAe,CAACP,EAAG,EAAtE,CAAhB;AACAlH,MAAAA,OAAO,CAACsH,OAAR,CAAgB,kCAAhB;AACA1C,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH,KAxCI,MAyCA,IAAI/B,gBAAgB,IAAIA,gBAAgB,CAACqE,EAAjB,KAAwBF,CAAC,CAACP,KAAF,CAAQjB,OAAR,CAAgB0B,EAAhE,EAAoE;AACrEpE,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,KAFI,MAGA;AACDgE,MAAAA,oBAAoB,CAACE,CAAC,CAACP,KAAH,CAApB;AACH;AACJ;;AAED,WAASgC,4BAAT,CAAsCzB,CAAtC,EAAyC;AACrC,QAAIvC,cAAc,IAAIE,iBAAlB,IAAuCM,cAA3C,EAA2D;AACvD;AACH;;AACDT,IAAAA,eAAe,CAACkE,UAAU,CAAC,MAAM;AAC7B5B,MAAAA,oBAAoB,CAACE,CAAC,CAACP,KAAH,CAApB;AACH,KAFyB,EAEvB,GAFuB,CAAX,CAAf;AAGH;;AAED,WAASkC,gBAAT,GAA4B;AACxB3G,IAAAA,YAAY,CAACH,MAAM,CAAC+G,QAAP,CAAgBC,IAAjB,CAAZ;AACH;;AAED,WAASC,mBAAT,CAA6B9B,CAA7B,EAAgC;AAC5B5E,IAAAA,gBAAgB,CAAC4E,CAAC,CAAC+B,MAAF,CAASC,OAAV,CAAhB;AACH;;AAED,WAASC,mBAAT,CAA6BjC,CAA7B,EAAgC;AAC5B9E,IAAAA,gBAAgB,CAAC8E,CAAC,CAAC+B,MAAF,CAASC,OAAV,CAAhB;AACH;;AAED,WAASE,YAAT,CAAsBlC,CAAtB,EAAyB;AACrB1E,IAAAA,SAAS,CAAC0E,CAAC,CAAC+B,MAAF,CAASC,OAAV,CAAT;AACH;;AAED,WAASG,qBAAT,GAAiC;AAC7BvE,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA5E,IAAAA,OAAO,CAACoJ,IAAR,CAAa,iDAAb;AACH;;AAED,WAASC,0BAAT,GAAsC;AAClCxG,IAAAA,gBAAgB,CAACkD,IAAjB,GAAwBlD,gBAAgB,CAACkD,IAAjB,CAAsBuD,SAAtB,CAAgCzG,gBAAgB,CAACkD,IAAjB,CAAsBQ,OAAtB,CAA8B,GAA9B,IAAqC,CAArE,CAAxB;;AACA,QAAInF,iBAAiB,CAACmI,mBAAlB,CAAsC1G,gBAAgB,CAACqE,EAAvD,CAAJ,EAAgE;AAC5DpC,MAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACAuC,MAAAA,gBAAgB,CAAC;AAAEC,QAAAA,WAAW,EAAG,sBAAqBxE,gBAAgB,CAACqE,EAAG;AAAzD,OAAD,EAAoFrE,gBAApF,CAAhB;AACA7C,MAAAA,OAAO,CAACsH,OAAR,CAAgB,kBAAhB;AACH,KAJD,MAKK;AACDtH,MAAAA,OAAO,CAACwH,KAAR,CAAc,eAAd;AACH;AACJ;;AAGD,WAASgC,uBAAT,GAAmC;AAC/B,UAAMC,YAAY,GAAGhK,CAAC,CAACgK,YAAF,CAAe,CAChC,IAAIhK,CAAC,CAACiK,OAAN,CAAc7G,gBAAgB,CAAC8C,QAAjB,CAA0BC,WAA1B,CAAsC,CAAtC,EAAyCuC,GAAzC,CAA6CwB,SAAS,IAAI,CAACA,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAA1D,CAAd,CADgC,CAAf,CAArB;AAGA9H,IAAAA,MAAM,CAAC6E,cAAP,CAAsBkD,QAAtB,CAA+BH,YAA/B;AACA,UAAMxE,cAAc,GAAG,IAAIxF,CAAC,CAACoK,WAAF,CAAcC,IAAlB,CAAuBjI,MAAM,CAAC6E,cAA9B,EAA8C;AACjE+C,MAAAA,YAAY,EAAEA;AADmD,KAA9C,CAAvB;AAGAvE,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AAEApD,IAAAA,MAAM,CAAC6E,cAAP,CAAsBqD,mBAAtB,CAA0C,aAA1C;AACAlI,IAAAA,MAAM,CAAC6E,cAAP,CAAsBsD,gBAAtB,CAAuC,aAAvC,EAAsD,UAAUhD,CAAV,EAAa;AAC/D,YAAMiD,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYnD,CAAC,CAACoD,MAAF,CAASC,OAArB,CAAlB;AACA,UAAIJ,SAAS,CAACK,MAAV,KAAqB,CAAzB,EACI;AACJ,YAAM7D,KAAK,GAAGO,CAAC,CAACoD,MAAF,CAASC,OAAT,CAAiBJ,SAAS,CAAC,CAAD,CAA1B,CAAd;AACA,YAAMM,OAAO,GAAG;AACZC,QAAAA,IAAI,EAAE,SADM;AAEZ5E,QAAAA,WAAW,EAAE,CAACa,KAAK,CAACgE,QAAN,CAAe,CAAf,EAAkBtC,GAAlB,CAAsBH,IAAI,IAAI,CAACA,IAAI,CAAC0C,GAAN,EAAW1C,IAAI,CAAC2C,GAAhB,CAA9B,CAAD;AAFD,OAAhB;AAIA,YAAMC,KAAK,GAAGjL,IAAI,CAACiL,KAAL,CAAWL,OAAX,CAAd;;AACA,UAAIK,KAAK,CAACtF,QAAN,CAAegF,MAAnB,EAA2B;AACvBtK,QAAAA,OAAO,CAACwH,KAAR,CAAc,iDAAd;AACA;AACH;;AACDpG,MAAAA,iBAAiB,CAACyJ,cAAlB,CAAiChI,gBAAgB,CAACqE,EAAlD,EAAsD4D,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAtD;AACA1H,MAAAA,gBAAgB,CAAC8C,QAAjB,GAA4B4E,OAA5B;AACA3G,MAAAA,YAAY,CAAC8C,cAAb,CAA4B6B,WAA5B;AACA3E,MAAAA,YAAY,CAAC8C,cAAb,CAA4B8B,OAA5B,CAAoC9E,eAApC;AACA1D,MAAAA,OAAO,CAACsH,OAAR,CAAiB,uBAAsBzE,gBAAgB,CAACkD,IAAK,cAA7D;AACAqB,MAAAA,gBAAgB,CAAC;AAAEC,QAAAA,WAAW,EAAG,UAASxE,gBAAgB,CAACkD,IAAK;AAA/C,OAAD,EAAiElD,gBAAjE,CAAhB;AACH,KApBD;AAsBAhB,IAAAA,MAAM,CAAC6E,cAAP,CAAsBqD,mBAAtB,CAA0C,eAA1C;AACAlI,IAAAA,MAAM,CAAC6E,cAAP,CAAsBsD,gBAAtB,CAAuC,eAAvC,EAAwD,UAAUhD,CAAV,EAAa;AACjEnF,MAAAA,MAAM,CAAC6E,cAAP,CAAsBsE,WAAtB,CAAkCvB,YAAlC;AACH,KAFD;AAGAxE,IAAAA,cAAc,CAACgG,MAAf;AACH;;AAED,WAASC,cAAT,GAA0B;AACtB,QAAIjG,cAAc,YAAYxF,CAAC,CAAC0L,IAAF,CAAOC,OAArC,EACInG,cAAc,CAACoG,aAAf,GADJ,KAGIpG,cAAc,CAACqG,IAAf;AACJC,IAAAA,mBAAmB;AACtB;;AAED,WAASA,mBAAT,GAA+B;AAC3B,QAAI9G,cAAJ,EAAoB;AAChBC,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA1E,MAAAA,OAAO,CAACoJ,IAAR,CAAa,4BAAb;AACH,KAHD,MAIK,IAAIzE,iBAAJ,EAAuB;AACxBC,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACA5E,MAAAA,OAAO,CAACoJ,IAAR,CAAa,gCAAb;AACH,KAHI,MAIA;AACDnE,MAAAA,cAAc,CAACuG,OAAf;AACAtG,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ;;AAED,WAASuG,cAAT,GAA0B;AACtB,QAAIxG,cAAc,YAAYxF,CAAC,CAAC0L,IAAF,CAAOC,OAArC,EACInG,cAAc,CAACyG,gBAAf,GADJ,KAGIzG,cAAc,CAAC0G,YAAf;AACP;;AAED,WAASC,iBAAT,GAA6B;AACzBlH,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA1E,IAAAA,OAAO,CAACoJ,IAAR,CAAa,0CAAb;AACH;;AAED,iBAAehC,gBAAf,CAAgCyE,UAAhC,EAA4CC,QAA5C,EAAsDrF,KAAK,GAAG,IAA9D,EAAoE;AAChEoF,IAAAA,UAAU,CAACE,SAAX,GAAuBjL,MAAM,EAA7B;;AACA,QAAI,MAAMG,gBAAgB,CAAC+K,WAAjB,CAA6BH,UAA7B,EAAyCC,QAAQ,CAAC5E,EAAlD,CAAV,EAAiE;AAC7D,UAAI2E,UAAU,CAACI,QAAf,EACI9H,OAAO,CAAC9D,SAAS,CAAC6L,UAAV,CAAqB3F,OAArB,CAA6BsF,UAAU,CAACI,QAAxC,CAAD,CAAP,CAA2DhG,IAA3D,CAAgE,CAAC4F,UAAD,EAAapF,KAAb,CAAhE;AACJoF,MAAAA,UAAU,CAACC,QAAX,GAAsBA,QAAtB;AACAA,MAAAA,QAAQ,CAACK,SAAT,CAAmBlG,IAAnB,CAAwB4F,UAAxB;AACH,KALD,MAMK;AACD7L,MAAAA,OAAO,CAACwH,KAAR,CAAc,yBAAd;AACH,KAV+D,CAWhE;;AACH;;AAED,WAAS4E,oBAAT,CAA8B5G,OAA9B,EAAuCiB,KAAvC,EAA8C;AAC1C3D,IAAAA,mBAAmB,CAAC0C,OAAD,CAAnB;AACA3D,IAAAA,MAAM,CAAC6E,cAAP,CAAsBC,SAAtB,CAAgCF,KAAK,CAACI,SAAN,EAAhC;AACH;;AAED,WAASwF,mBAAT,CAA6B7E,KAA7B,EAAoCY,KAApC,EAA2C3B,KAA3C,EAAkD;AAC9C,UAAM6F,GAAG,GAAGpL,cAAc,CAACqL,YAAf,CAA4B/E,KAAK,CAACN,EAAlC,CAAZ;;AACA,QAAIoF,GAAJ,EAAS;AACLjI,MAAAA,MAAM,CAAC+D,KAAD,CAAN,GAAgB/D,MAAM,CAAC+D,KAAD,CAAN,CAAcL,MAAd,CAAsBC,IAAD,IAAU;AAC3C,eAAOR,KAAK,CAACN,EAAN,KAAac,IAAI,CAAC,CAAD,CAAJ,CAAQd,EAA5B;AACH,OAFe,CAAhB;AAGApC,MAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACA,YAAMwC,WAAW,GAAG,oBAAoBhH,SAAS,CAACmM,YAAV,CAAuBnM,SAAS,CAAC6L,UAAV,CAAqB3F,OAArB,CAA6BiB,KAAK,CAACyE,QAAnC,CAAvB,CAApB,GACd,uBADc,GACYzE,KAAK,CAACH,WADtC;AAEAD,MAAAA,gBAAgB,CAAC;AAAEC,QAAAA,WAAF;AAAe4E,QAAAA,QAAQ,EAAEzE,KAAK,CAACyE;AAA/B,OAAD,EAA4CzE,KAAK,CAACsE,QAAlD,EAA4DrF,KAA5D,CAAhB;AACAzG,MAAAA,OAAO,CAACsH,OAAR,CAAgB,kCAAhB;AACH,KATD,MAUK;AACDtH,MAAAA,OAAO,CAACwH,KAAR,CAAc,oBAAd;AACH;AACJ;;AAED,WAASiF,oBAAT,CAA8BtI,OAA9B,EAAuC;AACnC3B,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAW,IAAAA,kBAAkB,CAACgB,OAAD,CAAlB;AACH;;AAED,WAASuI,qBAAT,GAAiC;AAC7BlK,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAW,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASwJ,gBAAT,CAA0BC,OAA1B,EAAmCb,SAAnC,EAA8C,CAE7C;;AAED,WAASc,kBAAT,CAA4BrG,KAA5B,EAAmCC,KAAnC,EAA0C;AACtCD,IAAAA,KAAK,CAACsG,SAAN,GAAkBhC,IAAI,CAACiC,KAAL,CAAWjC,IAAI,CAACC,SAAL,CAAe1K,SAAS,CAAC2M,aAAzB,CAAX,CAAlB;AACAvG,IAAAA,KAAK,CAACwG,EAAN,CAAS;AACLC,MAAAA,KAAK,EAAE,YAAY;AACf7G,QAAAA,iBAAiB,CAACG,KAAD,EAAQC,KAAR,CAAjB;AACH,OAHI;AAIL0G,MAAAA,SAAS,EAAE,MAAM;AACb1G,QAAAA,KAAK,CAAC2G,QAAN,CAAe;AACXC,UAAAA,MAAM,EAAE;AADG,SAAf;AAGH,OARI;AASLC,MAAAA,QAAQ,EAAE,MAAM;AACZ7G,QAAAA,KAAK,CAAC2G,QAAN,CAAe;AACXC,UAAAA,MAAM,EAAE;AADG,SAAf;AAGH;AAbI,KAAT;AAeH;;AAED,WAASE,eAAT,CAAyBC,QAAzB,EAAmC/G,KAAnC,EAA0C;AACtC+G,IAAAA,QAAQ,CAACV,SAAT,GAAqBhC,IAAI,CAACiC,KAAL,CAAWjC,IAAI,CAACC,SAAL,CAAe1K,SAAS,CAAC2M,aAAzB,CAAX,CAArB;AACAvG,IAAAA,KAAK,CAACwG,EAAN,CAAS;AACLC,MAAAA,KAAK,EAAE,YAAY;AACflI,QAAAA,UAAU,CAAC,IAAD,CAAV;AACApC,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAe,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAb,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAsB,QAAAA,UAAU,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAD,CAAV;AACAE,QAAAA,SAAS,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAAD,CAAT;AACA,cAAMtD,mBAAmB,CAACyM,iBAApB,CAAsCD,QAAQ,CAACzH,IAA/C,EAAqD2H,IAArD,CAA0DpB,GAAG,IAAI;AACnE3I,UAAAA,kBAAkB,CAAC2I,GAAD,CAAlB;AACH,SAFK,CAAN;AAGA1J,QAAAA,aAAa,CAAC4K,QAAD,CAAb;AACAxI,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAbI;AAcLmI,MAAAA,SAAS,EAAE,MAAM;AACb1G,QAAAA,KAAK,CAAC2G,QAAN,CAAe;AACXC,UAAAA,MAAM,EAAE;AADG,SAAf;AAGH,OAlBI;AAmBLC,MAAAA,QAAQ,EAAE,MAAM;AACZ7G,QAAAA,KAAK,CAAC2G,QAAN,CAAe;AACXC,UAAAA,MAAM,EAAE;AADG,SAAf;AAGH;AAvBI,KAAT;AAyBH;;AAED,WAASM,qBAAT,CAA+B7B,QAA/B,EAAyCrF,KAAzC,EAAgD;AAC5CqF,IAAAA,QAAQ,CAACgB,SAAT,GAAqBhC,IAAI,CAACiC,KAAL,CAAWjC,IAAI,CAACC,SAAL,CAAe1K,SAAS,CAAC2M,aAAzB,CAAX,CAArB;AAEAlB,IAAAA,QAAQ,CAACzH,MAAT,CAAgBkB,OAAhB,CAAwB,CAACyC,IAAD,EAAOI,KAAP,KAAiB;AACrCJ,MAAAA,IAAI,CAAC8D,QAAL,GAAgBA,QAAhB;AACA,UAAI9D,IAAI,CAACiE,QAAT,EACI5H,MAAM,CAAChE,SAAS,CAAC6L,UAAV,CAAqB3F,OAArB,CAA6ByB,IAAI,CAACiE,QAAlC,CAAD,CAAN,CAAoDhG,IAApD,CAAyD,CAAC+B,IAAD,EAAOvB,KAAP,CAAzD;AACP,KAJD;AAMAqF,IAAAA,QAAQ,CAACK,SAAT,CAAmB5G,OAAnB,CAA2B,CAACyC,IAAD,EAAOI,KAAP,KAAiB;AACxCJ,MAAAA,IAAI,CAAC8D,QAAL,GAAgBA,QAAhB;AACA,UAAI9D,IAAI,CAACiE,QAAT,EACI9H,OAAO,CAAC9D,SAAS,CAAC6L,UAAV,CAAqB3F,OAArB,CAA6ByB,IAAI,CAACiE,QAAlC,CAAD,CAAP,CAAqDhG,IAArD,CAA0D,CAAC+B,IAAD,EAAOvB,KAAP,CAA1D;AACP,KAJD;AAKH;;AAED,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEhE,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEE,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE,CAACwB,OAAD,EAAUiD,gBAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE,CAACvC,QAAD,EAAWC,WAAX,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,MAAM,EAAET,MADZ;AAEI,IAAA,OAAO,EAAEF,OAFb;AAGI,IAAA,oBAAoB,EAAEiI,oBAH1B;AAII,IAAA,mBAAmB,EAAEC,mBAJzB;AAKI,IAAA,gBAAgB,EAAEM,gBALtB;AAMI,IAAA,oBAAoB,EAAEF,oBAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD,CAAQ,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,gBAAgB,EAAE5J,gBADtB;AAEI,IAAA,SAAS,EAAEd,SAFf;AAGI,IAAA,yBAAyB,EAAEoE,yBAH/B;AAII,IAAA,iBAAiB,EAAExB,iBAJvB;AAKI,IAAA,qBAAqB,EAAEwE,qBAL3B;AAMI,IAAA,cAAc,EAAE1E,cANpB;AAOI,IAAA,iBAAiB,EAAEmH,iBAPvB;AAQI,IAAA,0BAA0B,EAAEvC,0BARhC;AASI,IAAA,uBAAuB,EAAEG,uBAT7B;AAUI,IAAA,cAAc,EAAEvE,cAVpB;AAWI,IAAA,mBAAmB,EAAEsG,mBAXzB;AAYI,IAAA,cAAc,EAAEL,cAZpB;AAaI,IAAA,cAAc,EAAEO,cAbpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAkBI,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAE1G,OAAhB;AAAyB,IAAA,IAAI,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AACI,IAAA,GAAG,EAAG6I,GAAD,IAAS;AAAE9L,MAAAA,SAAS,CAAC8L,GAAD,CAAT;AAAiB,KADrC;AAEI,IAAA,MAAM,EAAEvN,SAAS,CAACwN,UAFtB;AAGI,IAAA,IAAI,EAAE,CAHV;AAII,IAAA,WAAW,EAAE,KAJjB;AAKI,IAAA,OAAO,EAAE,IALb;AAMI,IAAA,SAAS,EAAElF,gBANf;AAOI,IAAA,YAAY,EAAE,IAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,oBAAC,SAAD;AACI,IAAA,WAAW,EAAC,0EADhB;AAEI,IAAA,GAAG,EAAC,oKAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAaI,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,EAcI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,cAAc,EAAE,IADpB;AAEI,IAAA,QAAQ,EAAEM,mBAFd;AAGI,IAAA,QAAQ,EAAElH,SAAS,GAAG1B,SAAS,CAACyN,aAAtB,IAAuC,CAACrL,aAHtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI,oBAAC,QAAD;AACI,IAAA,cAAc,EAAE,IADpB;AAEI,IAAA,QAAQ,EAAEqG,mBAFd;AAGI,IAAA,QAAQ,EAAE/G,SAAS,GAAG1B,SAAS,CAACyN,aAAtB,IAAuC,CAACnL,UAHtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATJ,EAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,EAiBI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEuG,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEZ;AAAK,IAAA,GAAG,EAAC,mBAAT;AAA6B,IAAA,GAAG,EAAC,oBAAjC;AAAsD,IAAA,SAAS,EAAC,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFY,CAjBJ,CADJ,CAdJ,EAuCK9F,YAAY,IACTA,YAAY,CAAC+E,GAAb,CAAiB,CAAC4F,WAAD,EAAc3F,KAAd,KAAwB;AACrC,QAAI3F,aAAa,IACVsL,WAAW,CAAChI,IAAZ,KAAqBtD,aAAa,CAACsD,IADtC,IAEGhE,SAAS,IAAI1B,SAAS,CAACyN,aAF1B,KAGI7L,aAAa,IAAKE,aAAa,IAAIQ,UAHvC,CAAJ,EAIE;AACE,aACI,oBAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,EAAE,MAAMyF,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKnG,aAAa,IAAI,oBAAC,OAAD;AACd,QAAA,GAAG,EAAE,OAAOmG,KADE;AAEd,QAAA,IAAI,EAAE5E,SAAS,CAACnD,SAAS,CAACiG,MAAV,CAAiBC,OAAjB,CAAyB9D,aAAa,CAACsD,IAAvC,CAAD,CAFD;AAGd,QAAA,KAAK,EAAE5E,WAAW,CAAC6M,cAHL;AAId,QAAA,aAAa,EAAET,eAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADtB,EAQMpL,aAAa,IAAIuB,eAAlB,IAAsC,oBAAC,OAAD;AACnC,QAAA,GAAG,EAAE,MAAM0E,KADwB;AAEnC,QAAA,GAAG,EAAGwF,GAAD,IAAS;AAAE/J,UAAAA,eAAe,CAAC+J,GAAD,CAAf;AAAuB,SAFJ;AAGnC,QAAA,IAAI,EAAElK,eAH6B;AAInC,QAAA,KAAK,EAAG8B,OAAD,IAAarE,WAAW,CAAC8M,oBAAZ,CAAiCzI,OAAjC,EAA0C3C,gBAA1C,CAJe;AAKnC,QAAA,aAAa,EAAE8K,qBALoB;AAMnC,QAAA,OAAO,EAAE5G,0BAN0B;AAOnC,QAAA,WAAW,EAAE0B,4BAPsB;AAQnC,QAAA,UAAU,EAAE,MAAMyF,YAAY,CAAC3J,YAAD,CARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAR3C,CADJ;AAsBH,KA3BD,MA4BK;AACD,aACI,oBAAC,OAAD;AACI,QAAA,GAAG,EAAE,MAAM6D,KADf;AAEI,QAAA,GAAG,EAAE9E,cAAc,CAACsD,OAAf,CAAuBwB,KAAvB,CAFT;AAGI,QAAA,IAAI,EAAE2F,WAHV;AAII,QAAA,KAAK,EAAE5M,WAAW,CAACgN,iBAJvB;AAKI,QAAA,aAAa,EAAEtB,kBALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AASH;AACJ,GAxCD,CAxCR,EAkFM/I,SAAS,IAAIzB,MAAd,IACG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AACI,IAAA,IAAI,EAAEyB,SADV;AAEI,IAAA,KAAK,EAAG0B,OAAD,IAAarE,WAAW,CAACiN,cAAZ,CAA2B5I,OAA3B,CAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,QAMKxB,SAAS,CAACmE,GAAV,CAAc,CAAC3C,OAAD,EAAU4C,KAAV,KACX,oBAAC,MAAD;AACI,IAAA,GAAG,EAAG,UAASA,KAAM,EADzB;AAEI,IAAA,QAAQ,EAAE5C,OAAO,CAACG,QAAR,CAAiBC,WAF/B;AAGI,IAAA,IAAI,EAAEpE,QAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAagE,OAAO,CAACM,UAAR,CAAmBC,IAAhC,CADJ,CALJ,CADH,CANL,CAnFR,CADJ,CADJ,CAlBJ,CATJ,EAuII,oBAAC,UAAD;AAAY,IAAA,gBAAgB,EAAElD,gBAA9B;AAAgD,IAAA,UAAU,EAAEF,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvIJ,EAwII,oBAAC,UAAD;AACI,IAAA,cAAc,EAAEJ,cADpB;AAEI,IAAA,qBAAqB,EAAEmK,qBAF3B;AAGI,IAAA,eAAe,EAAExJ,eAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxIJ,CADJ,CADJ,CADJ,CADJ,CADJ;AAwJH","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Map, TileLayer, LayersControl, ZoomControl, GeoJSON, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet-draw';\r\nimport Control from 'react-leaflet-control';\r\nimport * as Turf from '@turf/turf';\r\nimport { Layout, Checkbox, Card, Spin, message } from 'antd';\r\nimport BorderJsonRequester from 'requesters/BorderJsonRequester';\r\nimport HistoryRequester from 'requesters/HistoryRequester';\r\nimport ErrorRequester from 'requesters/ErrorRequester';\r\nimport LayerStyler from 'utils/LayerStyler';\r\nimport * as Constants from 'constants/constants';\r\nimport StateContext from 'contexts/StateContext';\r\nimport DistrictContext from 'contexts/DistrictContext';\r\nimport HistoryContext from 'contexts/HistoryContext';\r\nimport RerenderContext from 'contexts/RerenderContext';\r\nimport LeftPanel from './LeftPanel/LeftPanel';\r\nimport RightPanel from './RightPanel/RightPanel';\r\nimport CommentTab from './RightPanel/CommentTab';\r\nimport HeaderPanel from './HeaderPanel/HeaderPanel'\r\nimport moment from 'moment';\r\nimport PrecinctRequester from 'requesters/PrecinctRequester';\r\n\r\nconst borderJsonRequester = new BorderJsonRequester();\r\nconst historyRequester = new HistoryRequester();\r\nconst errorRequester = new ErrorRequester();\r\nconst layerStyler = new LayerStyler();\r\nconst precinctRequester = new PrecinctRequester();\r\nmessage.config({\r\n    top: 60,\r\n    duration: 3\r\n});\r\n\r\nconst NpMarker = new L.Icon({\r\n    iconUrl: 'images/NpMarker.png',\r\n    iconSize: [48, 48],\r\n});\r\n\r\nexport default function MapScreen() {\r\n    const [mapRef, setMapRef] = useState(null);\r\n    const [zoomLevel, setZoomLevel] = useState(4);\r\n    const [showDistricts, setShowDistricts] = useState(true);\r\n    const [showPrecincts, setShowPrecincts] = useState(true);\r\n    const [showNp, setShowNp] = useState(false);\r\n    const [showCommentTab, setShowCommentTab] = useState(false);\r\n\r\n    const [selectedState, setSelectedState] = useState(null);\r\n    const [selectedCd, setSelectedCd] = useState(null);\r\n    const [selectedPrecinct, setSelectedPrecinct] = useState(null);\r\n    const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\r\n    const [selectedHistory, setSelectedHistory] = useState(null);\r\n\r\n    const [stateBorders, setStateBorders] = useState(null);\r\n    const stateLayerRefs = useRef([React.createRef(), React.createRef(), React.createRef()]);\r\n    const [cdBorders, setCdBorders] = useState(null);\r\n    const [precinctBorders, setPrecinctBorders] = useState(null);\r\n    const [precinctsRef, setPrecinctsRef] = useState(null);\r\n    const [npBorders, setNpBorders] = useState(null);\r\n\r\n    const [npMarkers] = useState([]);\r\n    const [ghostMarkers, setGhostMarkers] = useState([]);\r\n\r\n    const [history, setHistory] = useState([[], [], [], [], [], []]);\r\n    const [errors, setErrors] = useState([[], [], [], [], [], []]);\r\n\r\n    const [delayHandler, setDelayHandler] = useState(null)\r\n    const [addingNeighbor, setAddingNeighbor] = useState(false)\r\n    const [combiningPrecinct, setCombiningPrecinct] = useState(false)\r\n    const [rerender, setRerender] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [drawController, setDrawController] = useState(null);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setStateBorders(await borderJsonRequester.getStateBorders());\r\n            setCdBorders(await borderJsonRequester.getCdBorders());\r\n            const npBorders = await borderJsonRequester.getNpBorders();\r\n            setNpBorders(npBorders);\r\n            npBorders.features.forEach(feature => {\r\n                const center = Turf.centroid(\r\n                    Turf.feature(feature.geometry)\r\n                );\r\n                center.geometry.coordinates = center.geometry.coordinates.reverse();\r\n                center.properties.name = feature.properties.UNIT_NAME;\r\n                npMarkers.push(center);\r\n            })\r\n        }\r\n        )();\r\n    }, [npMarkers]);\r\n\r\n    function calculateFeatureCenter(feature) {\r\n        return Turf.centroid(\r\n            Turf.feature(feature.geometry)\r\n        );\r\n    }\r\n\r\n    function handleStateChangeDropdown(stateName) {\r\n        handleStateChange(stateBorders[Constants.STATES.indexOf(stateName)], null);\r\n    }\r\n\r\n    async function handleStateChange(state, layer) {\r\n        if (selectedState && state.name === selectedState.name)\r\n            return;\r\n        if (!layer)\r\n            mapRef.leafletElement.fitBounds(stateLayerRefs.current[Constants.STATES.indexOf(state.name)].current.leafletElement.getBounds());\r\n        else\r\n            mapRef.leafletElement.fitBounds(layer.getBounds());\r\n        setSelectedState(null);\r\n        setSelectedState(state);\r\n        setSelectedCd(null);\r\n        setSelectedPrecinct(null);\r\n        setPrecinctBorders(null);\r\n        setHistory([[], [], [], [], [], []]);\r\n        setErrors([[], [], [], [], [], []]);\r\n    }\r\n\r\n    function handlePrecinctChange(layer) {\r\n        setSelectedPrecinct(null);\r\n        setSelectedPrecinct(layer.feature);\r\n    }\r\n\r\n    // function Order(targetId, toAdd){\r\n    //     this.targetPrecinctId=targetId;\r\n    //     this.toAdd=toAdd;\r\n    //     this.getTargetPrecinctId=function(){\r\n    //         return this.targetPrecinctId;\r\n    //     };\r\n    //     this.getToAdd=function(){\r\n    //         return this.toAdd;\r\n    //     };\r\n    // };\r\n\r\n    function handlePrecinctLayerOnClick(e) {\r\n        if (addingNeighbor) {//remove?\r\n           // var order = new Order(e.layer.feature.id, addingNeighbor);\r\n            if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, addingNeighbor)) {\r\n            //if (precinctRequester.updateNeighbor(selectedPrecinct.id, order)) {\r\n                selectedPrecinct.neighbors.push(e.layer.feature.id);\r\n                e.layer.feature.neighbors.push(selectedPrecinct.id);\r\n                setAddingNeighbor(false);\r\n                handleAddHistory({ description: `Added ${e.layer.feature.id} to ${selectedPrecinct.id}'s neighbor` }, selectedPrecinct);\r\n                handleAddHistory({ description: `Added ${selectedPrecinct.id} to ${e.layer.feature.id}'s neighbor` }, e.layer.feature.id);\r\n                message.success('Successfully added neighbor.');\r\n            }\r\n        }\r\n        else if (combiningPrecinct) {\r\n            if (!selectedPrecinct.properties.neighbors.includes(e.layer.feature.id)) {\r\n                message.error('Please select a neighbor precinct to combine.');\r\n                return;\r\n            }\r\n            const clickedPrecinct = e.layer.feature;\r\n            const newFeature = Turf.union(\r\n                Turf.feature(selectedPrecinct.geometry),\r\n                Turf.feature(clickedPrecinct.geometry)\r\n            );\r\n            newFeature.properties = {\r\n                NAME10: selectedPrecinct.id,\r\n                CONGRESSIO: selectedPrecinct.properties.CONGRESSIO,\r\n                neighbors: selectedPrecinct.properties.neighbors\r\n                    .concat(clickedPrecinct.properties.neighbors)\r\n                    .filter(item => {\r\n                        return item !== selectedPrecinct.id\r\n                            && item !== clickedPrecinct.id;\r\n                    }),\r\n                comments: selectedPrecinct.properties.comments.concat(clickedPrecinct.properties.comments),\r\n                demographic: selectedPrecinct.properties.demographic.map((item, index) => {\r\n                    return item + clickedPrecinct.properties.demographic[index]\r\n                }),\r\n                election: selectedPrecinct.properties.election.map((item, index) => {\r\n                    return item + clickedPrecinct.properties.election[index];\r\n                }),\r\n                isGhost: false\r\n            };\r\n            precinctBorders.features = precinctBorders.features.filter(item => {\r\n                return item.id !== selectedPrecinct.id\r\n                    && item.id !== clickedPrecinct.id;\r\n            });\r\n            precinctBorders.features.push(newFeature);\r\n            precinctsRef.leafletElement.clearLayers();\r\n            precinctsRef.leafletElement.addData(precinctBorders);\r\n            setSelectedPrecinct(null);\r\n            setSelectedPrecinct(newFeature);\r\n            handleAddHistory(`Combined precincts ${selectedPrecinct.id} with ${clickedPrecinct.id}`);\r\n            message.success('Successfully combined precincts.');\r\n            setCombiningPrecinct(false);\r\n        }\r\n        else if (selectedPrecinct && selectedPrecinct.id === e.layer.feature.id) {\r\n            setSelectedPrecinct(null);\r\n        }\r\n        else {\r\n            handlePrecinctChange(e.layer);\r\n        }\r\n    }\r\n\r\n    function handlePrecinctLayerMouseOver(e) {\r\n        if (addingNeighbor || combiningPrecinct || drawController) {\r\n            return;\r\n        }\r\n        setDelayHandler(setTimeout(() => {\r\n            handlePrecinctChange(e.layer);\r\n        }, 500))\r\n    }\r\n\r\n    function handleZoomChange() {\r\n        setZoomLevel(mapRef.viewport.zoom);\r\n    }\r\n\r\n    function handleShowPrecincts(e) {\r\n        setShowPrecincts(e.target.checked);\r\n    }\r\n\r\n    function handleShowDistricts(e) {\r\n        setShowDistricts(e.target.checked);\r\n    }\r\n\r\n    function handleShowNp(e) {\r\n        setShowNp(e.target.checked);\r\n    }\r\n\r\n    function handleCombinePrecinct() {\r\n        setCombiningPrecinct(true);\r\n        message.info('Please click on a neighbor precinct to combine.');\r\n    }\r\n\r\n    function handleConfirmGhostPrecinct() {\r\n        selectedPrecinct.name = selectedPrecinct.name.substring(selectedPrecinct.name.indexOf(\" \") + 1);\r\n        if (precinctRequester.updateGhostPrecinct(selectedPrecinct.id)) {\r\n            setRerender(!rerender);\r\n            handleAddHistory({ description: `Confirmed precinct ${selectedPrecinct.id} is a Ghost Precinct.` }, selectedPrecinct);\r\n            message.success('Action Completed');\r\n        }\r\n        else {\r\n            message.error('Action Failed');\r\n        }\r\n    }\r\n\r\n\r\n    function handleEditPrecinctLayer() {\r\n        const featureGroup = L.featureGroup([\r\n            new L.polygon(selectedPrecinct.geometry.coordinates[0].map(positions => [positions[1], positions[0]]))\r\n        ]);\r\n        mapRef.leafletElement.addLayer(featureGroup);\r\n        const drawController = new L.EditToolbar.Edit(mapRef.leafletElement, {\r\n            featureGroup: featureGroup\r\n        });\r\n        setDrawController(drawController);\r\n\r\n        mapRef.leafletElement.removeEventListener('draw:edited');\r\n        mapRef.leafletElement.addEventListener('draw:edited', function (e) {\r\n            const layersKey = Object.keys(e.layers._layers);\r\n            if (layersKey.length === 0)\r\n                return;\r\n            const layer = e.layers._layers[layersKey[0]];\r\n            const geoJson = {\r\n                type: \"Polygon\",\r\n                coordinates: [layer._latlngs[0].map(item => [item.lng, item.lat])]\r\n            }\r\n            const kinks = Turf.kinks(geoJson);\r\n            if (kinks.features.length) {\r\n                message.error(\"Self-Intersection Detected, Please Do It Again!\")\r\n                return\r\n            }\r\n            precinctRequester.updateBoundary(selectedPrecinct.id, JSON.stringify(geoJson));\r\n            selectedPrecinct.geometry = geoJson;\r\n            precinctsRef.leafletElement.clearLayers();\r\n            precinctsRef.leafletElement.addData(precinctBorders);\r\n            message.success(`Successfully edited ${selectedPrecinct.name}'s boundary.`);\r\n            handleAddHistory({ description: `Edited ${selectedPrecinct.name}'s boundary.` }, selectedPrecinct);\r\n        });\r\n\r\n        mapRef.leafletElement.removeEventListener('draw:editstop');\r\n        mapRef.leafletElement.addEventListener('draw:editstop', function (e) {\r\n            mapRef.leafletElement.removeLayer(featureGroup);\r\n        });\r\n        drawController.enable();\r\n    }\r\n\r\n    function handleDrawSave() {\r\n        if (drawController instanceof L.Draw.Polygon)\r\n            drawController.completeShape();\r\n        else\r\n            drawController.save();\r\n        handleClickedCancel();\r\n    }\r\n\r\n    function handleClickedCancel() {\r\n        if (addingNeighbor) {\r\n            setAddingNeighbor(false);\r\n            message.info('Cancelled adding neighbor.');\r\n        }\r\n        else if (combiningPrecinct) {\r\n            setCombiningPrecinct(false);\r\n            message.info('Cancelled combining precincts.');\r\n        }\r\n        else {\r\n            drawController.disable();\r\n            setDrawController(null);\r\n        }\r\n    }\r\n\r\n    function handleDrawUndo() {\r\n        if (drawController instanceof L.Draw.Polygon)\r\n            drawController.deleteLastVertex();\r\n        else\r\n            drawController.revertLayers();\r\n    }\r\n\r\n    function handleAddNeighbor() {\r\n        setAddingNeighbor(true);\r\n        message.info('Please click on another precinct to add.');\r\n    }\r\n\r\n    async function handleAddHistory(newHistory, precinct, layer = null) {\r\n        newHistory.timestamp = moment();\r\n        if (await historyRequester.postHistory(newHistory, precinct.id)) {\r\n            if (newHistory.category)\r\n                history[Constants.ERROR_ENUM.indexOf(newHistory.category)].push([newHistory, layer]);\r\n            newHistory.precinct = precinct;\r\n            precinct.histories.push(newHistory);\r\n        }\r\n        else {\r\n            message.error('Failed to post history.');\r\n        }\r\n        // setHistory([newLog, ...history]);\r\n    }\r\n\r\n    function handleZoomInPrecinct(feature, layer) {\r\n        setSelectedPrecinct(feature);\r\n        mapRef.leafletElement.fitBounds(layer.getBounds());\r\n    }\r\n\r\n    function handleResolvedError(error, index, layer) {\r\n        const res = errorRequester.ResolveError(error.id);\r\n        if (res) {\r\n            errors[index] = errors[index].filter((item) => {\r\n                return error.id !== item[0].id;\r\n            });\r\n            setRerender(!rerender);\r\n            const description = \"Resolved error \" + Constants.ERROR_HEADER[Constants.ERROR_ENUM.indexOf(error.category)]\r\n                + \". Error description: \" + error.description;\r\n            handleAddHistory({ description, category: error.category }, error.precinct, layer);\r\n            message.success('Successfully resolved the error.');\r\n        }\r\n        else {\r\n            message.error('Failed to resolve.');\r\n        }\r\n    }\r\n\r\n    function handleOpenCommentTab(history) {\r\n        setShowCommentTab(true);\r\n        setSelectedHistory(history);\r\n    }\r\n\r\n    function handleCloseCommentTab() {\r\n        setShowCommentTab(false);\r\n        setSelectedHistory(null);\r\n    }\r\n\r\n    function handleAddComment(comment, timestamp) {\r\n\r\n    }\r\n\r\n    function onEachStateFeature(state, layer) {\r\n        state.elections = JSON.parse(JSON.stringify(Constants.FAKE_ELECTION));\r\n        layer.on({\r\n            click: async () => {\r\n                handleStateChange(state, layer);\r\n            },\r\n            mouseover: () => {\r\n                layer.setStyle({\r\n                    weight: 3\r\n                });\r\n            },\r\n            mouseout: () => {\r\n                layer.setStyle({\r\n                    weight: 1\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function onEachCdFeature(district, layer) {\r\n        district.elections = JSON.parse(JSON.stringify(Constants.FAKE_ELECTION));\r\n        layer.on({\r\n            click: async () => {\r\n                setLoading(true);\r\n                setSelectedCd(null);\r\n                setPrecinctBorders(null);\r\n                setSelectedPrecinct(null);\r\n                setHistory([[], [], [], [], [], []]);\r\n                setErrors([[], [], [], [], [], []]);\r\n                await borderJsonRequester.getPrecinctBorder(district.name).then(res => {\r\n                    setPrecinctBorders(res);\r\n                });\r\n                setSelectedCd(district);\r\n                setLoading(false);\r\n            },\r\n            mouseover: () => {\r\n                layer.setStyle({\r\n                    weight: 3\r\n                });\r\n            },\r\n            mouseout: () => {\r\n                layer.setStyle({\r\n                    weight: 1\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function onEachPrecinctFeature(precinct, layer) {\r\n        precinct.elections = JSON.parse(JSON.stringify(Constants.FAKE_ELECTION));\r\n\r\n        precinct.errors.forEach((item, index) => {\r\n            item.precinct = precinct;\r\n            if (item.category)\r\n                errors[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\r\n        });\r\n\r\n        precinct.histories.forEach((item, index) => {\r\n            item.precinct = precinct;\r\n            if (item.category)\r\n                history[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <StateContext.Provider value={selectedState}>\r\n                <DistrictContext.Provider value={selectedCd}>\r\n                    <HistoryContext.Provider value={[history, handleAddHistory]}>\r\n                        <RerenderContext.Provider value={[rerender, setRerender]}>\r\n                            <LeftPanel\r\n                                errors={errors}\r\n                                history={history}\r\n                                handleZoomInPrecinct={handleZoomInPrecinct}\r\n                                handleResolvedError={handleResolvedError}\r\n                                handleAddComment={handleAddComment}\r\n                                handleOpenCommentTab={handleOpenCommentTab}\r\n                            />\r\n                            <Layout>\r\n                                <Layout.Header>\r\n                                    <HeaderPanel\r\n                                        selectedPrecinct={selectedPrecinct}\r\n                                        zoomLevel={zoomLevel}\r\n                                        handleStateChangeDropdown={handleStateChangeDropdown}\r\n                                        combiningPrecinct={combiningPrecinct}\r\n                                        handleCombinePrecinct={handleCombinePrecinct}\r\n                                        addingNeighbor={addingNeighbor}\r\n                                        handleAddNeighbor={handleAddNeighbor}\r\n                                        handleConfirmGhostPrecinct={handleConfirmGhostPrecinct}\r\n                                        handleEditPrecinctLayer={handleEditPrecinctLayer}\r\n                                        drawController={drawController}\r\n                                        handleClickedCancel={handleClickedCancel}\r\n                                        handleDrawSave={handleDrawSave}\r\n                                        handleDrawUndo={handleDrawUndo}\r\n                                    />\r\n                                </Layout.Header>\r\n                                <Spin spinning={loading} size=\"large\">\r\n                                    <Layout.Content>\r\n                                        <Map\r\n                                            ref={(ref) => { setMapRef(ref); }}\r\n                                            center={Constants.MAP_CENTER}\r\n                                            zoom={4}\r\n                                            zoomControl={false}\r\n                                            animate={true}\r\n                                            onZoomEnd={handleZoomChange}\r\n                                            preferCanvas={true}\r\n                                        >\r\n                                            <TileLayer\r\n                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                                url=\"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiaGFubGl1IiwiYSI6ImNrNnk3YTZpMzBlcjczZW15cmU1Mm5hMWkifQ.dW0oDKWDng4w-osIkRvLsQ\"\r\n                                            />\r\n                                            <ZoomControl position='bottomright' />\r\n                                            <Control position=\"bottomleft\" >\r\n                                                <Card>\r\n                                                    <Checkbox\r\n                                                        defaultChecked={true}\r\n                                                        onChange={handleShowDistricts}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedState}\r\n                                                    >\r\n                                                        Show Districts\r\n                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox\r\n                                                        defaultChecked={true}\r\n                                                        onChange={handleShowPrecincts}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd}\r\n                                                    >\r\n                                                        Show Precincts\r\n                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox onChange={handleShowNp}>\r\n                                                        Show National Parks &nbsp;\r\n                                        <img src=\"images/NpIcon.png\" alt=\"National Park Icon\" className=\"icon\" />\r\n                                                    </Checkbox>\r\n                                                </Card>\r\n                                            </Control>\r\n\r\n                                            {stateBorders &&\r\n                                                stateBorders.map((stateBorder, index) => {\r\n                                                    if (selectedState\r\n                                                        && stateBorder.name === selectedState.name\r\n                                                        && zoomLevel >= Constants.DP_ZOOM_LEVEL\r\n                                                        && (showDistricts || (showPrecincts && selectedCd))\r\n                                                    ) {\r\n                                                        return (\r\n                                                            <React.Fragment key={\"F\" + index}>\r\n                                                                {showDistricts && <GeoJSON\r\n                                                                    key={\"CD\" + index}\r\n                                                                    data={cdBorders[Constants.STATES.indexOf(selectedState.name)]}\r\n                                                                    style={layerStyler.geoJSONCdStyle}\r\n                                                                    onEachFeature={onEachCdFeature}\r\n                                                                />\r\n                                                                }\r\n                                                                {(showPrecincts && precinctBorders) && <GeoJSON\r\n                                                                    key={\"P\" + index}\r\n                                                                    ref={(ref) => { setPrecinctsRef(ref); }}\r\n                                                                    data={precinctBorders}\r\n                                                                    style={(feature) => layerStyler.geoJSONPrecinctStyle(feature, selectedPrecinct)}\r\n                                                                    onEachFeature={onEachPrecinctFeature}\r\n                                                                    onClick={handlePrecinctLayerOnClick}\r\n                                                                    onMouseOver={handlePrecinctLayerMouseOver}\r\n                                                                    onMouseOut={() => clearTimeout(delayHandler)}\r\n                                                                />\r\n                                                                }\r\n                                                            </React.Fragment>\r\n                                                        );\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <GeoJSON\r\n                                                                key={\"S\" + index}\r\n                                                                ref={stateLayerRefs.current[index]}\r\n                                                                data={stateBorder}\r\n                                                                style={layerStyler.geoJSONStateStyle}\r\n                                                                onEachFeature={onEachStateFeature}\r\n                                                            />\r\n                                                        );\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                            {(npBorders && showNp) && (\r\n                                                <React.Fragment>\r\n                                                    <GeoJSON\r\n                                                        data={npBorders}\r\n                                                        style={(feature) => layerStyler.geoJSONNpStyle(feature)}\r\n                                                    />\r\n                                    )}\r\n                                                    {npMarkers.map((feature, index) =>\r\n                                                        <Marker\r\n                                                            key={`marker-${index}`}\r\n                                                            position={feature.geometry.coordinates}\r\n                                                            icon={NpMarker}\r\n                                                        >\r\n                                                            <Popup>\r\n                                                                <span>Name: {feature.properties.name}</span>\r\n                                                            </Popup>\r\n                                                        </Marker>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            )}\r\n                                        </Map>\r\n                                    </Layout.Content>\r\n                                </Spin>\r\n                            </Layout>\r\n                            <RightPanel selectedPrecinct={selectedPrecinct} selectedCd={selectedCd} />\r\n                            <CommentTab\r\n                                showCommentTab={showCommentTab}\r\n                                handleCloseCommentTab={handleCloseCommentTab}\r\n                                selectedHistory={selectedHistory}\r\n                            />\r\n                        </RerenderContext.Provider>\r\n                    </HistoryContext.Provider>\r\n                </DistrictContext.Provider>\r\n            </StateContext.Provider>\r\n        </Layout>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}