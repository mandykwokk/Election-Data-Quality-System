{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\RightPanel\\\\CommentTab.js\";\nimport React, { useState, useRef } from 'react';\nimport { Comment, Avatar, Form, Button, List, Input, Tooltip, Drawer, message } from 'antd';\nimport { UserOutlined, CommentOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport HistoryRequester from 'requesters/HistoryRequester';\nconst {\n  TextArea\n} = Input;\nconst historyRequester = new HistoryRequester();\nexport default function CommentTab(props) {\n  const [rerender, setRerender] = useState(false);\n  const [editingid, setEditingid] = useState(null);\n  const textareaRef = useRef(null);\n\n  async function handleSubmitComment(values) {\n    let comment = {\n      content: values['comment']\n    };\n    let res;\n    comment.timestamp = moment();\n\n    if (res = await historyRequester.postComment(comment, props.selectedHistory.id)) {\n      message.success(\"Successfuly added comment.\");\n      comment.id = res;\n      props.selectedHistory.comments.unshift(comment);\n      setRerender(!rerender);\n    } else {\n      message.error(\"Failed to add comment.\");\n    }\n  }\n\n  async function handleDeleteComment(commentId) {\n    if (await historyRequester.deleteComment(commentId, props.selectedHistory.id)) {\n      message.success(\"Successfuly deleted comment.\");\n      props.selectedHistory.comments = props.selectedHistory.comments.filter(item => {\n        return item.id !== commentId;\n      });\n      setRerender(!rerender);\n    } else {\n      message.error(\"Failed to delete comment.\");\n    }\n  }\n\n  function handleClickEditButton(commentId) {\n    setEditingid(commentId);\n  }\n\n  function handleCancelEdit() {\n    setEditingid(null);\n  }\n\n  async function handleSaveEdit() {\n    const comment = textareaRef.current.state.value;\n\n    if (await historyRequester.editComment(comment, props.selectedHistory.id, editingid)) {\n      message.success(\"Successfuly edited comment.\");\n      props.selectedHistory.comments.forEach(element => {\n        if (element.id === editingid) element.content = comment;\n      });\n    } else {\n      message.error(\"Failed to add comment.\");\n    }\n\n    setEditingid(null);\n  }\n\n  if (!props.selectedHistory) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Drawer, {\n    title: \"Comments\",\n    placement: \"right\",\n    closable: true,\n    onClose: props.handleCloseCommentTab,\n    visible: props.showCommentTab,\n    width: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onFinish: handleSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(CommentOutlined, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), \" Comments\"), React.createElement(Form.Item, {\n    name: \"comment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(TextArea, {\n    rows: 4,\n    placeholder: \"Enter your comment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Button, {\n    htmlType: \"submit\",\n    type: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Add Comment\"))), React.createElement(List, {\n    dataSource: props.selectedHistory.comments,\n    header: props.selectedHistory.comments ? `${props.selectedHistory.comments.length} comments` : `0 comment`,\n    itemLayout: \"horizontal\",\n    renderItem: (item, index) => React.createElement(Comment, {\n      key: index,\n      avatar: React.createElement(Avatar, {\n        icon: React.createElement(UserOutlined, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }),\n      content: item.id === editingid ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(TextArea, {\n        rows: 2,\n        ref: textareaRef,\n        defaultValue: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })) : item.content,\n      actions: [!editingid ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        key: \"edit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: () => handleClickEditButton(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(EditOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), \"Edit\")), React.createElement(\"span\", {\n        key: \"delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: () => handleDeleteComment(item.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(DeleteOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), \"Delete\"))) : React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        key: \"save\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: handleSaveEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(EditOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), \"Save\")), React.createElement(\"span\", {\n        key: \"cancel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: handleCancelEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(DeleteOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), \"Cancel\")))],\n      datetime: React.createElement(Tooltip, {\n        title: moment(item.timestamp).format('YYYY-MM-DD HH:mm:ss'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, moment(item.timestamp).fromNow())),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/RightPanel/CommentTab.js"],"names":["React","useState","useRef","Comment","Avatar","Form","Button","List","Input","Tooltip","Drawer","message","UserOutlined","CommentOutlined","EditOutlined","DeleteOutlined","moment","HistoryRequester","TextArea","historyRequester","CommentTab","props","rerender","setRerender","editingid","setEditingid","textareaRef","handleSubmitComment","values","comment","content","res","timestamp","postComment","selectedHistory","id","success","comments","unshift","error","handleDeleteComment","commentId","deleteComment","filter","item","handleClickEditButton","handleCancelEdit","handleSaveEdit","current","state","value","editComment","forEach","element","handleCloseCommentTab","showCommentTab","length","index","format","fromNow"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Comment, Avatar, Form, Button, List, Input, Tooltip, Drawer, message } from 'antd';\r\nimport { UserOutlined, CommentOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport HistoryRequester from 'requesters/HistoryRequester';\r\n\r\nconst { TextArea } = Input;\r\nconst historyRequester = new HistoryRequester();\r\n\r\nexport default function CommentTab(props) {\r\n\r\n    const [rerender, setRerender] = useState(false);\r\n    const [editingid, setEditingid] = useState(null);\r\n    const textareaRef = useRef(null);\r\n\r\n    async function handleSubmitComment(values) {\r\n        let comment = {content: values['comment']};\r\n        let res;\r\n        comment.timestamp = moment();\r\n        if ((res = await historyRequester.postComment(comment, props.selectedHistory.id))) {\r\n            message.success (\"Successfuly added comment.\");\r\n            comment.id = res;\r\n            props.selectedHistory.comments.unshift(comment);\r\n            setRerender(!rerender);\r\n        }\r\n        else {\r\n            message.error (\"Failed to add comment.\")\r\n        }\r\n    }\r\n\r\n    async function handleDeleteComment(commentId) {\r\n        if (await historyRequester.deleteComment(commentId, props.selectedHistory.id)) {\r\n            message.success (\"Successfuly deleted comment.\");\r\n            props.selectedHistory.comments = props.selectedHistory.comments.filter(item => { \r\n                return item.id !== commentId;\r\n            });\r\n            setRerender(!rerender);\r\n        }\r\n        else {\r\n            message.error (\"Failed to delete comment.\")\r\n        }\r\n    }\r\n\r\n    function handleClickEditButton(commentId) {\r\n        setEditingid(commentId);\r\n    }\r\n\r\n    function handleCancelEdit() {\r\n        setEditingid(null);\r\n    }\r\n\r\n    async function handleSaveEdit() {\r\n        const comment = textareaRef.current.state.value;\r\n        if (await historyRequester.editComment(comment, props.selectedHistory.id, editingid)) {\r\n            message.success (\"Successfuly edited comment.\");\r\n            props.selectedHistory.comments.forEach(element => {\r\n                if (element.id === editingid)\r\n                    element.content = comment;\r\n            });\r\n        }\r\n        else {\r\n            message.error (\"Failed to add comment.\")\r\n        }\r\n        setEditingid(null);\r\n    }\r\n\r\n    if (!props.selectedHistory) {\r\n        return <React.Fragment />;\r\n    }\r\n    \r\n\r\n    return (\r\n        <Drawer\r\n            title=\"Comments\"\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.handleCloseCommentTab}\r\n            visible={props.showCommentTab}\r\n            width={500}\r\n        >\r\n        <React.Fragment>\r\n            <div>\r\n                <Form onFinish={handleSubmitComment}>\r\n                    <h1><CommentOutlined /> Comments</h1>\r\n                    <Form.Item name=\"comment\">\r\n                        <TextArea rows={4} placeholder={\"Enter your comment\"} />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button htmlType=\"submit\" type=\"primary\">\r\n                            Add Comment\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <List\r\n                    dataSource={props.selectedHistory.comments}\r\n                    header={props.selectedHistory.comments\r\n                                ? `${props.selectedHistory.comments.length} comments`\r\n                                : `0 comment`}\r\n                    itemLayout=\"horizontal\"\r\n                    renderItem={(item, index) => \r\n                        <Comment\r\n                            key={index}\r\n                            avatar={<Avatar icon={<UserOutlined />} />}\r\n                            content=\r\n                            {\r\n                                item.id === editingid\r\n                                ?\r\n                                <React.Fragment>\r\n                                    <TextArea rows={2} ref={textareaRef} defaultValue={item.content} />\r\n                                </React.Fragment>\r\n                                :\r\n                                item.content\r\n                            }\r\n                            actions={\r\n                                [\r\n                                    !editingid ?\r\n                                    <React.Fragment>\r\n                                        <span key=\"edit\">\r\n                                        <span onClick= {() => handleClickEditButton(item.id)}><EditOutlined />Edit</span>\r\n                                        </span>\r\n                                        <span key=\"delete\">\r\n                                        <span onClick= {() => handleDeleteComment(item.id)}><DeleteOutlined />Delete</span>\r\n                                        </span>\r\n                                    </React.Fragment>\r\n                                    :\r\n                                    <React.Fragment>\r\n                                        <span key=\"save\">\r\n                                        <span onClick= {handleSaveEdit}><EditOutlined />Save</span>\r\n                                        </span>\r\n                                        <span key=\"cancel\">\r\n                                        <span onClick= {handleCancelEdit}><DeleteOutlined />Cancel</span>\r\n                                        </span>\r\n                                    </React.Fragment>\r\n                                ]\r\n                            }\r\n                            datetime={ \r\n                                <Tooltip title={moment(item.timestamp).format('YYYY-MM-DD HH:mm:ss')}>\r\n                                    <span>{moment(item.timestamp).fromNow()}</span>\r\n                                </Tooltip>\r\n                            }\r\n                        />\r\n                    }\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n        </Drawer>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}