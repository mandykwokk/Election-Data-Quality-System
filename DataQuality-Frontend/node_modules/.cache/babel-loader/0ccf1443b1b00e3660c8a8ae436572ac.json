{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\MapScreen.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Map, TileLayer, ZoomControl, GeoJSON, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet-draw';\nimport Control from 'react-leaflet-control';\nimport * as Turf from '@turf/turf';\nimport { Layout, Checkbox, Card, Spin, message } from 'antd';\nimport BorderJsonRequester from 'requesters/BorderJsonRequester';\nimport HistoryRequester from 'requesters/HistoryRequester';\nimport ErrorRequester from 'requesters/ErrorRequester';\nimport LayerStyler from 'utils/LayerStyler';\nimport * as Constants from 'constants/constants';\nimport StateContext from 'contexts/StateContext';\nimport DistrictContext from 'contexts/DistrictContext';\nimport HistoryContext from 'contexts/HistoryContext';\nimport RerenderContext from 'contexts/RerenderContext';\nimport LeftPanel from './LeftPanel/LeftPanel';\nimport RightPanel from './RightPanel/RightPanel';\nimport CommentTab from './RightPanel/CommentTab';\nimport HeaderPanel from './HeaderPanel/HeaderPanel';\nimport moment from 'moment';\nimport PrecinctRequester from 'requesters/PrecinctRequester';\nconst borderJsonRequester = new BorderJsonRequester();\nconst historyRequester = new HistoryRequester();\nconst errorRequester = new ErrorRequester();\nconst layerStyler = new LayerStyler();\nconst precinctRequester = new PrecinctRequester();\nmessage.config({\n  top: 60,\n  duration: 3\n});\nconst NpMarker = new L.Icon({\n  iconUrl: 'images/NpMarker.png',\n  iconSize: [48, 48]\n});\nexport default function MapScreen() {\n  const [mapRef, setMapRef] = useState(null);\n  const [zoomLevel, setZoomLevel] = useState(4);\n  const [showDistricts, setShowDistricts] = useState(true);\n  const [showPrecincts, setShowPrecincts] = useState(true);\n  const [showNp, setShowNp] = useState(false);\n  const [showCommentTab, setShowCommentTab] = useState(false);\n  const [showOriginal, setShowOriginal] = useState(false);\n  const [selectedState, setSelectedState] = useState(null);\n  const [selectedCd, setSelectedCd] = useState(null);\n  const [selectedPrecinct, setSelectedPrecinct] = useState(null);\n  const [selectedHistory, setSelectedHistory] = useState(null);\n  const [stateBorders, setStateBorders] = useState(null);\n  const stateLayerRefs = useRef([React.createRef(), React.createRef(), React.createRef()]);\n  const [cdBorders, setCdBorders] = useState(null);\n  const [precinctBorders, setPrecinctBorders] = useState(null);\n  const [precinctsRef, setPrecinctsRef] = useState(null);\n  const [npBorders, setNpBorders] = useState(null);\n  const [npMarkers] = useState([]);\n  const [history, setHistory] = useState([[], [], [], [], [], [], []]);\n  const [errors, setErrors] = useState([[], [], [], [], [], [], []]);\n  const [delayHandler, setDelayHandler] = useState(null);\n  const [addingNeighbor, setAddingNeighbor] = useState(false);\n  const [removingNeighbor, setRemovingNeighbor] = useState(false);\n  const [combiningPrecinct, setCombiningPrecinct] = useState(false);\n  const [rerender, setRerender] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [drawController, setDrawController] = useState(null);\n  useEffect(() => {\n    (async () => {\n      setStateBorders((await borderJsonRequester.getStateBorders()));\n      setCdBorders((await borderJsonRequester.getCdBorders()));\n      const npBorders = await borderJsonRequester.getNpBorders();\n      setNpBorders(npBorders);\n    })();\n  }, [npMarkers]);\n\n  function handleStateChangeDropdown(stateName) {\n    handleStateChange(stateBorders[Constants.STATES.indexOf(stateName)], null);\n  }\n\n  async function handleStateChange(state, layer) {\n    if (selectedState && state.name === selectedState.name) return;\n    if (!layer) mapRef.leafletElement.fitBounds(stateLayerRefs.current[Constants.STATES.indexOf(state.name)].current.leafletElement.getBounds());else mapRef.leafletElement.fitBounds(layer.getBounds());\n    setSelectedState(null);\n    setSelectedState(state);\n    setSelectedCd(null);\n    setSelectedPrecinct(null);\n    setPrecinctBorders(null);\n    setShowOriginal(false);\n    setHistory([[], [], [], [], [], [], []]);\n    setErrors([[], [], [], [], [], [], []]);\n  }\n\n  function handlePrecinctChange(layer) {\n    setSelectedPrecinct(null);\n    setSelectedPrecinct(layer.feature);\n  }\n\n  function handlePrecinctLayerOnClick(e) {\n    if (addingNeighbor) {\n      if (selectedPrecinct.neighbors.includes(e.layer.feature.id)) {\n        message.warn('This precinct is already a neighbor');\n        return;\n      }\n\n      if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, true)) {\n        selectedPrecinct.neighbors.push(e.layer.feature.id);\n        e.layer.feature.neighbors.push(selectedPrecinct.id);\n        setAddingNeighbor(false);\n        handleAddHistory({\n          description: `Added ${e.layer.feature.id} to ${selectedPrecinct.id}'s neighbor`\n        }, selectedPrecinct);\n        handleAddHistory({\n          description: `Added ${selectedPrecinct.id} to ${e.layer.feature.id}'s neighbor`\n        }, e.layer.feature);\n        message.success('Successfully added neighbor');\n      }\n    } else if (removingNeighbor) {\n      if (!selectedPrecinct.neighbors.includes(e.layer.feature.id)) {\n        message.warn('This precinct is not a neighbor');\n        return;\n      }\n\n      if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, false)) {\n        for (var i = 0; i < selectedPrecinct.neighbors.length; i++) {\n          if (selectedPrecinct.neighbors[i] === e.layer.feature.id) selectedPrecinct.neighbors.splice(i, 1);\n        }\n\n        for (var j = 0; j < e.layer.feature.neighbors.length; j++) {\n          if (e.layer.feature.neighbors[j] === selectedPrecinct.id) e.layer.feature.neighbors.splice(j, 1);\n        }\n\n        setRemovingNeighbor(false);\n        setSelectedPrecinct(null);\n        setSelectedPrecinct(selectedPrecinct);\n        handleAddHistory({\n          description: `Removed ${e.layer.feature.id} from ${selectedPrecinct.id}'s neighbor`\n        }, selectedPrecinct);\n        handleAddHistory({\n          description: `Removed ${selectedPrecinct.id} from ${e.layer.feature.id}'s neighbor`\n        }, e.layer.feature);\n        message.success('Successfully removed neighbor');\n      }\n    } else if (combiningPrecinct) {\n      if (!selectedPrecinct.neighbors.includes(e.layer.feature.id)) {\n        message.error('Please select a neighbor precinct to combine.');\n        return;\n      }\n\n      const clickedPrecinct = e.layer.feature;\n      var newFeature = Turf.union(Turf.feature(selectedPrecinct.geometry), Turf.feature(clickedPrecinct.geometry));\n      message.info(JSON.stringify(selectedPrecinct.errors));\n      selectedPrecinct.originalGeometry = selectedPrecinct.geometry;\n      selectedPrecinct.geometry = newFeature.geometry;\n\n      for (let i in selectedPrecinct.demographic) {\n        selectedPrecinct.demographic[i] += clickedPrecinct.demographic[i];\n      }\n\n      for (let i in selectedPrecinct.elections) {\n        selectedPrecinct.elections[i][Constants.PARTIES_ENUM[0]] += clickedPrecinct.elections[i][Constants.PARTIES_ENUM[0]];\n        selectedPrecinct.elections[i][Constants.PARTIES_ENUM[1]] += clickedPrecinct.elections[i][Constants.PARTIES_ENUM[1]];\n      }\n\n      selectedPrecinct.neighbors = selectedPrecinct.neighbors.concat(clickedPrecinct.neighbors);\n      selectedPrecinct.histories = selectedPrecinct.histories.concat(clickedPrecinct.histories);\n      selectedPrecinct.errors = selectedPrecinct.errors.concat(clickedPrecinct.errors);\n      selectedPrecinct.isGhost = false;\n\n      if (precinctRequester.updatePrecinct(selectedPrecinct)) {\n        precinctBorders.push(selectedPrecinct);\n        precinctsRef.leafletElement.clearLayers();\n        precinctsRef.leafletElement.addData(precinctBorders);\n        setSelectedPrecinct(null);\n        setSelectedPrecinct(selectedPrecinct);\n        handleAddHistory({\n          'description': `Combined precincts ${selectedPrecinct.id} with ${clickedPrecinct.id}`\n        }, selectedPrecinct);\n        message.success('Successfully combined precincts.');\n      }\n\n      setCombiningPrecinct(false);\n    } else if (selectedPrecinct && selectedPrecinct.id === e.layer.feature.id) {\n      setSelectedPrecinct(null);\n    } else {\n      handlePrecinctChange(e.layer);\n    }\n  }\n\n  function handlePrecinctLayerMouseOver(e) {\n    if (addingNeighbor || combiningPrecinct || drawController) {\n      return;\n    }\n\n    setDelayHandler(setTimeout(() => {\n      handlePrecinctChange(e.layer);\n    }, 500));\n  }\n\n  function handleZoomChange() {\n    setZoomLevel(mapRef.viewport.zoom);\n  }\n\n  function handleShowPrecincts(e) {\n    setShowPrecincts(e.target.checked);\n  }\n\n  function handleShowDistricts(e) {\n    setShowDistricts(e.target.checked);\n  }\n\n  function handleShowNp(e) {\n    setShowNp(e.target.checked);\n  }\n\n  function handleShowOriginalMap(e) {\n    setShowOriginal(e.target.checked);\n    precinctBorders.forEach(precinct => {\n      let temp = precinct.geometry;\n      precinct.geometry = precinct.originalGeometry;\n      precinct.originalGeometry = temp;\n    });\n    precinctsRef.leafletElement.clearLayers();\n    precinctsRef.leafletElement.addData(precinctBorders);\n  }\n\n  function handleCombinePrecinct() {\n    setCombiningPrecinct(true);\n    message.info('Please click on a neighbor precinct to combine.');\n  }\n\n  function handleConfirmGhostPrecinct() {\n    selectedPrecinct.name = selectedPrecinct.name.substring(selectedPrecinct.name.indexOf(\" \") + 1);\n\n    if (precinctRequester.updateGhostPrecinct(selectedPrecinct.id)) {\n      setRerender(!rerender);\n      handleAddHistory({\n        description: `Confirmed precinct ${selectedPrecinct.id} is a Ghost Precinct.`\n      }, selectedPrecinct);\n      message.success('Action Completed');\n    } else {\n      message.error('Action Failed');\n    }\n  }\n\n  function handleGeneratePrecinct() {\n    mapRef.leafletElement.removeEventListener('draw:created');\n    mapRef.leafletElement.addEventListener('draw:created', async function (e) {\n      let geometry = {\n        type: \"Polygon\",\n        coordinates: [e.layer._latlngs[0].map(item => [item.lng, item.lat])]\n      };\n      const kinks = Turf.kinks(geometry);\n\n      if (kinks.features.length) {\n        message.error(\"Self-Intersection Detected, Please Do It Again!\");\n        drawController.disable();\n        setDrawController(null);\n        return;\n      }\n\n      let geometryString = JSON.stringify(geometry);\n      let newPrecinct = {\n        type: \"Feature\",\n        geometry: geometryString,\n        originalGeometry: null,\n        errors: [],\n        histories: [],\n        name: \"Generated Precinct\",\n        neighbors: [],\n        comments: [],\n        demographic: {\n          \"NH_AMIN\": 0,\n          \"NH_NHPI\": 0,\n          \"NH_ASIAN\": 0,\n          \"NH_BLACK\": 0,\n          \"NH_OTHER\": 0,\n          \"NH_WHITE\": 0\n        },\n        elections: {\n          PRESIDENTIAL_2016: {\n            'DEMOCRAT': 0,\n            'REPUBLICAN': 0\n          },\n          CONGRESSIONAL_2016: {\n            'DEMOCRAT': 0,\n            'REPUBLICAN': 0\n          },\n          CONGRESSIONAL_2018: {\n            'DEMOCRAT': 0,\n            'REPUBLICAN': 0\n          }\n        },\n        isGhost: false,\n        stateName: selectedState.name,\n        districtName: selectedCd.name,\n        countyName: \" N/A\"\n      };\n      console.log(newPrecinct);\n      let res = await precinctRequester.addNewPrecinct(newPrecinct);\n\n      if (res) {\n        newPrecinct.geometry = geometry;\n        newPrecinct.id = res;\n        precinctBorders.push(newPrecinct);\n        precinctsRef.leafletElement.clearLayers();\n        precinctsRef.leafletElement.addData(precinctBorders); // handlePrecinctChange({ feature: newFeature });\n\n        setSelectedPrecinct(newPrecinct);\n        message.success(`Successfully generated a precinct.`); // handleAddHistory(`Generated a precinct.`);\n      } else {}\n\n      drawController.disable();\n      setDrawController(null);\n    });\n    const drawController = new L.Draw.Polygon(mapRef.leafletElement, null);\n    setDrawController(drawController);\n    drawController.enable();\n  }\n\n  function handleEditPrecinctLayer() {\n    const featureGroup = L.featureGroup([new L.polygon(selectedPrecinct.geometry.coordinates[0].map(positions => [positions[1], positions[0]]))]);\n    mapRef.leafletElement.addLayer(featureGroup);\n    const drawController = new L.EditToolbar.Edit(mapRef.leafletElement, {\n      featureGroup: featureGroup\n    });\n    setDrawController(drawController);\n    mapRef.leafletElement.removeEventListener('draw:edited');\n    mapRef.leafletElement.addEventListener('draw:edited', function (e) {\n      const layersKey = Object.keys(e.layers._layers);\n      if (layersKey.length === 0) return;\n      const layer = e.layers._layers[layersKey[0]];\n      const geoJson = {\n        type: \"Polygon\",\n        coordinates: [layer._latlngs[0].map(item => [item.lng, item.lat])]\n      };\n      const kinks = Turf.kinks(geoJson);\n\n      if (kinks.features.length) {\n        message.error(\"Self-Intersection Detected, Please Do It Again!\");\n        drawController.disable();\n        setDrawController(null);\n        return;\n      }\n\n      precinctRequester.updateBoundary(selectedPrecinct.id, JSON.stringify(geoJson));\n      selectedPrecinct.geometry = geoJson;\n      precinctsRef.leafletElement.clearLayers();\n      precinctsRef.leafletElement.addData(precinctBorders);\n      message.success(`Successfully edited ${selectedPrecinct.name}'s boundary.`);\n      drawController.disable();\n      setDrawController(null);\n      handleAddHistory({\n        description: `Edited ${selectedPrecinct.name}'s boundary.`\n      }, selectedPrecinct);\n    });\n    mapRef.leafletElement.removeEventListener('draw:editstop');\n    mapRef.leafletElement.addEventListener('draw:editstop', function (e) {\n      mapRef.leafletElement.removeLayer(featureGroup);\n    });\n    drawController.enable();\n  }\n\n  function handleDrawSave() {\n    if (drawController instanceof L.Draw.Polygon) drawController.completeShape();else drawController.save();\n    handleClickedCancel();\n  }\n\n  function handleClickedCancel() {\n    if (addingNeighbor) {\n      setAddingNeighbor(false);\n      message.info('Cancelled adding neighbor.');\n    } else if (combiningPrecinct) {\n      setCombiningPrecinct(false);\n      message.info('Cancelled combining precincts.');\n    } else {\n      drawController.disable();\n      setDrawController(null);\n    }\n  }\n\n  function handleDrawUndo() {\n    if (drawController instanceof L.Draw.Polygon) drawController.deleteLastVertex();else drawController.revertLayers();\n  }\n\n  function handleAddNeighbor() {\n    setAddingNeighbor(true);\n    message.info('Please click on another precinct to add.');\n  }\n\n  function handleRemoveNeighbor() {\n    setRemovingNeighbor(true);\n    message.info('Please click on another precinct to remove.');\n  }\n\n  async function handleAddHistory(newHistory, precinct, layer = null) {\n    newHistory.timestamp = moment();\n    let res;\n\n    if (res = await historyRequester.postHistory(newHistory, precinct.id)) {\n      if (newHistory.category) history[Constants.ERROR_ENUM.indexOf(newHistory.category)].push([newHistory, layer]);\n      newHistory.precinct = precinct;\n      newHistory.id = res;\n      newHistory.comments = [];\n      precinct.histories.push(newHistory);\n    } else {\n      message.error('Failed to post history.');\n    }\n  }\n\n  function handleZoomInPrecinct(feature, layer) {\n    setSelectedPrecinct(feature);\n    mapRef.leafletElement.fitBounds(layer.getBounds());\n  }\n\n  function handleResolvedError(error, index, layer) {\n    const res = errorRequester.ResolveError(error.id);\n\n    if (res) {\n      errors[index] = errors[index].filter(item => {\n        return error.id !== item[0].id;\n      });\n      error.precinct.errors = error.precinct.errors.filter(item => {\n        return error.id !== item.id;\n      });\n      const description = \"Resolved error \" + Constants.ERROR_HEADER[Constants.ERROR_ENUM.indexOf(error.category)] + \". Error description: \" + error.description;\n      handleAddHistory({\n        description,\n        category: error.category\n      }, error.precinct, layer);\n      message.success('Successfully resolved the error.');\n      setRerender(!rerender);\n    } else {\n      message.error('Failed to resolve.');\n    }\n  }\n\n  function handleOpenCommentTab(history) {\n    setShowCommentTab(true);\n    setSelectedHistory(history);\n  }\n\n  function handleCloseCommentTab() {\n    setShowCommentTab(false);\n    setSelectedHistory(null);\n  }\n\n  function onEachStateFeature(state, layer) {\n    layer.on({\n      click: async () => {\n        handleStateChange(state, layer);\n      },\n      mouseover: () => {\n        layer.setStyle({\n          weight: 3\n        });\n      },\n      mouseout: () => {\n        layer.setStyle({\n          weight: 1\n        });\n      }\n    });\n  }\n\n  function onEachCdFeature(district, layer) {\n    layer.on({\n      click: async () => {\n        setLoading(true);\n        setSelectedCd(null);\n        setPrecinctBorders(null);\n        setSelectedPrecinct(null);\n        setHistory([[], [], [], [], [], [], []]);\n        setErrors([[], [], [], [], [], [], []]);\n        setShowOriginal(false);\n        await borderJsonRequester.getPrecinctBorder(district.name).then(res => {\n          setPrecinctBorders(res);\n        });\n        setSelectedCd(district);\n        setLoading(false);\n      },\n      mouseover: () => {\n        layer.setStyle({\n          weight: 3\n        });\n      },\n      mouseout: () => {\n        layer.setStyle({\n          weight: 1\n        });\n      }\n    });\n  }\n\n  function onEachPrecinctFeature(precinct, layer) {\n    precinct.errors.forEach((item, index) => {\n      item.precinct = precinct;\n      if (item.category) errors[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\n    });\n    precinct.histories.forEach((item, index) => {\n      item.precinct = precinct;\n      if (item.category) history[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\n    });\n  }\n\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498\n    },\n    __self: this\n  }, React.createElement(StateContext.Provider, {\n    value: selectedState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499\n    },\n    __self: this\n  }, React.createElement(DistrictContext.Provider, {\n    value: selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }, React.createElement(HistoryContext.Provider, {\n    value: handleAddHistory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501\n    },\n    __self: this\n  }, React.createElement(RerenderContext.Provider, {\n    value: [rerender, setRerender],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502\n    },\n    __self: this\n  }, React.createElement(LeftPanel, {\n    errors: errors,\n    precincts: precinctBorders,\n    history: history,\n    handleZoomInPrecinct: handleZoomInPrecinct,\n    handleResolvedError: handleResolvedError,\n    handleOpenCommentTab: handleOpenCommentTab,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503\n    },\n    __self: this\n  }), React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, React.createElement(Layout.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512\n    },\n    __self: this\n  }, React.createElement(HeaderPanel, {\n    selectedPrecinct: selectedPrecinct,\n    zoomLevel: zoomLevel,\n    handleStateChangeDropdown: handleStateChangeDropdown,\n    combiningPrecinct: combiningPrecinct,\n    handleCombinePrecinct: handleCombinePrecinct,\n    addingNeighbor: addingNeighbor,\n    removingNeighbor: removingNeighbor,\n    handleAddNeighbor: handleAddNeighbor,\n    handleRemoveNeighbor: handleRemoveNeighbor,\n    handleConfirmGhostPrecinct: handleConfirmGhostPrecinct,\n    handleEditPrecinctLayer: handleEditPrecinctLayer,\n    drawController: drawController,\n    handleClickedCancel: handleClickedCancel,\n    handleDrawSave: handleDrawSave,\n    handleDrawUndo: handleDrawUndo,\n    handleGeneratePrecinct: handleGeneratePrecinct,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  })), React.createElement(Spin, {\n    spinning: loading,\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532\n    },\n    __self: this\n  }, React.createElement(Layout.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533\n    },\n    __self: this\n  }, React.createElement(Map, {\n    ref: ref => {\n      setMapRef(ref);\n    },\n    center: Constants.MAP_CENTER,\n    zoom: 4,\n    zoomControl: false,\n    animate: true,\n    onZoomEnd: handleZoomChange,\n    preferCanvas: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiaGFubGl1IiwiYSI6ImNrNnk3YTZpMzBlcjczZW15cmU1Mm5hMWkifQ.dW0oDKWDng4w-osIkRvLsQ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543\n    },\n    __self: this\n  }), React.createElement(ZoomControl, {\n    position: \"bottomright\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547\n    },\n    __self: this\n  }), React.createElement(Control, {\n    position: \"bottomleft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    defaultChecked: true,\n    onChange: handleShowDistricts,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550\n    },\n    __self: this\n  }, \"Show Districts\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    defaultChecked: true,\n    onChange: handleShowPrecincts,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558\n    },\n    __self: this\n  }, \"Show Precincts\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    onChange: handleShowNp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566\n    },\n    __self: this\n  }, \"Show National Parks \\xA0\", React.createElement(\"img\", {\n    src: \"images/NpIcon.png\",\n    alt: \"National Park Icon\",\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570\n    },\n    __self: this\n  }), React.createElement(Checkbox, {\n    checked: showOriginal,\n    onChange: handleShowOriginalMap,\n    disabled: zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571\n    },\n    __self: this\n  }, \"Show Original Precinct Map \\xA0\"))), stateBorders && stateBorders.map((stateBorder, index) => {\n    if (selectedState && stateBorder.name === selectedState.name && zoomLevel >= Constants.DP_ZOOM_LEVEL && (showDistricts || showPrecincts && selectedCd)) {\n      return React.createElement(React.Fragment, {\n        key: \"F\" + index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589\n        },\n        __self: this\n      }, showDistricts && React.createElement(GeoJSON, {\n        key: \"CD\" + index,\n        data: cdBorders[Constants.STATES.indexOf(selectedState.name)],\n        style: layerStyler.geoJSONCdStyle,\n        onEachFeature: onEachCdFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590\n        },\n        __self: this\n      }), showPrecincts && precinctBorders && React.createElement(GeoJSON, {\n        key: \"P\" + index,\n        ref: ref => {\n          setPrecinctsRef(ref);\n        },\n        data: precinctBorders,\n        style: feature => layerStyler.geoJSONPrecinctStyle(feature, selectedPrecinct),\n        onEachFeature: onEachPrecinctFeature,\n        onClick: handlePrecinctLayerOnClick,\n        onMouseOver: handlePrecinctLayerMouseOver,\n        onMouseOut: () => clearTimeout(delayHandler),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(GeoJSON, {\n        key: \"S\" + index,\n        ref: stateLayerRefs.current[index],\n        data: stateBorder,\n        style: layerStyler.geoJSONStateStyle,\n        onEachFeature: onEachStateFeature,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        },\n        __self: this\n      });\n    }\n  }), npBorders && showNp && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625\n    },\n    __self: this\n  }, React.createElement(GeoJSON, {\n    data: npBorders,\n    style: feature => layerStyler.geoJSONNpStyle(feature),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626\n    },\n    __self: this\n  }), \")}\", npMarkers.map((feature, index) => React.createElement(Marker, {\n    key: `marker-${index}`,\n    position: feature.geometry.coordinates,\n    icon: NpMarker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632\n    },\n    __self: this\n  }, React.createElement(Popup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 638\n    },\n    __self: this\n  }, \"Name: \", feature.properties.name))))))))), React.createElement(RightPanel, {\n    selectedPrecinct: selectedPrecinct,\n    selectedCd: selectedCd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648\n    },\n    __self: this\n  }), React.createElement(CommentTab, {\n    showCommentTab: showCommentTab,\n    handleCloseCommentTab: handleCloseCommentTab,\n    selectedHistory: selectedHistory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/MapScreen.js"],"names":["React","useState","useEffect","useRef","Map","TileLayer","ZoomControl","GeoJSON","Marker","Popup","L","Control","Turf","Layout","Checkbox","Card","Spin","message","BorderJsonRequester","HistoryRequester","ErrorRequester","LayerStyler","Constants","StateContext","DistrictContext","HistoryContext","RerenderContext","LeftPanel","RightPanel","CommentTab","HeaderPanel","moment","PrecinctRequester","borderJsonRequester","historyRequester","errorRequester","layerStyler","precinctRequester","config","top","duration","NpMarker","Icon","iconUrl","iconSize","MapScreen","mapRef","setMapRef","zoomLevel","setZoomLevel","showDistricts","setShowDistricts","showPrecincts","setShowPrecincts","showNp","setShowNp","showCommentTab","setShowCommentTab","showOriginal","setShowOriginal","selectedState","setSelectedState","selectedCd","setSelectedCd","selectedPrecinct","setSelectedPrecinct","selectedHistory","setSelectedHistory","stateBorders","setStateBorders","stateLayerRefs","createRef","cdBorders","setCdBorders","precinctBorders","setPrecinctBorders","precinctsRef","setPrecinctsRef","npBorders","setNpBorders","npMarkers","history","setHistory","errors","setErrors","delayHandler","setDelayHandler","addingNeighbor","setAddingNeighbor","removingNeighbor","setRemovingNeighbor","combiningPrecinct","setCombiningPrecinct","rerender","setRerender","loading","setLoading","drawController","setDrawController","getStateBorders","getCdBorders","getNpBorders","handleStateChangeDropdown","stateName","handleStateChange","STATES","indexOf","state","layer","name","leafletElement","fitBounds","current","getBounds","handlePrecinctChange","feature","handlePrecinctLayerOnClick","e","neighbors","includes","id","warn","updateNeighbor","push","handleAddHistory","description","success","i","length","splice","j","error","clickedPrecinct","newFeature","union","geometry","info","JSON","stringify","originalGeometry","demographic","elections","PARTIES_ENUM","concat","histories","isGhost","updatePrecinct","clearLayers","addData","handlePrecinctLayerMouseOver","setTimeout","handleZoomChange","viewport","zoom","handleShowPrecincts","target","checked","handleShowDistricts","handleShowNp","handleShowOriginalMap","forEach","precinct","temp","handleCombinePrecinct","handleConfirmGhostPrecinct","substring","updateGhostPrecinct","handleGeneratePrecinct","removeEventListener","addEventListener","type","coordinates","_latlngs","map","item","lng","lat","kinks","features","disable","geometryString","newPrecinct","comments","PRESIDENTIAL_2016","CONGRESSIONAL_2016","CONGRESSIONAL_2018","districtName","countyName","console","log","res","addNewPrecinct","Draw","Polygon","enable","handleEditPrecinctLayer","featureGroup","polygon","positions","addLayer","EditToolbar","Edit","layersKey","Object","keys","layers","_layers","geoJson","updateBoundary","removeLayer","handleDrawSave","completeShape","save","handleClickedCancel","handleDrawUndo","deleteLastVertex","revertLayers","handleAddNeighbor","handleRemoveNeighbor","newHistory","timestamp","postHistory","category","ERROR_ENUM","handleZoomInPrecinct","handleResolvedError","index","ResolveError","filter","ERROR_HEADER","handleOpenCommentTab","handleCloseCommentTab","onEachStateFeature","on","click","mouseover","setStyle","weight","mouseout","onEachCdFeature","district","getPrecinctBorder","then","onEachPrecinctFeature","ref","MAP_CENTER","DP_ZOOM_LEVEL","stateBorder","geoJSONCdStyle","geoJSONPrecinctStyle","clearTimeout","geoJSONStateStyle","geoJSONNpStyle","properties"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Map, TileLayer, ZoomControl, GeoJSON, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet-draw';\r\nimport Control from 'react-leaflet-control';\r\nimport * as Turf from '@turf/turf';\r\nimport { Layout, Checkbox, Card, Spin, message } from 'antd';\r\nimport BorderJsonRequester from 'requesters/BorderJsonRequester';\r\nimport HistoryRequester from 'requesters/HistoryRequester';\r\nimport ErrorRequester from 'requesters/ErrorRequester';\r\nimport LayerStyler from 'utils/LayerStyler';\r\nimport * as Constants from 'constants/constants';\r\nimport StateContext from 'contexts/StateContext';\r\nimport DistrictContext from 'contexts/DistrictContext';\r\nimport HistoryContext from 'contexts/HistoryContext';\r\nimport RerenderContext from 'contexts/RerenderContext';\r\nimport LeftPanel from './LeftPanel/LeftPanel';\r\nimport RightPanel from './RightPanel/RightPanel';\r\nimport CommentTab from './RightPanel/CommentTab';\r\nimport HeaderPanel from './HeaderPanel/HeaderPanel'\r\nimport moment from 'moment';\r\nimport PrecinctRequester from 'requesters/PrecinctRequester';\r\n\r\nconst borderJsonRequester = new BorderJsonRequester();\r\nconst historyRequester = new HistoryRequester();\r\nconst errorRequester = new ErrorRequester();\r\nconst layerStyler = new LayerStyler();\r\nconst precinctRequester = new PrecinctRequester();\r\nmessage.config({\r\n    top: 60,\r\n    duration: 3\r\n});\r\n\r\nconst NpMarker = new L.Icon({\r\n    iconUrl: 'images/NpMarker.png',\r\n    iconSize: [48, 48],\r\n});\r\n\r\n\r\nexport default function MapScreen() {\r\n    const [mapRef, setMapRef] = useState(null);\r\n    const [zoomLevel, setZoomLevel] = useState(4);\r\n    const [showDistricts, setShowDistricts] = useState(true);\r\n    const [showPrecincts, setShowPrecincts] = useState(true);\r\n    const [showNp, setShowNp] = useState(false);\r\n    const [showCommentTab, setShowCommentTab] = useState(false);\r\n    const [showOriginal, setShowOriginal] = useState(false);\r\n\r\n    const [selectedState, setSelectedState] = useState(null);\r\n    const [selectedCd, setSelectedCd] = useState(null);\r\n    const [selectedPrecinct, setSelectedPrecinct] = useState(null);\r\n    const [selectedHistory, setSelectedHistory] = useState(null);\r\n\r\n    const [stateBorders, setStateBorders] = useState(null);\r\n    const stateLayerRefs = useRef([React.createRef(), React.createRef(), React.createRef()]);\r\n    const [cdBorders, setCdBorders] = useState(null);\r\n    const [precinctBorders, setPrecinctBorders] = useState(null);\r\n    const [precinctsRef, setPrecinctsRef] = useState(null);\r\n    const [npBorders, setNpBorders] = useState(null);\r\n\r\n    const [npMarkers] = useState([]);\r\n\r\n    const [history, setHistory] = useState([[], [], [], [], [], [], []]);\r\n    const [errors, setErrors] = useState([[], [], [], [], [], [], []]);\r\n\r\n    const [delayHandler, setDelayHandler] = useState(null)\r\n    const [addingNeighbor, setAddingNeighbor] = useState(false)\r\n    const [removingNeighbor, setRemovingNeighbor] = useState(false)\r\n    const [combiningPrecinct, setCombiningPrecinct] = useState(false)\r\n    const [rerender, setRerender] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [drawController, setDrawController] = useState(null);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setStateBorders(await borderJsonRequester.getStateBorders());\r\n            setCdBorders(await borderJsonRequester.getCdBorders());\r\n            const npBorders = await borderJsonRequester.getNpBorders();\r\n            setNpBorders(npBorders);\r\n        }\r\n        )();\r\n    }, [npMarkers]);\r\n\r\n    function handleStateChangeDropdown(stateName) {\r\n        handleStateChange(stateBorders[Constants.STATES.indexOf(stateName)], null);\r\n    }\r\n\r\n    async function handleStateChange(state, layer) {\r\n        if (selectedState && state.name === selectedState.name)\r\n            return;\r\n        if (!layer)\r\n            mapRef.leafletElement.fitBounds(stateLayerRefs.current[Constants.STATES.indexOf(state.name)].current.leafletElement.getBounds());\r\n        else\r\n            mapRef.leafletElement.fitBounds(layer.getBounds());\r\n        setSelectedState(null);\r\n        setSelectedState(state);\r\n        setSelectedCd(null);\r\n        setSelectedPrecinct(null);\r\n        setPrecinctBorders(null);\r\n        setShowOriginal(false);\r\n        setHistory([[], [], [], [], [], [], []]);\r\n        setErrors([[], [], [], [], [], [], []]);\r\n    }\r\n\r\n    function handlePrecinctChange(layer) {\r\n        setSelectedPrecinct(null);\r\n        setSelectedPrecinct(layer.feature);\r\n    }\r\n\r\n    function handlePrecinctLayerOnClick(e) {\r\n        if (addingNeighbor) {\r\n            if (selectedPrecinct.neighbors.includes(e.layer.feature.id)) {\r\n                message.warn('This precinct is already a neighbor');\r\n                return;\r\n            }\r\n            if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, true)) {\r\n                selectedPrecinct.neighbors.push(e.layer.feature.id);\r\n                e.layer.feature.neighbors.push(selectedPrecinct.id);\r\n                setAddingNeighbor(false);\r\n                handleAddHistory({ description: `Added ${e.layer.feature.id} to ${selectedPrecinct.id}'s neighbor` }, selectedPrecinct);\r\n                handleAddHistory({ description: `Added ${selectedPrecinct.id} to ${e.layer.feature.id}'s neighbor` }, e.layer.feature);\r\n                message.success('Successfully added neighbor');\r\n            }\r\n        }\r\n        else if (removingNeighbor) {\r\n            if (!selectedPrecinct.neighbors.includes(e.layer.feature.id)) {\r\n                message.warn('This precinct is not a neighbor');\r\n                return;\r\n            }\r\n            if (precinctRequester.updateNeighbor(selectedPrecinct.id, e.layer.feature.id, false)) {\r\n                for (var i = 0; i < selectedPrecinct.neighbors.length; i++) {\r\n                    if (selectedPrecinct.neighbors[i] === e.layer.feature.id)\r\n                        selectedPrecinct.neighbors.splice(i, 1);\r\n                }\r\n                for (var j = 0; j < e.layer.feature.neighbors.length; j++) {\r\n                    if (e.layer.feature.neighbors[j] === selectedPrecinct.id)\r\n                        e.layer.feature.neighbors.splice(j, 1);\r\n                }\r\n                setRemovingNeighbor(false);\r\n                setSelectedPrecinct(null);\r\n                setSelectedPrecinct(selectedPrecinct);\r\n                handleAddHistory({ description: `Removed ${e.layer.feature.id} from ${selectedPrecinct.id}'s neighbor` }, selectedPrecinct);\r\n                handleAddHistory({ description: `Removed ${selectedPrecinct.id} from ${e.layer.feature.id}'s neighbor` }, e.layer.feature);\r\n                message.success('Successfully removed neighbor');\r\n            }\r\n        }\r\n        else if (combiningPrecinct) {\r\n            if (!selectedPrecinct.neighbors.includes(e.layer.feature.id)) {\r\n                message.error('Please select a neighbor precinct to combine.');\r\n                return;\r\n            }\r\n            const clickedPrecinct = e.layer.feature;\r\n            var newFeature = Turf.union(\r\n                Turf.feature(selectedPrecinct.geometry),\r\n                Turf.feature(clickedPrecinct.geometry)\r\n            );\r\n            message.info(JSON.stringify(selectedPrecinct.errors));\r\n            selectedPrecinct.originalGeometry = selectedPrecinct.geometry;\r\n            selectedPrecinct.geometry = newFeature.geometry;\r\n            for(let i in selectedPrecinct.demographic) {\r\n                selectedPrecinct.demographic[i]+= clickedPrecinct.demographic[i];\r\n            }\r\n            for(let i in selectedPrecinct.elections) {\r\n                selectedPrecinct.elections[i][Constants.PARTIES_ENUM[0]] += clickedPrecinct.elections[i][Constants.PARTIES_ENUM[0]]\r\n                selectedPrecinct.elections[i][Constants.PARTIES_ENUM[1]] += clickedPrecinct.elections[i][Constants.PARTIES_ENUM[1]]\r\n            }\r\n            selectedPrecinct.neighbors = selectedPrecinct.neighbors.concat(clickedPrecinct.neighbors);\r\n            selectedPrecinct.histories = selectedPrecinct.histories.concat(clickedPrecinct.histories);\r\n            selectedPrecinct.errors = selectedPrecinct.errors.concat(clickedPrecinct.errors);\r\n            selectedPrecinct.isGhost = false;\r\n            if (precinctRequester.updatePrecinct(selectedPrecinct)) {\r\n                precinctBorders.push(selectedPrecinct);\r\n                precinctsRef.leafletElement.clearLayers();\r\n                precinctsRef.leafletElement.addData(precinctBorders);\r\n                setSelectedPrecinct(null);\r\n                setSelectedPrecinct(selectedPrecinct);\r\n                handleAddHistory({'description':`Combined precincts ${selectedPrecinct.id} with ${clickedPrecinct.id}`}, selectedPrecinct);\r\n                message.success('Successfully combined precincts.');\r\n            }\r\n            setCombiningPrecinct(false);\r\n        }\r\n        else if (selectedPrecinct && selectedPrecinct.id === e.layer.feature.id) {\r\n            setSelectedPrecinct(null);\r\n        }\r\n        else {\r\n            handlePrecinctChange(e.layer);\r\n        }\r\n    }\r\n\r\n    function handlePrecinctLayerMouseOver(e) {\r\n        if (addingNeighbor || combiningPrecinct || drawController) {\r\n            return;\r\n        }\r\n        setDelayHandler(setTimeout(() => {\r\n            handlePrecinctChange(e.layer);\r\n        }, 500))\r\n    }\r\n\r\n    function handleZoomChange() {\r\n        setZoomLevel(mapRef.viewport.zoom);\r\n    }\r\n\r\n    function handleShowPrecincts(e) {\r\n        setShowPrecincts(e.target.checked);\r\n    }\r\n\r\n    function handleShowDistricts(e) {\r\n        setShowDistricts(e.target.checked);\r\n    }\r\n\r\n    function handleShowNp(e) {\r\n        setShowNp(e.target.checked);\r\n    }\r\n\r\n    function handleShowOriginalMap(e) {\r\n        setShowOriginal(e.target.checked);\r\n        precinctBorders.forEach(precinct => {\r\n            let temp = precinct.geometry;\r\n            precinct.geometry = precinct.originalGeometry;\r\n            precinct.originalGeometry = temp;\r\n        });\r\n        precinctsRef.leafletElement.clearLayers();\r\n        precinctsRef.leafletElement.addData(precinctBorders);\r\n    }\r\n\r\n    function handleCombinePrecinct() {\r\n        setCombiningPrecinct(true);\r\n        message.info('Please click on a neighbor precinct to combine.');\r\n    }\r\n\r\n    function handleConfirmGhostPrecinct() {\r\n        selectedPrecinct.name = selectedPrecinct.name.substring(selectedPrecinct.name.indexOf(\" \") + 1);\r\n        if (precinctRequester.updateGhostPrecinct(selectedPrecinct.id)) {\r\n            setRerender(!rerender);\r\n            handleAddHistory({ description: `Confirmed precinct ${selectedPrecinct.id} is a Ghost Precinct.` }, selectedPrecinct);\r\n            message.success('Action Completed');\r\n        }\r\n        else {\r\n            message.error('Action Failed');\r\n        }\r\n    }\r\n\r\n    function handleGeneratePrecinct() {\r\n        mapRef.leafletElement.removeEventListener('draw:created');\r\n        mapRef.leafletElement.addEventListener('draw:created', async function (e) {\r\n            let geometry = {\r\n                type: \"Polygon\",\r\n                coordinates: [e.layer._latlngs[0].map(item => [item.lng, item.lat])]\r\n            };\r\n            const kinks = Turf.kinks(geometry);\r\n            if (kinks.features.length) {\r\n                message.error(\"Self-Intersection Detected, Please Do It Again!\");\r\n                drawController.disable();\r\n                setDrawController(null);\r\n                return;\r\n            }\r\n            let geometryString = JSON.stringify(geometry);\r\n            let newPrecinct = {\r\n                type: \"Feature\",\r\n                geometry: geometryString,\r\n                originalGeometry: null,\r\n                errors: [],\r\n                histories: [],\r\n                name: \"Generated Precinct\",\r\n                neighbors: [],\r\n                comments: [],\r\n                demographic: { \"NH_AMIN\": 0, \"NH_NHPI\": 0, \"NH_ASIAN\": 0, \"NH_BLACK\": 0, \"NH_OTHER\": 0, \"NH_WHITE\": 0 },\r\n                elections: { PRESIDENTIAL_2016: { 'DEMOCRAT': 0, 'REPUBLICAN': 0 }, CONGRESSIONAL_2016: { 'DEMOCRAT': 0, 'REPUBLICAN': 0 }, CONGRESSIONAL_2018: { 'DEMOCRAT': 0, 'REPUBLICAN': 0 } },\r\n                isGhost: false,\r\n                stateName: selectedState.name,\r\n                districtName: selectedCd.name,\r\n                countyName: \" N/A\",\r\n            };\r\n            console.log(newPrecinct);\r\n            let res = await precinctRequester.addNewPrecinct(newPrecinct);\r\n            if (res) {\r\n                newPrecinct.geometry = geometry;\r\n                newPrecinct.id = res;\r\n                precinctBorders.push(newPrecinct);\r\n                precinctsRef.leafletElement.clearLayers();\r\n                precinctsRef.leafletElement.addData(precinctBorders);\r\n                // handlePrecinctChange({ feature: newFeature });\r\n                setSelectedPrecinct(newPrecinct);\r\n                message.success(`Successfully generated a precinct.`);\r\n                // handleAddHistory(`Generated a precinct.`);\r\n            }\r\n            else {\r\n\r\n            }\r\n            drawController.disable();\r\n            setDrawController(null);\r\n        });\r\n        const drawController = new L.Draw.Polygon(mapRef.leafletElement, null);\r\n        setDrawController(drawController);\r\n        drawController.enable();\r\n    }\r\n\r\n    function handleEditPrecinctLayer() {\r\n        const featureGroup = L.featureGroup([\r\n            new L.polygon(selectedPrecinct.geometry.coordinates[0].map(positions => [positions[1], positions[0]]))\r\n        ]);\r\n        mapRef.leafletElement.addLayer(featureGroup);\r\n        const drawController = new L.EditToolbar.Edit(mapRef.leafletElement, {\r\n            featureGroup: featureGroup\r\n        });\r\n        setDrawController(drawController);\r\n\r\n        mapRef.leafletElement.removeEventListener('draw:edited');\r\n        mapRef.leafletElement.addEventListener('draw:edited', function (e) {\r\n            const layersKey = Object.keys(e.layers._layers);\r\n            if (layersKey.length === 0)\r\n                return;\r\n            const layer = e.layers._layers[layersKey[0]];\r\n            const geoJson = {\r\n                type: \"Polygon\",\r\n                coordinates: [layer._latlngs[0].map(item => [item.lng, item.lat])]\r\n            }\r\n            const kinks = Turf.kinks(geoJson);\r\n            if (kinks.features.length) {\r\n                message.error(\"Self-Intersection Detected, Please Do It Again!\");\r\n                drawController.disable();\r\n                setDrawController(null);\r\n                return;\r\n            }\r\n            precinctRequester.updateBoundary(selectedPrecinct.id, JSON.stringify(geoJson));\r\n            selectedPrecinct.geometry = geoJson;\r\n            precinctsRef.leafletElement.clearLayers();\r\n            precinctsRef.leafletElement.addData(precinctBorders);\r\n            message.success(`Successfully edited ${selectedPrecinct.name}'s boundary.`);\r\n            drawController.disable();\r\n            setDrawController(null);\r\n            handleAddHistory({ description: `Edited ${selectedPrecinct.name}'s boundary.` }, selectedPrecinct);\r\n        });\r\n\r\n        mapRef.leafletElement.removeEventListener('draw:editstop');\r\n        mapRef.leafletElement.addEventListener('draw:editstop', function (e) {\r\n            mapRef.leafletElement.removeLayer(featureGroup);\r\n        });\r\n        drawController.enable();\r\n    }\r\n\r\n    function handleDrawSave() {\r\n        if (drawController instanceof L.Draw.Polygon)\r\n            drawController.completeShape();\r\n        else\r\n            drawController.save();\r\n        handleClickedCancel();\r\n    }\r\n\r\n    function handleClickedCancel() {\r\n        if (addingNeighbor) {\r\n            setAddingNeighbor(false);\r\n            message.info('Cancelled adding neighbor.');\r\n        }\r\n        else if (combiningPrecinct) {\r\n            setCombiningPrecinct(false);\r\n            message.info('Cancelled combining precincts.');\r\n        }\r\n        else {\r\n            drawController.disable();\r\n            setDrawController(null);\r\n        }\r\n    }\r\n\r\n    function handleDrawUndo() {\r\n        if (drawController instanceof L.Draw.Polygon)\r\n            drawController.deleteLastVertex();\r\n        else\r\n            drawController.revertLayers();\r\n    }\r\n\r\n    function handleAddNeighbor() {\r\n        setAddingNeighbor(true);\r\n        message.info('Please click on another precinct to add.');\r\n    }\r\n\r\n    function handleRemoveNeighbor() {\r\n        setRemovingNeighbor(true);\r\n        message.info('Please click on another precinct to remove.');\r\n    }\r\n\r\n    async function handleAddHistory(newHistory, precinct, layer = null) {\r\n        newHistory.timestamp = moment();\r\n        let res;\r\n        if ((res = await historyRequester.postHistory(newHistory, precinct.id))) {\r\n            if (newHistory.category)\r\n                history[Constants.ERROR_ENUM.indexOf(newHistory.category)].push([newHistory, layer]);\r\n            newHistory.precinct = precinct;\r\n            newHistory.id = res;\r\n            newHistory.comments = [];\r\n            precinct.histories.push(newHistory);\r\n        }\r\n        else {\r\n            message.error('Failed to post history.');\r\n        }\r\n    }\r\n\r\n    function handleZoomInPrecinct(feature, layer) {\r\n        setSelectedPrecinct(feature);\r\n        mapRef.leafletElement.fitBounds(layer.getBounds());\r\n    }\r\n\r\n    function handleResolvedError(error, index, layer) {\r\n        const res = errorRequester.ResolveError(error.id);\r\n        if (res) {\r\n            errors[index] = errors[index].filter((item) => {\r\n                return error.id !== item[0].id;\r\n            });\r\n\r\n            error.precinct.errors = error.precinct.errors.filter((item) => {\r\n                return error.id !== item.id;\r\n            });\r\n\r\n            const description = \"Resolved error \" + Constants.ERROR_HEADER[Constants.ERROR_ENUM.indexOf(error.category)]\r\n                + \". Error description: \" + error.description;\r\n            handleAddHistory({ description, category: error.category }, error.precinct, layer);\r\n            message.success('Successfully resolved the error.');\r\n            setRerender(!rerender);\r\n        }\r\n        else {\r\n            message.error('Failed to resolve.');\r\n        }\r\n    }\r\n\r\n    function handleOpenCommentTab(history) {\r\n        setShowCommentTab(true);\r\n        setSelectedHistory(history);\r\n    }\r\n\r\n    function handleCloseCommentTab() {\r\n        setShowCommentTab(false);\r\n        setSelectedHistory(null);\r\n    }\r\n\r\n    function onEachStateFeature(state, layer) {\r\n        layer.on({\r\n            click: async () => {\r\n                handleStateChange(state, layer);\r\n            },\r\n            mouseover: () => {\r\n                layer.setStyle({\r\n                    weight: 3\r\n                });\r\n            },\r\n            mouseout: () => {\r\n                layer.setStyle({\r\n                    weight: 1\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function onEachCdFeature(district, layer) {\r\n        layer.on({\r\n            click: async () => {\r\n                setLoading(true);\r\n                setSelectedCd(null);\r\n                setPrecinctBorders(null);\r\n                setSelectedPrecinct(null);\r\n                setHistory([[], [], [], [], [], [], []]);\r\n                setErrors([[], [], [], [], [], [], []]);\r\n                setShowOriginal(false);\r\n                await borderJsonRequester.getPrecinctBorder(district.name).then(res => {\r\n                    setPrecinctBorders(res);\r\n                });\r\n                setSelectedCd(district);\r\n                setLoading(false);\r\n            },\r\n            mouseover: () => {\r\n                layer.setStyle({\r\n                    weight: 3\r\n                });\r\n            },\r\n            mouseout: () => {\r\n                layer.setStyle({\r\n                    weight: 1\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function onEachPrecinctFeature(precinct, layer) {\r\n        precinct.errors.forEach((item, index) => {\r\n            item.precinct = precinct;\r\n            if (item.category)\r\n                errors[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\r\n        });\r\n\r\n        precinct.histories.forEach((item, index) => {\r\n            item.precinct = precinct;\r\n            if (item.category)\r\n                history[Constants.ERROR_ENUM.indexOf(item.category)].push([item, layer]);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <StateContext.Provider value={selectedState}>\r\n                <DistrictContext.Provider value={selectedCd}>\r\n                    <HistoryContext.Provider value={handleAddHistory}>\r\n                        <RerenderContext.Provider value={[rerender, setRerender]}>\r\n                            <LeftPanel\r\n                                errors={errors}\r\n                                precincts={precinctBorders}\r\n                                history={history}\r\n                                handleZoomInPrecinct={handleZoomInPrecinct}\r\n                                handleResolvedError={handleResolvedError}\r\n                                handleOpenCommentTab={handleOpenCommentTab}\r\n                            />\r\n                            <Layout>\r\n                                <Layout.Header>\r\n                                    <HeaderPanel\r\n                                        selectedPrecinct={selectedPrecinct}\r\n                                        zoomLevel={zoomLevel}\r\n                                        handleStateChangeDropdown={handleStateChangeDropdown}\r\n                                        combiningPrecinct={combiningPrecinct}\r\n                                        handleCombinePrecinct={handleCombinePrecinct}\r\n                                        addingNeighbor={addingNeighbor}\r\n                                        removingNeighbor={removingNeighbor}\r\n                                        handleAddNeighbor={handleAddNeighbor}\r\n                                        handleRemoveNeighbor={handleRemoveNeighbor}\r\n                                        handleConfirmGhostPrecinct={handleConfirmGhostPrecinct}\r\n                                        handleEditPrecinctLayer={handleEditPrecinctLayer}\r\n                                        drawController={drawController}\r\n                                        handleClickedCancel={handleClickedCancel}\r\n                                        handleDrawSave={handleDrawSave}\r\n                                        handleDrawUndo={handleDrawUndo}\r\n                                        handleGeneratePrecinct={handleGeneratePrecinct}\r\n                                    />\r\n                                </Layout.Header>\r\n                                <Spin spinning={loading} size=\"large\">\r\n                                    <Layout.Content>\r\n                                        <Map\r\n                                            ref={(ref) => { setMapRef(ref); }}\r\n                                            center={Constants.MAP_CENTER}\r\n                                            zoom={4}\r\n                                            zoomControl={false}\r\n                                            animate={true}\r\n                                            onZoomEnd={handleZoomChange}\r\n                                            preferCanvas={true}\r\n                                        >\r\n                                            <TileLayer\r\n                                                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                                url=\"https://api.tiles.mapbox.com/v4/mapbox.light/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiaGFubGl1IiwiYSI6ImNrNnk3YTZpMzBlcjczZW15cmU1Mm5hMWkifQ.dW0oDKWDng4w-osIkRvLsQ\"\r\n                                            />\r\n                                            <ZoomControl position='bottomright' />\r\n                                            <Control position=\"bottomleft\" >\r\n                                                <Card>\r\n                                                    <Checkbox\r\n                                                        defaultChecked={true}\r\n                                                        onChange={handleShowDistricts}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedState}\r\n                                                    >\r\n                                                        Show Districts\r\n                                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox\r\n                                                        defaultChecked={true}\r\n                                                        onChange={handleShowPrecincts}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd}\r\n                                                    >\r\n                                                        Show Precincts\r\n                                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox onChange={handleShowNp}>\r\n                                                        Show National Parks &nbsp;\r\n                                                        <img src=\"images/NpIcon.png\" alt=\"National Park Icon\" className=\"icon\" />\r\n                                                    </Checkbox>\r\n                                                    <br />\r\n                                                    <Checkbox\r\n                                                        checked={showOriginal}\r\n                                                        onChange={handleShowOriginalMap}\r\n                                                        disabled={zoomLevel < Constants.DP_ZOOM_LEVEL || !selectedCd}\r\n                                                    >\r\n                                                        Show Original Precinct Map &nbsp;\r\n                                                    </Checkbox>\r\n                                                </Card>\r\n                                            </Control>\r\n\r\n                                            {stateBorders &&\r\n                                                stateBorders.map((stateBorder, index) => {\r\n                                                    if (selectedState\r\n                                                        && stateBorder.name === selectedState.name\r\n                                                        && zoomLevel >= Constants.DP_ZOOM_LEVEL\r\n                                                        && (showDistricts || (showPrecincts && selectedCd))\r\n                                                    ) {\r\n                                                        return (\r\n                                                            <React.Fragment key={\"F\" + index}>\r\n                                                                {showDistricts && <GeoJSON\r\n                                                                    key={\"CD\" + index}\r\n                                                                    data={cdBorders[Constants.STATES.indexOf(selectedState.name)]}\r\n                                                                    style={layerStyler.geoJSONCdStyle}\r\n                                                                    onEachFeature={onEachCdFeature}\r\n                                                                />\r\n                                                                }\r\n                                                                {(showPrecincts && precinctBorders) && <GeoJSON\r\n                                                                    key={\"P\" + index}\r\n                                                                    ref={(ref) => { setPrecinctsRef(ref); }}\r\n                                                                    data={precinctBorders}\r\n                                                                    style={(feature) => layerStyler.geoJSONPrecinctStyle(feature, selectedPrecinct)}\r\n                                                                    onEachFeature={onEachPrecinctFeature}\r\n                                                                    onClick={handlePrecinctLayerOnClick}\r\n                                                                    onMouseOver={handlePrecinctLayerMouseOver}\r\n                                                                    onMouseOut={() => clearTimeout(delayHandler)}\r\n                                                                />\r\n                                                                }\r\n                                                            </React.Fragment>\r\n                                                        );\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <GeoJSON\r\n                                                                key={\"S\" + index}\r\n                                                                ref={stateLayerRefs.current[index]}\r\n                                                                data={stateBorder}\r\n                                                                style={layerStyler.geoJSONStateStyle}\r\n                                                                onEachFeature={onEachStateFeature}\r\n                                                            />\r\n                                                        );\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                            {(npBorders && showNp) && (\r\n                                                <React.Fragment>\r\n                                                    <GeoJSON\r\n                                                        data={npBorders}\r\n                                                        style={(feature) => layerStyler.geoJSONNpStyle(feature)}\r\n                                                    />\r\n                                    )}\r\n                                                    {npMarkers.map((feature, index) =>\r\n                                                        <Marker\r\n                                                            key={`marker-${index}`}\r\n                                                            position={feature.geometry.coordinates}\r\n                                                            icon={NpMarker}\r\n                                                        >\r\n                                                            <Popup>\r\n                                                                <span>Name: {feature.properties.name}</span>\r\n                                                            </Popup>\r\n                                                        </Marker>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            )}\r\n                                        </Map>\r\n                                    </Layout.Content>\r\n                                </Spin>\r\n                            </Layout>\r\n                            <RightPanel selectedPrecinct={selectedPrecinct} selectedCd={selectedCd} />\r\n                            <CommentTab\r\n                                showCommentTab={showCommentTab}\r\n                                handleCloseCommentTab={handleCloseCommentTab}\r\n                                selectedHistory={selectedHistory}\r\n                            />\r\n                        </RerenderContext.Provider>\r\n                    </HistoryContext.Provider>\r\n                </DistrictContext.Provider>\r\n            </StateContext.Provider>\r\n        </Layout>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}