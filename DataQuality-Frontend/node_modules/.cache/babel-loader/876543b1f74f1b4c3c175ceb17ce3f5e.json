{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mandy\\\\IdeaProjects\\\\DataQuality-Frontend\\\\src\\\\components\\\\map\\\\RightPanel\\\\PanelCharts\\\\Election.js\";\nimport React, { useContext, useState } from 'react';\nimport { Divider, Popover, Typography, Table, Button, Menu, Dropdown } from 'antd';\nimport Slider from \"react-slick\";\nimport { Pie } from 'react-chartjs-2';\nimport * as Constants from 'constants/constants';\nimport HistoryContext from 'contexts/HistoryContext';\nimport HeaderPanel from '../../HeaderPanel/HeaderPanel';\nimport { message } from 'antd';\nimport { DownOutlined, CalendarOutlined } from '@ant-design/icons';\nconst {\n  Paragraph\n} = Typography;\n\nvar myModule = require('../../HeaderPanel/HeaderPanel');\n\nexport default function Election(props) {\n  const handleAddHistory = useContext(HistoryContext).handleAddHistory;\n  const [rerender, setRerender] = useState(false);\n  const [data, setData] = useState(props.data);\n  const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\n  const columns = [{\n    title: 'Party',\n    dataIndex: 'party',\n    key: 'party'\n  }, {\n    title: 'Votes',\n    dataIndex: 'votes',\n    key: 'votes',\n    render: (votes, record, index) => React.createElement(Paragraph, {\n      editable: {\n        onChange: value => onChange(value, index)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, votes + \"\"),\n    width: 100\n  }, {\n    title: 'Percent',\n    dataIndex: 'percent',\n    key: 'percent'\n  }]; // const sum = props.data.reduce((a, b) => a + b);\n  // const data = props.data.map((item, index) => {\n  //     return {\n  //         key: index,\n  //         party: Constants.PARTIES[index],\n  //         votes: item,\n  //         percent: (item/sum*100).toFixed(1)\n  //     }\n  // });\n\n  function getData() {\n    let displayData = [];\n    let sum = 0;\n    message.info(HeaderPanel.selectedElection);\n\n    for (let i in data) {\n      // message.info(i+\" -> \"+data[i]);\n      displayData.push(data[i]);\n      sum += data[i];\n    }\n\n    displayData = displayData.map((item, index) => {\n      return {\n        key: index,\n        party: Constants.PARTIES[index],\n        votes: item,\n        percent: (item / sum * 100).toFixed(1)\n      };\n    });\n    return displayData;\n  }\n\n  function onChange(value, index) {\n    props.data[index] = Number(value);\n    handleAddHistory(`Changed ${props.name}'s ${Constants.PARTIES[index]} votes to ${value}`);\n    setRerender(!rerender);\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"chartHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Election Data\"), React.createElement(Dropdown, {\n    overlay: React.createElement(Menu, {\n      onClick: ({\n        key\n      }) => setSelectedElection(key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, Constants.ELECTIONS.map(election => {\n      return React.createElement(Menu.Item, {\n        key: election,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(CalendarOutlined, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), \" \", election);\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"electionDiv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    icon: React.createElement(CalendarOutlined, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }),\n    shape: \"round\",\n    style: \"border-radius: 5px;\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, selectedElection, \" \", React.createElement(DownOutlined, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })))), React.createElement(Popover, {\n    placement: \"topRight\",\n    title: \"Source of Data\",\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Harvard Election Data Archive\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"sourceText\",\n    style: \"margin-top: -26px;\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"sourceBg\",\n    style: \"\\r padding: 6.7px 8px;\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Source of Data\"))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    arrows: false,\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Pie, {\n    data: {\n      labels: Constants.PARTIES,\n      datasets: [{\n        data: data.map(item => item.votes),\n        backgroundColor: ['#FF6384', '#36A2EB', '#B2EB70', '#FFCE56'],\n        hoverBackgroundColor: ['#FF6384', '#36A2EB', '#B2EB70', '#FFCE56']\n      }]\n    },\n    borderWidth: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(Table, {\n    columns: columns,\n    dataSource: getData(),\n    pagination: false,\n    size: 'small',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["C:/Users/mandy/IdeaProjects/DataQuality-Frontend/src/components/map/RightPanel/PanelCharts/Election.js"],"names":["React","useContext","useState","Divider","Popover","Typography","Table","Button","Menu","Dropdown","Slider","Pie","Constants","HistoryContext","HeaderPanel","message","DownOutlined","CalendarOutlined","Paragraph","myModule","require","Election","props","handleAddHistory","rerender","setRerender","data","setData","selectedElection","setSelectedElection","ELECTIONS","columns","title","dataIndex","key","render","votes","record","index","onChange","value","width","getData","displayData","sum","info","i","push","map","item","party","PARTIES","percent","toFixed","Number","name","election","labels","datasets","backgroundColor","hoverBackgroundColor"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { Divider, Popover, Typography, Table ,  Button, Menu, Dropdown} from 'antd';\r\nimport Slider from \"react-slick\";\r\nimport { Pie } from 'react-chartjs-2';\r\nimport * as Constants from 'constants/constants';\r\nimport HistoryContext from 'contexts/HistoryContext';\r\nimport HeaderPanel from '../../HeaderPanel/HeaderPanel'\r\nimport { message } from 'antd';\r\nimport {DownOutlined, CalendarOutlined} from '@ant-design/icons';\r\n\r\nconst { Paragraph } = Typography;\r\nvar myModule = require('../../HeaderPanel/HeaderPanel');\r\n\r\nexport default function Election(props) {\r\n    const handleAddHistory = useContext(HistoryContext).handleAddHistory;\r\n    const [rerender, setRerender] = useState(false);\r\n    const [data, setData] = useState(props.data);\r\n    const [selectedElection, setSelectedElection] = useState(Constants.ELECTIONS[0]);\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Party',\r\n            dataIndex: 'party',\r\n            key: 'party'\r\n        },\r\n        {\r\n            title: 'Votes',\r\n            dataIndex: 'votes',\r\n            key: 'votes',\r\n            render: (votes, record, index) => (\r\n                <Paragraph editable={{ onChange: value => onChange(value, index)}}>{votes+\"\"}</Paragraph>\r\n            ),\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Percent',\r\n            dataIndex: 'percent',\r\n            key: 'percent',\r\n        }\r\n    ];\r\n\r\n    // const sum = props.data.reduce((a, b) => a + b);\r\n    // const data = props.data.map((item, index) => {\r\n    //     return {\r\n    //         key: index,\r\n    //         party: Constants.PARTIES[index],\r\n    //         votes: item,\r\n    //         percent: (item/sum*100).toFixed(1)\r\n    //     }\r\n    // });\r\n\r\n    function getData() {\r\n        let displayData = [];\r\n        let sum = 0;\r\n        message.info(HeaderPanel.selectedElection);\r\n        for(let i in data) {\r\n           // message.info(i+\" -> \"+data[i]);\r\n            displayData.push(data[i]);\r\n            sum += data[i];\r\n        }\r\n        displayData = displayData.map((item, index) => {\r\n            return {\r\n                key: index,\r\n                party: Constants.PARTIES[index],\r\n                votes: item,\r\n                percent: (item/sum*100).toFixed(1)\r\n            }\r\n        });\r\n        return displayData;\r\n    }\r\n\r\n    function onChange(value, index) {\r\n        props.data[index] = Number(value);\r\n        handleAddHistory(`Changed ${props.name}'s ${Constants.PARTIES[index]} votes to ${value}`);\r\n        setRerender(!rerender);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <h1 className=\"chartHeader\">Election Data</h1>\r\n            <Dropdown\r\n                overlay={\r\n                    <Menu onClick={({ key }) => setSelectedElection(key)}>\r\n                        {\r\n                            Constants.ELECTIONS.map((election) => {\r\n                                return (\r\n                                    <Menu.Item key={election}>\r\n                                        <CalendarOutlined /> {election}\r\n                                    </Menu.Item>\r\n                                );\r\n                            }\r\n                            )\r\n                        }\r\n                    </Menu>\r\n                }\r\n            >\r\n                <div className=\"electionDiv\">\r\n                    <Button\r\n                        type=\"primary\"\r\n                        icon={<CalendarOutlined />}\r\n                        shape=\"round\"\r\n                        style=\"border-radius: 5px;\"\r\n                    >\r\n                        {selectedElection} <DownOutlined />\r\n                    </Button>\r\n                </div>\r\n            </Dropdown>\r\n            <Popover\r\n                placement=\"topRight\" \r\n                title={\"Source of Data\"}\r\n                content={<p>Harvard Election Data Archive</p>}\r\n            >\r\n                <p className=\"sourceText\" style=\"margin-top: -26px;\"><span className=\"sourceBg\" style=\"\r\n    padding: 6.7px 8px;\">Source of Data</span></p>\r\n            </Popover>\r\n            <br />\r\n            <Slider \r\n                arrows={false}\r\n                dots={true}\r\n                infinite={true}\r\n                speed={500}\r\n                slidesToShow={1}\r\n                slidesToScroll={1}\r\n            >\r\n                <Pie \r\n                    data={{\r\n                        labels: Constants.PARTIES,\r\n                        datasets: [{\r\n                            data: data.map(item => item.votes),\r\n                            backgroundColor: [\r\n                                '#FF6384',\r\n                                '#36A2EB',\r\n                                '#B2EB70',\r\n                                '#FFCE56',\r\n                    \r\n                            ],\r\n                            hoverBackgroundColor: [\r\n                                '#FF6384',\r\n                                '#36A2EB',\r\n                                '#B2EB70',\r\n                                '#FFCE56',\r\n                            ]\r\n                        }]\r\n                    }\r\n                    }\r\n                    borderWidth = {100}\r\n                />\r\n                <Table\r\n                    columns={columns}\r\n                    dataSource={getData()}\r\n                    pagination={false}\r\n                    size={'small'}\r\n                />\r\n            </Slider>\r\n        </React.Fragment>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}